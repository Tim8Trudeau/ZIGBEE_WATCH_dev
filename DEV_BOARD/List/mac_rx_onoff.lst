###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        05/Jul/2015  15:33:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\mac_rx_onoff.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\mac_rx_onoff.c" -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=TRUE -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1
#        --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\mac_rx_onoff.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\Obj\mac_rx_onoff.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\mac_rx_onoff.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx_onoff.c
      3            Revised:        $Date: 2013-05-17 11:25:11 -0700 (Fri, 17 May 2013) $
      4            Revision:       $Revision: 34355 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* exported low-level */
     50          #include "mac_low_level.h"
     51          
     52          /* low-level specific */
     53          #include "mac_rx_onoff.h"
     54          #include "mac_rx.h"
     55          #include "mac_tx.h"
     56          
     57          /* target specific */
     58          #include "mac_radio_defs.h"
     59          
     60          /* debug */
     61          #include "mac_assert.h"
     62          
     63          
     64          /* ------------------------------------------------------------------------------------------------
     65           *                                         Global Variables
     66           * ------------------------------------------------------------------------------------------------
     67           */

   \                                 In section .bss, align 1
     68          uint8 macRxOnFlag;
   \                     macRxOnFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     69          uint8 macRxEnableFlags;
   \                     macRxEnableFlags:
   \   00000000                      DS8 1
     70          
     71          
     72          /**************************************************************************************************
     73           * @fn          macRxOnOffInit
     74           *
     75           * @brief       Initialize variables for rx on/off module.
     76           *
     77           * @param       none
     78           *
     79           * @return      none
     80           **************************************************************************************************
     81           */

   \                                 In section .text, align 2, keep-with-next
     82          MAC_INTERNAL_API void macRxOnOffInit(void)
     83          {
     84            macRxEnableFlags = 0;
   \                     macRxOnOffInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable8
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     85            macRxOnFlag = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable8_1
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
     86          }
   \   0000000C   0x4770             BX       LR               ;; return
     87          
     88          
     89          /**************************************************************************************************
     90           * @fn          macRxEnable
     91           *
     92           * @brief       Set enable flags and then turn on receiver.
     93           *
     94           * @param       flags - byte containing rx enable flags to set
     95           *
     96           * @return      none
     97           **************************************************************************************************
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          MAC_INTERNAL_API void macRxEnable(uint8 flags)
    100          {
   \                     macRxEnable: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    101            halIntState_t  s;
    102          
    103            MAC_ASSERT(flags != 0); /* rx flags not affected */
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD101             BNE.N    ??macRxEnable_0
   \   0000000A   0x.... 0x....      BL       halAssertHandler
    104          
    105            /* set enable flags and then turn on receiver */
    106            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRxEnable_0: (+1)
   \   0000000E   0x.... 0x....      BL       IntMasterDisable
   \   00000012   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000016   0xF090 0x0501      EORS     R5,R0,#0x1
    107            macRxEnableFlags |= flags;
   \   0000001A   0x....             LDR.N    R0,??DataTable8
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x4320             ORRS     R0,R4,R0
   \   00000020   0x....             LDR.N    R1,??DataTable8
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    108            macRxOn();
   \   00000024   0x.... 0x....      BL       macRxOn
    109            HAL_EXIT_CRITICAL_SECTION(s);
   \   00000028   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0xD001             BEQ.N    ??macRxEnable_1
   \   0000002E   0x.... 0x....      BL       IntMasterEnable
    110          }
   \                     ??macRxEnable_1: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    111          
    112          
    113          /**************************************************************************************************
    114           * @fn          macRxSoftEnable
    115           *
    116           * @brief       Set enable flags but don't turn on the receiver.  Useful to leave the receiver
    117           *              on after a transmit, but without turning it on immediately.
    118           *
    119           * @param       flags - byte containing rx enable flags to set
    120           *
    121           * @return      none
    122           **************************************************************************************************
    123           */

   \                                 In section .text, align 2, keep-with-next
    124          MAC_INTERNAL_API void macRxSoftEnable(uint8 flags)
    125          {
   \                     macRxSoftEnable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    126            halIntState_t  s;
    127          
    128            MAC_ASSERT(flags != 0); /* rx flags not affected */
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD101             BNE.N    ??macRxSoftEnable_0
   \   0000000A   0x.... 0x....      BL       halAssertHandler
    129          
    130            /* set the enable flags but do not turn on the receiver */
    131            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRxSoftEnable_0: (+1)
   \   0000000E   0x.... 0x....      BL       IntMasterDisable
   \   00000012   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000016   0xF090 0x0001      EORS     R0,R0,#0x1
    132            macRxEnableFlags |= flags;
   \   0000001A   0x....             LDR.N    R1,??DataTable8
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0x4321             ORRS     R1,R4,R1
   \   00000020   0x....             LDR.N    R2,??DataTable8
   \   00000022   0x7011             STRB     R1,[R2, #+0]
    133            HAL_EXIT_CRITICAL_SECTION(s);
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD001             BEQ.N    ??macRxSoftEnable_1
   \   0000002A   0x.... 0x....      BL       IntMasterEnable
    134          }
   \                     ??macRxSoftEnable_1: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    135          
    136          
    137          /**************************************************************************************************
    138           * @fn          macRxDisable
    139           *
    140           * @brief       Clear indicated rx enable flags.  If all flags are clear, turn off receiver
    141           *              unless there is an active receive or transmit.
    142           *
    143           * @param       flags - byte containg rx enable flags to clear
    144           *
    145           * @return      none
    146           **************************************************************************************************
    147           */

   \                                 In section .text, align 2, keep-with-next
    148          MAC_INTERNAL_API void macRxDisable(uint8 flags)
    149          {
   \                     macRxDisable: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    150            halIntState_t  s;
    151          
    152            MAC_ASSERT(flags != 0); /* rx flags not affected */
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD101             BNE.N    ??macRxDisable_0
   \   0000000A   0x.... 0x....      BL       halAssertHandler
    153          
    154            /* clear the indicated flags */
    155            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRxDisable_0: (+1)
   \   0000000E   0x.... 0x....      BL       IntMasterDisable
   \   00000012   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000016   0xF090 0x0001      EORS     R0,R0,#0x1
    156            macRxEnableFlags &= (flags ^ 0xFF);
   \   0000001A   0x....             LDR.N    R1,??DataTable8
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0xF094 0x02FF      EORS     R2,R4,#0xFF
   \   00000022   0x4011             ANDS     R1,R2,R1
   \   00000024   0x....             LDR.N    R2,??DataTable8
   \   00000026   0x7011             STRB     R1,[R2, #+0]
    157            HAL_EXIT_CRITICAL_SECTION(s);
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??macRxDisable_1
   \   0000002E   0x.... 0x....      BL       IntMasterEnable
    158          
    159            /* turn off the radio if it is allowed */
    160            macRxOffRequest();
   \                     ??macRxDisable_1: (+1)
   \   00000032   0x.... 0x....      BL       macRxOffRequest
    161          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    162          
    163          
    164          /**************************************************************************************************
    165           * @fn          macRxHardDisable
    166           *
    167           * @brief       Clear all enable flags and turn off receiver.
    168           *
    169           * @param       none
    170           *
    171           * @return      none
    172           **************************************************************************************************
    173           */

   \                                 In section .text, align 2, keep-with-next
    174          MAC_INTERNAL_API void macRxHardDisable(void)
    175          {
   \                     macRxHardDisable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    176            halIntState_t  s;
    177          
    178            HAL_ENTER_CRITICAL_SECTION(s);
   \   00000002   0x.... 0x....      BL       IntMasterDisable
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0xF090 0x0001      EORS     R0,R0,#0x1
    179          
    180            macRxEnableFlags = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R2,??DataTable8
   \   00000012   0x7011             STRB     R1,[R2, #+0]
    181            macRxOnFlag = 0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x....             LDR.N    R2,??DataTable8_1
   \   00000018   0x7011             STRB     R1,[R2, #+0]
    182          
    183            /* force receiver off */
    184            MAC_RADIO_RXTX_OFF();
   \   0000001A   0x21EF             MOVS     R1,#+239
   \   0000001C   0x....             LDR.N    R2,??DataTable8_2  ;; 0x40088838
   \   0000001E   0x6011             STR      R1,[R2, #+0]
    185            MAC_RADIO_FLUSH_RX_FIFO();
   \   00000020   0x21ED             MOVS     R1,#+237
   \   00000022   0x....             LDR.N    R2,??DataTable8_2  ;; 0x40088838
   \   00000024   0x6011             STR      R1,[R2, #+0]
   \   00000026   0x21ED             MOVS     R1,#+237
   \   00000028   0x....             LDR.N    R2,??DataTable8_2  ;; 0x40088838
   \   0000002A   0x6011             STR      R1,[R2, #+0]
    186            MAC_DEBUG_TURN_OFF_RX_LED();
    187          
    188            HAL_EXIT_CRITICAL_SECTION(s);
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD001             BEQ.N    ??macRxHardDisable_0
   \   00000032   0x.... 0x....      BL       IntMasterEnable
    189          
    190            /* clean up after being forced off */
    191            macRxHaltCleanup();
   \                     ??macRxHardDisable_0: (+1)
   \   00000036   0x.... 0x....      BL       macRxHaltCleanup
    192          }
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
    193          
    194          /**************************************************************************************************
    195           * @fn          macRxOnRequest
    196           *
    197           * @brief       Turn on the receiver if any rx enable flag is set.
    198           *
    199           * @param       none
    200           *
    201           * @return      none
    202           **************************************************************************************************
    203           */

   \                                 In section .text, align 2, keep-with-next
    204          MAC_INTERNAL_API void macRxOnRequest(void)
    205          {
   \                     macRxOnRequest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    206            halIntState_t  s;
    207          
    208            HAL_ENTER_CRITICAL_SECTION(s);
   \   00000002   0x.... 0x....      BL       IntMasterDisable
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0xF090 0x0401      EORS     R4,R0,#0x1
    209            if (macRxEnableFlags)
   \   0000000E   0x....             LDR.N    R0,??DataTable8
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??macRxOnRequest_0
    210            {
    211              macRxOn();
   \   00000016   0x.... 0x....      BL       macRxOn
    212            }
    213            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRxOnRequest_0: (+1)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD001             BEQ.N    ??macRxOnRequest_1
   \   00000020   0x.... 0x....      BL       IntMasterEnable
    214          }
   \                     ??macRxOnRequest_1: (+1)
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    215          
    216          
    217          /**************************************************************************************************
    218           * @fn          macRxOffRequest
    219           *
    220           * @brief       Turn off receiver if permitted.
    221           *
    222           * @param       none
    223           *
    224           * @return      none
    225           **************************************************************************************************
    226           */

   \                                 In section .text, align 2, keep-with-next
    227          MAC_INTERNAL_API void macRxOffRequest(void)
    228          {
   \                     macRxOffRequest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    229            halIntState_t  s;
    230          
    231            HAL_ENTER_CRITICAL_SECTION(s);
   \   00000002   0x.... 0x....      BL       IntMasterDisable
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0xF090 0x0401      EORS     R4,R0,#0x1
    232            if (!macRxEnableFlags)
   \   0000000E   0x....             LDR.N    R0,??DataTable8
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD10D             BNE.N    ??macRxOffRequest_0
    233            {
    234              if (!MAC_RX_IS_PHYSICALLY_ACTIVE() && !MAC_TX_IS_PHYSICALLY_ACTIVE())
   \   00000016   0x....             LDR.N    R0,??DataTable8_3
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x0600             LSLS     R0,R0,#+24
   \   0000001C   0xD409             BMI.N    ??macRxOffRequest_0
   \   0000001E   0x....             LDR.N    R0,??DataTable8_4
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD105             BNE.N    ??macRxOffRequest_0
   \   00000026   0x....             LDR.N    R0,??DataTable8_5
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x0600             LSLS     R0,R0,#+24
   \   0000002C   0xD401             BMI.N    ??macRxOffRequest_0
    235              {
    236                macRxOff();
   \   0000002E   0x.... 0x....      BL       macRxOff
    237              }
    238            }
    239            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRxOffRequest_0: (+1)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD001             BEQ.N    ??macRxOffRequest_1
   \   00000038   0x.... 0x....      BL       IntMasterEnable
    240          }
   \                     ??macRxOffRequest_1: (+1)
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    241          
    242          
    243          /**************************************************************************************************
    244           * @fn          macRxOn
    245           *
    246           * @brief       Turn on the receiver if it's not already on.
    247           *
    248           * @param       none
    249           *
    250           * @return      none
    251           **************************************************************************************************
    252           */

   \                                 In section .text, align 2, keep-with-next
    253          MAC_INTERNAL_API void macRxOn(void)
    254          {
   \                     macRxOn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    255            halIntState_t  s;
    256          
    257            HAL_ENTER_CRITICAL_SECTION(s);
   \   00000002   0x.... 0x....      BL       IntMasterDisable
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0xF090 0x0001      EORS     R0,R0,#0x1
    258            if (!macRxOnFlag)
   \   0000000E   0x....             LDR.N    R1,??DataTable8_1
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD105             BNE.N    ??macRxOn_0
    259            {
    260              macRxOnFlag = 1;
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x....             LDR.N    R2,??DataTable8_1
   \   0000001A   0x7011             STRB     R1,[R2, #+0]
    261              MAC_RADIO_RX_ON();
   \   0000001C   0x21E3             MOVS     R1,#+227
   \   0000001E   0x....             LDR.N    R2,??DataTable8_2  ;; 0x40088838
   \   00000020   0x6011             STR      R1,[R2, #+0]
    262              MAC_DEBUG_TURN_ON_RX_LED();
    263            }
    264            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRxOn_0: (+1)
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ.N    ??macRxOn_1
   \   00000028   0x.... 0x....      BL       IntMasterEnable
    265          }
   \                     ??macRxOn_1: (+1)
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    266          
    267          
    268          /**************************************************************************************************
    269           * @fn          macRxOff
    270           *
    271           * @brief       Turn off the receiver if it's not already off.
    272           *
    273           * @param       none
    274           *
    275           * @return      none
    276           **************************************************************************************************
    277           */

   \                                 In section .text, align 2, keep-with-next
    278          MAC_INTERNAL_API void macRxOff(void)
    279          {
   \                     macRxOff: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    280            halIntState_t  s;
    281          
    282            HAL_ENTER_CRITICAL_SECTION(s);
   \   00000002   0x.... 0x....      BL       IntMasterDisable
   \   00000006   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000A   0xF090 0x0401      EORS     R4,R0,#0x1
    283            if (macRxOnFlag)
   \   0000000E   0x....             LDR.N    R0,??DataTable8_1
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD01D             BEQ.N    ??macRxOff_0
    284            {
    285              macRxOnFlag = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable8_1
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    286              MAC_RADIO_RXTX_OFF();
   \   0000001C   0x20EF             MOVS     R0,#+239
   \   0000001E   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40088838
   \   00000020   0x6008             STR      R0,[R1, #+0]
    287              MAC_DEBUG_TURN_OFF_RX_LED();
    288              
    289              /* just in case a receive was about to start, flush the receive FIFO */
    290              MAC_RADIO_FLUSH_RX_FIFO();
   \   00000022   0x20ED             MOVS     R0,#+237
   \   00000024   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40088838
   \   00000026   0x6008             STR      R0,[R1, #+0]
   \   00000028   0x20ED             MOVS     R0,#+237
   \   0000002A   0x....             LDR.N    R1,??DataTable8_2  ;; 0x40088838
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    291          
    292              /* clear any receive interrupt that happened to squeak through */
    293              MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   0000002E   0x.... 0x....      BL       IntMasterDisable
   \   00000032   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000036   0xF090 0x0501      EORS     R5,R0,#0x1
   \   0000003A   0x202A             MOVS     R0,#+42
   \   0000003C   0x.... 0x....      BL       IntPendClear
   \   00000040   0xF07F 0x0004      MVNS     R0,#+4
   \   00000044   0x....             LDR.N    R1,??DataTable8_6  ;; 0x40088834
   \   00000046   0x6008             STR      R0,[R1, #+0]
   \   00000048   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD001             BEQ.N    ??macRxOff_1
   \   0000004E   0x.... 0x....      BL       IntMasterEnable
    294          
    295            }
    296            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRxOff_1: (+1)
   \                     ??macRxOff_0: (+1)
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x2C00             CMP      R4,#+0
   \   00000056   0xD001             BEQ.N    ??macRxOff_2
   \   00000058   0x.... 0x....      BL       IntMasterEnable
    297          }
   \                     ??macRxOff_2: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     macRxEnableFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     macRxOnFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x40088838         DC32     0x40088838

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     macRxActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     macRxOutgoingAckFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     macTxActive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40088834         DC32     0x40088834
    298          
    299          
    300          /**************************************************************************************************
    301          */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   macRxDisable
         8   -> IntMasterDisable
         8   -> IntMasterEnable
         8   -> halAssertHandler
         8   -> macRxOffRequest
      16   macRxEnable
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> halAssertHandler
        16   -> macRxOn
       8   macRxHardDisable
         8   -> IntMasterDisable
         8   -> IntMasterEnable
         8   -> macRxHaltCleanup
      16   macRxOff
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> IntPendClear
       8   macRxOffRequest
         8   -> IntMasterDisable
         8   -> IntMasterEnable
         8   -> macRxOff
       8   macRxOn
         8   -> IntMasterDisable
         8   -> IntMasterEnable
       0   macRxOnOffInit
       8   macRxOnRequest
         8   -> IntMasterDisable
         8   -> IntMasterEnable
         8   -> macRxOn
       8   macRxSoftEnable
         8   -> IntMasterDisable
         8   -> IntMasterEnable
         8   -> halAssertHandler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
      56  macRxDisable
      52  macRxEnable
       1  macRxEnableFlags
      60  macRxHardDisable
      94  macRxOff
      62  macRxOffRequest
      46  macRxOn
       1  macRxOnFlag
      14  macRxOnOffInit
      38  macRxOnRequest
      48  macRxSoftEnable

 
   2 bytes in section .bss
 498 bytes in section .text
 
 498 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
