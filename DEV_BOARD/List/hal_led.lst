###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        05/Jul/2015  15:33:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\hal_led.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\hal_led.c" -D FEATURE_RESET_MACRO
#        -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D ZTOOL_P1 -D xMT_TASK -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D LCD_SUPPORTED=TRUE -D
#        CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\List\hal_led.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\DEV_BOARD\Obj\hal_led.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2013-05-17 11:25:11 -0700 (Fri, 17 May 2013) $
      4            Revision:       $Revision: 34355 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          /***************************************************************************************************
     78           *                                           GLOBAL VARIABLES
     79           ***************************************************************************************************/
     80          
     81          

   \                                 In section .bss, align 1
     82          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   00000000                      DS8 1
     83          
     84          #if HAL_LED == TRUE

   \                                 In section .bss, align 1
     85          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     86          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   00000000                      DS8 1
     87                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     88          #endif
     89          
     90          #ifdef BLINK_LEDS

   \                                 In section .bss, align 4
     91            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   00000000                      DS8 52
     92          #endif
     93          
     94          /***************************************************************************************************
     95           *                                            LOCAL FUNCTION
     96           ***************************************************************************************************/
     97          #if (HAL_LED == TRUE)
     98          void HalLedUpdate (void);
     99          void HalLedOnOff (uint8 leds, uint8 mode);
    100          #endif /* HAL_LED */
    101          
    102          /***************************************************************************************************
    103           *                                            FUNCTIONS - API
    104           ***************************************************************************************************/
    105          
    106          /***************************************************************************************************
    107           * @fn      HalLedInit
    108           *
    109           * @brief   Initialize LED Service
    110           *
    111           * @param   init - pointer to void that contains the initialized value
    112           *
    113           * @return  None
    114           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    115          void HalLedInit (void)
    116          {
   \                     HalLedInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    117          #if (HAL_LED == TRUE)
    118            /* Initialize all LEDs to OFF */
    119            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x200F             MOVS     R0,#+15
   \   00000006   0x.... 0x....      BL       HalLedSet
    120          #endif /* HAL_LED */
    121          #ifdef BLINK_LEDS
    122            /* Initialize sleepActive to FALSE */
    123            HalLedStatusControl.sleepActive = FALSE;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000010   0xF881 0x0030      STRB     R0,[R1, #+48]
    124          #endif
    125          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    126          
    127          /***************************************************************************************************
    128           * @fn      HalLedSet
    129           *
    130           * @brief   Tun ON/OFF/TOGGLE given LEDs
    131           *
    132           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    133           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    134           * @return  None
    135           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    136          uint8 HalLedSet (uint8 leds, uint8 mode)
    137          {
   \                     HalLedSet: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    138          
    139          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    140            uint8 led;
    141            HalLedControl_t *sts;
    142          
    143            switch (mode)
   \   00000006   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD01A             BEQ.N    ??HalLedSet_0
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD018             BEQ.N    ??HalLedSet_0
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD004             BEQ.N    ??HalLedSet_1
   \   00000016   0x2804             CMP      R0,#+4
   \   00000018   0xD00B             BEQ.N    ??HalLedSet_2
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xD012             BEQ.N    ??HalLedSet_0
   \   0000001E   0xE030             B.N      ??HalLedSet_3
    144            {
    145              case HAL_LED_MODE_BLINK:
    146                /* Default blink, 1 time, D% duty cycle */
    147                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1: (+1)
   \   00000020   0xF44F 0x737A      MOV      R3,#+1000
   \   00000024   0x2205             MOVS     R2,#+5
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       HalLedBlink
    148                break;
   \   00000030   0xE027             B.N      ??HalLedSet_4
    149          
    150              case HAL_LED_MODE_FLASH:
    151                /* Default flash, N times, D% duty cycle */
    152                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_2: (+1)
   \   00000032   0xF44F 0x737A      MOV      R3,#+1000
   \   00000036   0x2205             MOVS     R2,#+5
   \   00000038   0x2132             MOVS     R1,#+50
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       HalLedBlink
    153                break;
   \   00000042   0xE01E             B.N      ??HalLedSet_4
    154          
    155              case HAL_LED_MODE_ON:
    156              case HAL_LED_MODE_OFF:
    157              case HAL_LED_MODE_TOGGLE:
    158          
    159                led = HAL_LED_1;
   \                     ??HalLedSet_0: (+1)
   \   00000044   0x2601             MOVS     R6,#+1
    160                leds &= HAL_LED_ALL;
   \   00000046   0xF014 0x040F      ANDS     R4,R4,#0xF
    161                sts = HalLedStatusControl.HalLedControlTable;
   \   0000004A   0x.... 0x....      LDR.W    R7,??DataTable7
   \   0000004E   0xE00B             B.N      ??HalLedSet_5
    162          
    163                while (leds)
    164                {
    165                  if (leds & led)
    166                  {
    167                    if (mode != HAL_LED_MODE_TOGGLE)
    168                    {
    169                      sts->mode = mode;  /* ON or OFF */
    170                    }
    171                    else
    172                    {
    173                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
   \                     ??HalLedSet_6: (+1)
   \   00000050   0x7838             LDRB     R0,[R7, #+0]
   \   00000052   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000056   0x7038             STRB     R0,[R7, #+0]
    174                    }
    175                    HalLedOnOff (led, sts->mode);
   \                     ??HalLedSet_7: (+1)
   \   00000058   0x7839             LDRB     R1,[R7, #+0]
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       HalLedOnOff
    176                    leds ^= led;
   \   00000062   0x4074             EORS     R4,R6,R4
    177                  }
    178                  led <<= 1;
   \                     ??HalLedSet_8: (+1)
   \   00000064   0x0076             LSLS     R6,R6,#+1
    179                  sts++;
   \   00000066   0x370C             ADDS     R7,R7,#+12
   \                     ??HalLedSet_5: (+1)
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x2C00             CMP      R4,#+0
   \   0000006C   0xD008             BEQ.N    ??HalLedSet_9
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000072   0x4230             TST      R0,R6
   \   00000074   0xD0F6             BEQ.N    ??HalLedSet_8
   \   00000076   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000078   0x2D08             CMP      R5,#+8
   \   0000007A   0xD0E9             BEQ.N    ??HalLedSet_6
   \   0000007C   0x703D             STRB     R5,[R7, #+0]
   \   0000007E   0xE7EB             B.N      ??HalLedSet_7
    180                }
    181                break;
   \                     ??HalLedSet_9: (+1)
   \   00000080   0xE7FF             B.N      ??HalLedSet_4
    182          
    183              default:
    184                break;
    185            }
    186          
    187          #elif (HAL_LED == TRUE)
    188            LedOnOff(leds, mode);
    189          #else
    190            // HAL LED is disabled, suppress unused argument warnings
    191            (void) leds;
    192            (void) mode;
    193          #endif /* BLINK_LEDS && HAL_LED   */
    194          
    195            return ( HalLedState );
   \                     ??HalLedSet_3: (+1)
   \                     ??HalLedSet_4: (+1)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    196          
    197          }
    198          
    199          /***************************************************************************************************
    200           * @fn      HalLedBlink
    201           *
    202           * @brief   Blink the leds
    203           *
    204           * @param   leds       - bit mask value of leds to be blinked
    205           *          numBlinks  - number of blinks
    206           *          percent    - the percentage in each period where the led
    207           *                       will be on
    208           *          period     - length of each cycle in milliseconds
    209           *
    210           * @return  None
    211           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    212          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
    213          {
   \                     HalLedBlink: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    214          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    215            uint8 led;
    216            HalLedControl_t *sts;
    217          
    218            if (leds && percent && period)
   \   0000000C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000010   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000014   0xD055             BEQ.N    ??HalLedBlink_0
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD052             BEQ.N    ??HalLedBlink_0
   \   0000001C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000001E   0x2E00             CMP      R6,#+0
   \   00000020   0xD04F             BEQ.N    ??HalLedBlink_0
    219            {
    220              if (percent < 100)
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2D64             CMP      R5,#+100
   \   00000026   0xDA46             BGE.N    ??HalLedBlink_1
    221              {
    222                led = HAL_LED_1;
   \   00000028   0x2701             MOVS     R7,#+1
    223                leds &= HAL_LED_ALL;
   \   0000002A   0xF018 0x080F      ANDS     R8,R8,#0xF
    224                sts = HalLedStatusControl.HalLedControlTable;
   \   0000002E   0x.... 0x....      LDR.W    R9,??DataTable7
   \   00000032   0xE030             B.N      ??HalLedBlink_2
    225          
    226                while (leds)
    227                {
    228                  if (leds & led)
   \                     ??HalLedBlink_3: (+1)
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4238             TST      R0,R7
   \   0000003A   0xD029             BEQ.N    ??HalLedBlink_4
    229                  {
    230                    /* Store the current state of the led before going to blinking if not already blinking */
    231                    if(sts->mode < HAL_LED_MODE_BLINK )
   \   0000003C   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000040   0x2802             CMP      R0,#+2
   \   00000042   0xDA07             BGE.N    ??HalLedBlink_5
    232                    	preBlinkState |= (led & HalLedState);
   \   00000044   0x....             LDR.N    R0,??DataTable7_2
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x....             LDR.N    R1,??DataTable7_1
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0x4039             ANDS     R1,R1,R7
   \   0000004E   0x4308             ORRS     R0,R1,R0
   \   00000050   0x....             LDR.N    R1,??DataTable7_2
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    233          
    234                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \                     ??HalLedBlink_5: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF889 0x0000      STRB     R0,[R9, #+0]
    235                    sts->time  = period;                              /* Time for one on/off cycle */
   \   0000005A   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    236                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   0000005E   0xF889 0x5002      STRB     R5,[R9, #+2]
    237                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   00000062   0xF889 0x4001      STRB     R4,[R9, #+1]
    238                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C00             CMP      R4,#+0
   \   0000006A   0xD105             BNE.N    ??HalLedBlink_6
   \   0000006C   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000070   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000074   0xF889 0x0000      STRB     R0,[R9, #+0]
    239                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6: (+1)
   \   00000078   0x.... 0x....      BL       osal_GetSystemClock
   \   0000007C   0xF8C9 0x0008      STR      R0,[R9, #+8]
    240                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   00000080   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000084   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000088   0xF889 0x0000      STRB     R0,[R9, #+0]
    241                    leds ^= led;
   \   0000008C   0xEA97 0x0808      EORS     R8,R7,R8
    242                  }
    243                  led <<= 1;
   \                     ??HalLedBlink_4: (+1)
   \   00000090   0x007F             LSLS     R7,R7,#+1
    244                  sts++;
   \   00000092   0xF119 0x090C      ADDS     R9,R9,#+12
    245                }
   \                     ??HalLedBlink_2: (+1)
   \   00000096   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000009E   0xD1C9             BNE.N    ??HalLedBlink_3
    246                // Cancel any overlapping timer for blink events
    247                osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   000000A0   0x2120             MOVS     R1,#+32
   \   000000A2   0x....             LDR.N    R0,??DataTable7_3
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x.... 0x....      BL       osal_stop_timerEx
    248                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   000000AA   0x2120             MOVS     R1,#+32
   \   000000AC   0x....             LDR.N    R0,??DataTable7_3
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x.... 0x....      BL       osal_set_event
   \   000000B4   0xE00A             B.N      ??HalLedBlink_7
    249              }
    250              else
    251              {
    252                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_1: (+1)
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0x4640             MOV      R0,R8
   \   000000BA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BC   0x.... 0x....      BL       HalLedSet
   \   000000C0   0xE004             B.N      ??HalLedBlink_7
    253              }
    254            }
    255            else
    256            {
    257              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0: (+1)
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C8   0x.... 0x....      BL       HalLedSet
    258            }
    259          #elif (HAL_LED == TRUE)
    260            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    261            HalLedOnOff (leds, percent);                              /* Toggle */
    262          #else
    263            // HAL LED is disabled, suppress unused argument warnings
    264            (void) leds;
    265            (void) numBlinks;
    266            (void) percent;
    267            (void) period;
    268          #endif /* BLINK_LEDS && HAL_LED */
    269          }
   \                     ??HalLedBlink_7: (+1)
   \   000000CC   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    270          
    271          #if (HAL_LED == TRUE)
    272          /***************************************************************************************************
    273           * @fn      HalLedUpdate
    274           *
    275           * @brief   Update leds to work with blink
    276           *
    277           * @param   none
    278           *
    279           * @return  none
    280           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    281          void HalLedUpdate (void)
    282          {
   \                     HalLedUpdate: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    283            uint8 led;
    284            uint8 pct;
    285            uint8 leds;
    286            HalLedControl_t *sts;
    287            uint32 time;
    288            uint16 next;
    289            uint16 wait;
    290          
    291            next = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    292            led  = HAL_LED_1;
   \   00000006   0x2601             MOVS     R6,#+1
    293            leds = HAL_LED_ALL;
   \   00000008   0x270F             MOVS     R7,#+15
    294            sts = HalLedStatusControl.HalLedControlTable;
   \   0000000A   0x.... 0x....      LDR.W    R8,??DataTable7
    295          
    296            /* Check if sleep is active or not */
    297            if (!HalLedStatusControl.sleepActive)
   \   0000000E   0x....             LDR.N    R0,??DataTable7
   \   00000010   0xF890 0x0030      LDRB     R0,[R0, #+48]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xF040 0x8095      BNE.W    ??HalLedUpdate_0
   \   0000001A   0xE015             B.N      ??HalLedUpdate_1
    298            {
    299              while (leds)
    300              {
    301                if (leds & led)
    302                {
    303                  if (sts->mode & HAL_LED_MODE_BLINK)
    304                  {
    305                    time = osal_GetSystemClock();
    306                    if (time >= sts->next)
    307                    {
    308                      if (sts->mode & HAL_LED_MODE_ON)
    309                      {
    310                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
    311                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
    312                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
    313          
    314                        if (!(sts->mode & HAL_LED_MODE_FLASH))
    315                        {
    316                          sts->todo--;                        /* Not continuous, reduce count */
    317                        }
    318                      }            
    319                      else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
    320                      {
    321                            sts->mode ^= HAL_LED_MODE_BLINK;  /* No more blinks */
    322                      }            
    323                      else
    324                      {
    325                        pct = sts->onPct;                     /* Percentage of cycle for on */
    326                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
    327                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
    328                      }
    329                      if (sts->mode & HAL_LED_MODE_BLINK)
    330                      {
    331                        wait = (((uint32)pct * (uint32)sts->time) / 100);
    332                        sts->next = time + wait;
    333                      }
    334                      else
    335                      {
    336                        /* no more blink, no more wait */
    337                        wait = 0;
    338                        /* After blinking, set the LED back to the state before it blinks */
    339                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
    340                        /* Clear the saved bit */
    341                        preBlinkState &= (led ^ 0xFF);
    342                      }
    343                    }
    344                    else
    345                    {
    346                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_2: (+1)
   \   0000001C   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000020   0xEBB0 0x0A09      SUBS     R10,R0,R9
    347                    }
    348          
    349                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_3: (+1)
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD009             BEQ.N    ??HalLedUpdate_4
   \   0000002A   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000002E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000032   0xD005             BEQ.N    ??HalLedUpdate_5
   \   00000034   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000038   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003A   0x45AA             CMP      R10,R5
   \   0000003C   0xD200             BCS.N    ??HalLedUpdate_5
    350                    {
    351                      next = wait;
   \                     ??HalLedUpdate_4: (+1)
   \   0000003E   0x4655             MOV      R5,R10
    352                    }
    353                  }
    354                  leds ^= led;
   \                     ??HalLedUpdate_5: (+1)
   \   00000040   0x4077             EORS     R7,R6,R7
    355                }
    356                led <<= 1;
   \                     ??HalLedUpdate_6: (+1)
   \   00000042   0x0076             LSLS     R6,R6,#+1
    357                sts++;
   \   00000044   0xF118 0x080C      ADDS     R8,R8,#+12
   \                     ??HalLedUpdate_1: (+1)
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x2F00             CMP      R7,#+0
   \   0000004C   0xD070             BEQ.N    ??HalLedUpdate_7
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000052   0x4230             TST      R0,R6
   \   00000054   0xD0F5             BEQ.N    ??HalLedUpdate_6
   \   00000056   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   0000005A   0x0780             LSLS     R0,R0,#+30
   \   0000005C   0xD5F0             BPL.N    ??HalLedUpdate_5
   \   0000005E   0x.... 0x....      BL       osal_GetSystemClock
   \   00000062   0x4681             MOV      R9,R0
   \   00000064   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000068   0x4581             CMP      R9,R0
   \   0000006A   0xD3D7             BCC.N    ??HalLedUpdate_2
   \   0000006C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000070   0x07C0             LSLS     R0,R0,#+31
   \   00000072   0xD518             BPL.N    ??HalLedUpdate_8
   \   00000074   0xF898 0x0002      LDRB     R0,[R8, #+2]
   \   00000078   0xF1D0 0x0464      RSBS     R4,R0,#+100
   \   0000007C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000080   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \   00000084   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0x.... 0x....      BL       HalLedOnOff
   \   00000092   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000096   0x0740             LSLS     R0,R0,#+29
   \   00000098   0xD421             BMI.N    ??HalLedUpdate_9
   \   0000009A   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   0000009E   0x1E40             SUBS     R0,R0,#+1
   \   000000A0   0xF888 0x0001      STRB     R0,[R8, #+1]
   \   000000A4   0xE01B             B.N      ??HalLedUpdate_9
   \                     ??HalLedUpdate_8: (+1)
   \   000000A6   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD10A             BNE.N    ??HalLedUpdate_10
   \   000000AE   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000B2   0x0740             LSLS     R0,R0,#+29
   \   000000B4   0xD406             BMI.N    ??HalLedUpdate_10
   \   000000B6   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000BA   0xF090 0x0002      EORS     R0,R0,#0x2
   \   000000BE   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000C2   0xE00C             B.N      ??HalLedUpdate_9
   \                     ??HalLedUpdate_10: (+1)
   \   000000C4   0xF898 0x4002      LDRB     R4,[R8, #+2]
   \   000000C8   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000CC   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000D0   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000D4   0x2101             MOVS     R1,#+1
   \   000000D6   0x0030             MOVS     R0,R6
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x.... 0x....      BL       HalLedOnOff
   \                     ??HalLedUpdate_9: (+1)
   \   000000DE   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000000E2   0x0780             LSLS     R0,R0,#+30
   \   000000E4   0xD50E             BPL.N    ??HalLedUpdate_11
   \   000000E6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E8   0xF8B8 0x0004      LDRH     R0,[R8, #+4]
   \   000000EC   0xFB00 0xF004      MUL      R0,R0,R4
   \   000000F0   0x2164             MOVS     R1,#+100
   \   000000F2   0xFBB0 0xFAF1      UDIV     R10,R0,R1
   \   000000F6   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000FA   0xEB1A 0x0009      ADDS     R0,R10,R9
   \   000000FE   0xF8C8 0x0008      STR      R0,[R8, #+8]
   \   00000102   0xE78F             B.N      ??HalLedUpdate_3
   \                     ??HalLedUpdate_11: (+1)
   \   00000104   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000108   0x....             LDR.N    R0,??DataTable7_2
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x4230             TST      R0,R6
   \   0000010E   0xD001             BEQ.N    ??HalLedUpdate_12
   \   00000110   0x2101             MOVS     R1,#+1
   \   00000112   0xE000             B.N      ??HalLedUpdate_13
   \                     ??HalLedUpdate_12: (+1)
   \   00000114   0x2100             MOVS     R1,#+0
   \                     ??HalLedUpdate_13: (+1)
   \   00000116   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000118   0x0030             MOVS     R0,R6
   \   0000011A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011C   0x.... 0x....      BL       HalLedSet
   \   00000120   0x....             LDR.N    R0,??DataTable7_2
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0xF096 0x01FF      EORS     R1,R6,#0xFF
   \   00000128   0x4008             ANDS     R0,R1,R0
   \   0000012A   0x....             LDR.N    R1,??DataTable7_2
   \   0000012C   0x7008             STRB     R0,[R1, #+0]
   \   0000012E   0xE779             B.N      ??HalLedUpdate_3
    358              }
    359          
    360              if (next)
   \                     ??HalLedUpdate_7: (+1)
   \   00000130   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000132   0x2D00             CMP      R5,#+0
   \   00000134   0xD006             BEQ.N    ??HalLedUpdate_0
    361              {
    362                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   00000136   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000138   0x002A             MOVS     R2,R5
   \   0000013A   0x2120             MOVS     R1,#+32
   \   0000013C   0x....             LDR.N    R0,??DataTable7_3
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0x.... 0x....      BL       osal_start_timerEx
    363              }
    364            }
    365          }
   \                     ??HalLedUpdate_0: (+1)
   \   00000144   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    366          
    367          /***************************************************************************************************
    368           * @fn      HalLedOnOff
    369           *
    370           * @brief   Turns specified LED ON or OFF
    371           *
    372           * @param   leds - LED bit mask
    373           *          mode - LED_ON,LED_OFF,
    374           *
    375           * @return  none
    376           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    377          void HalLedOnOff (uint8 leds, uint8 mode)
    378          {
   \                     HalLedOnOff: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    379            if (leds & HAL_LED_1)
   \   00000006   0x07E0             LSLS     R0,R4,#+31
   \   00000008   0xD50D             BPL.N    ??HalLedOnOff_0
    380            {
    381              if (mode == HAL_LED_MODE_ON)
   \   0000000A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000C   0x2D01             CMP      R5,#+1
   \   0000000E   0xD105             BNE.N    ??HalLedOnOff_1
    382              {
    383                HAL_TURN_ON_LED1();
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000016   0x.... 0x....      BL       GPIOPinWrite
   \   0000001A   0xE004             B.N      ??HalLedOnOff_0
    384              }
    385              else
    386              {
    387                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1: (+1)
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000022   0x.... 0x....      BL       GPIOPinWrite
    388              }
    389            }
    390          
    391            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0: (+1)
   \   00000026   0x07A0             LSLS     R0,R4,#+30
   \   00000028   0xD50D             BPL.N    ??HalLedOnOff_2
    392            {
    393              if (mode == HAL_LED_MODE_ON)
   \   0000002A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002C   0x2D01             CMP      R5,#+1
   \   0000002E   0xD105             BNE.N    ??HalLedOnOff_3
    394              {
    395                HAL_TURN_ON_LED2();
   \   00000030   0x2202             MOVS     R2,#+2
   \   00000032   0x2102             MOVS     R1,#+2
   \   00000034   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000036   0x.... 0x....      BL       GPIOPinWrite
   \   0000003A   0xE004             B.N      ??HalLedOnOff_2
    396              }
    397              else
    398              {
    399                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3: (+1)
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2102             MOVS     R1,#+2
   \   00000040   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000042   0x.... 0x....      BL       GPIOPinWrite
    400              }
    401            }
    402          
    403            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2: (+1)
   \   00000046   0x0760             LSLS     R0,R4,#+29
   \   00000048   0xD50D             BPL.N    ??HalLedOnOff_4
    404            {
    405              if (mode == HAL_LED_MODE_ON)
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x2D01             CMP      R5,#+1
   \   0000004E   0xD105             BNE.N    ??HalLedOnOff_5
    406              {
    407                HAL_TURN_ON_LED3();
   \   00000050   0x2204             MOVS     R2,#+4
   \   00000052   0x2104             MOVS     R1,#+4
   \   00000054   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000056   0x.... 0x....      BL       GPIOPinWrite
   \   0000005A   0xE004             B.N      ??HalLedOnOff_4
    408              }
    409              else
    410              {
    411                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5: (+1)
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0x2104             MOVS     R1,#+4
   \   00000060   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000062   0x.... 0x....      BL       GPIOPinWrite
    412              }
    413            }
    414          
    415            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4: (+1)
   \   00000066   0x0720             LSLS     R0,R4,#+28
   \   00000068   0xD50D             BPL.N    ??HalLedOnOff_6
    416            {
    417              if (mode == HAL_LED_MODE_ON)
   \   0000006A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000006C   0x2D01             CMP      R5,#+1
   \   0000006E   0xD105             BNE.N    ??HalLedOnOff_7
    418              {
    419                HAL_TURN_ON_LED4();
   \   00000070   0x2208             MOVS     R2,#+8
   \   00000072   0x2108             MOVS     R1,#+8
   \   00000074   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000076   0x.... 0x....      BL       GPIOPinWrite
   \   0000007A   0xE004             B.N      ??HalLedOnOff_6
    420              }
    421              else
    422              {
    423                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7: (+1)
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x2108             MOVS     R1,#+8
   \   00000080   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000082   0x.... 0x....      BL       GPIOPinWrite
    424              }
    425            }
    426          
    427            /* Remember current state */
    428            if (mode)
   \                     ??HalLedOnOff_6: (+1)
   \   00000086   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000088   0x2D00             CMP      R5,#+0
   \   0000008A   0xD005             BEQ.N    ??HalLedOnOff_8
    429            {
    430              HalLedState |= leds;
   \   0000008C   0x....             LDR.N    R0,??DataTable7_1
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x4320             ORRS     R0,R4,R0
   \   00000092   0x....             LDR.N    R1,??DataTable7_1
   \   00000094   0x7008             STRB     R0,[R1, #+0]
   \   00000096   0xE006             B.N      ??HalLedOnOff_9
    431            }
    432            else
    433            {
    434              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_8: (+1)
   \   00000098   0x....             LDR.N    R0,??DataTable7_1
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0xF094 0x01FF      EORS     R1,R4,#0xFF
   \   000000A0   0x4008             ANDS     R0,R1,R0
   \   000000A2   0x....             LDR.N    R1,??DataTable7_1
   \   000000A4   0x7008             STRB     R0,[R1, #+0]
    435            }
    436          }
   \                     ??HalLedOnOff_9: (+1)
   \   000000A6   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    437          #endif /* HAL_LED */
    438          
    439          /***************************************************************************************************
    440           * @fn      HalGetLedState
    441           *
    442           * @brief   Dim LED2 - Dim (set level) of LED2
    443           *
    444           * @param   none
    445           *
    446           * @return  led state
    447           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    448          uint8 HalLedGetState ()
    449          {
    450          #if (HAL_LED == TRUE)
    451            return HalLedState;
   \                     HalLedGetState: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7_1
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    452          #else
    453            return 0;
    454          #endif
    455          }
    456          
    457          /***************************************************************************************************
    458           * @fn      HalLedEnterSleep
    459           *
    460           * @brief   Store current LEDs state before sleep
    461           *
    462           * @param   none
    463           *
    464           * @return  none
    465           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    466          void HalLedEnterSleep( void )
    467          {
   \                     HalLedEnterSleep: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    468          #ifdef BLINK_LEDS
    469            /* Sleep ON */
    470            HalLedStatusControl.sleepActive = TRUE;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x....             LDR.N    R1,??DataTable7
   \   00000006   0xF881 0x0030      STRB     R0,[R1, #+48]
    471          #endif /* BLINK_LEDS */
    472          
    473          #if (HAL_LED == TRUE)
    474            /* Save the state of each led */
    475            HalSleepLedState = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable7_5
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    476            HalSleepLedState |= HAL_STATE_LED1();
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000014   0x.... 0x....      BL       GPIOPinRead
   \   00000018   0x....             LDR.N    R1,??DataTable7_5
   \   0000001A   0x7809             LDRB     R1,[R1, #+0]
   \   0000001C   0x4308             ORRS     R0,R0,R1
   \   0000001E   0x....             LDR.N    R1,??DataTable7_5
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    477            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00000022   0x2102             MOVS     R1,#+2
   \   00000024   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   00000026   0x.... 0x....      BL       GPIOPinRead
   \   0000002A   0x....             LDR.N    R1,??DataTable7_5
   \   0000002C   0x7809             LDRB     R1,[R1, #+0]
   \   0000002E   0xEA51 0x0040      ORRS     R0,R1,R0, LSL #+1
   \   00000032   0x....             LDR.N    R1,??DataTable7_5
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    478            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   00000036   0x2104             MOVS     R1,#+4
   \   00000038   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   0000003A   0x.... 0x....      BL       GPIOPinRead
   \   0000003E   0x....             LDR.N    R1,??DataTable7_5
   \   00000040   0x7809             LDRB     R1,[R1, #+0]
   \   00000042   0xEA51 0x0080      ORRS     R0,R1,R0, LSL #+2
   \   00000046   0x....             LDR.N    R1,??DataTable7_5
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    479            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   0000004A   0x2108             MOVS     R1,#+8
   \   0000004C   0x....             LDR.N    R0,??DataTable7_4  ;; 0x400db000
   \   0000004E   0x.... 0x....      BL       GPIOPinRead
   \   00000052   0x....             LDR.N    R1,??DataTable7_5
   \   00000054   0x7809             LDRB     R1,[R1, #+0]
   \   00000056   0xEA51 0x00C0      ORRS     R0,R1,R0, LSL #+3
   \   0000005A   0x....             LDR.N    R1,??DataTable7_5
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    480          
    481            /* TURN OFF all LEDs to save power */
    482            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x200F             MOVS     R0,#+15
   \   00000062   0x.... 0x....      BL       HalLedOnOff
    483          #endif /* HAL_LED */
    484          
    485          }
   \   00000066   0xBD01             POP      {R0,PC}          ;; return
    486          
    487          /***************************************************************************************************
    488           * @fn      HalLedExitSleep
    489           *
    490           * @brief   Restore current LEDs state after sleep
    491           *
    492           * @param   none
    493           *
    494           * @return  none
    495           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    496          void HalLedExitSleep( void )
    497          {
   \                     HalLedExitSleep: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    498          #if (HAL_LED == TRUE)
    499            /* Load back the saved state */
    500            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable7_5
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       HalLedOnOff
    501          
    502            /* Restart - This takes care BLINKING LEDS */
    503            HalLedUpdate();
   \   0000000C   0x.... 0x....      BL       HalLedUpdate
    504          #endif /* HAL_LED */
    505          
    506          #ifdef BLINK_LEDS
    507            /* Sleep OFF */
    508            HalLedStatusControl.sleepActive = FALSE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable7
   \   00000014   0xF881 0x0030      STRB     R0,[R1, #+48]
    509          #endif /* BLINK_LEDS */
    510          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     HalLedStatusControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     HalLedState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     preBlinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     Hal_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x400DB000         DC32     0x400db000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     HalSleepLedState
    511          
    512          /***************************************************************************************************
    513          ***************************************************************************************************/
    514          
    515          
    516          
    517          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   HalLedBlink
        32   -> HalLedSet
        32   -> osal_GetSystemClock
        32   -> osal_set_event
        32   -> osal_stop_timerEx
       8   HalLedEnterSleep
         8   -> GPIOPinRead
         8   -> HalLedOnOff
       8   HalLedExitSleep
         8   -> HalLedOnOff
         8   -> HalLedUpdate
       0   HalLedGetState
       8   HalLedInit
         8   -> HalLedSet
      16   HalLedOnOff
        16   -> GPIOPinWrite
      24   HalLedSet
        24   -> HalLedBlink
        24   -> HalLedOnOff
      32   HalLedUpdate
        32   -> HalLedOnOff
        32   -> HalLedSet
        32   -> osal_GetSystemClock
        32   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
     208  HalLedBlink
     104  HalLedEnterSleep
      26  HalLedExitSleep
       6  HalLedGetState
      22  HalLedInit
     168  HalLedOnOff
     138  HalLedSet
       1  HalLedState
      52  HalLedStatusControl
     328  HalLedUpdate
       1  HalSleepLedState
       1  preBlinkState

 
    55 bytes in section .bss
 1 024 bytes in section .text
 
 1 024 bytes of CODE memory
    55 bytes of DATA memory

Errors: none
Warnings: none
