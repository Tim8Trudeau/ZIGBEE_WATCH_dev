###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        25/Apr/2015  18:56:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Clock.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Clock.c" -D FEATURE_RESET_MACRO -D
#        ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D ZTOOL_P1 -D xMT_TASK -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D LCD_SUPPORTED=TRUE -D
#        CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\OSAL_Clock.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\OSAL_Clock.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\osal\common\OSAL_Clock.c
      1          /******************************************************************************
      2            Filename:       OSAL_Clock.c
      3            Revised:        $Date: 2012-02-26 13:15:18 -0800 (Sun, 26 Feb 2012) $
      4            Revision:       $Revision: 29523 $
      5          
      6            Description:    OSAL Clock definition and manipulation functions.
      7          
      8            Copyright 2008-2012 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          ******************************************************************************/
     38          
     39          /*********************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "comdef.h"
     44          #include "hal_board.h"
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Clock.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          #define	YearLength(yr)	((uint16)(IsLeapYear(yr) ? 366 : 365))
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          #define	BEGYEAR  2000     //  UTC started at 00:00:00 January 1, 2000
     60          
     61          #define	DAY      86400UL  // 24 hours * 60 minutes * 60 seconds
     62          
     63          /* Check Below for an explanation */
     64          #define COUNTER_TICK320US 204775UL 
     65          
     66          /* converted COUNTER_TICK320US from 320us ticks to ms */
     67          #define COUNTER_ELAPSEDMS 65528UL   
     68          
     69          /* 
     70           * Each tick is 320us so a value greater than 3 implies 
     71           * that atleast one millisecond has elapsed 320us*4 > 1 ms 
     72           */
     73          #define TIMER_CLOCK_UPDATE 4 
     74                                            
     75          /*********************************************************************
     76           * TYPEDEFS
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL VARIABLES
     81           */
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          extern uint32 macMcuPrecisionCount(void);
     91          
     92          #if (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
     93          
     94            /*  This function is used to divide a 31 bit dividend by a 16 bit
     95             *  divisor and return a packed 16 bit quotient and 16 bit
     96             *  remainder.
     97             *
     98             *  Note: This routine takes ~25.6us @32MHz. With C overhead, the
     99             *        time is ~32us.
    100             *
    101             *  dividend - 31 bit dividend.
    102             *  divisor - 16 bit divisor.
    103             *
    104             *  return - MSW divisor; LSW quotient
    105             */
    106            extern __near_func uint32 osalMcuDivide31By16To16( uint32 dividend, uint16 divisor );
    107          
    108            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    109                                                                         \
    110              /* The 16 bit quotient is in MSW and */                    \
    111              /* the 16 bit remainder is in LSW. */                      \
    112              x = osalMcuDivide31By16To16( x, 25 );                      \
    113                                                                         \
    114              /* Add quotient to y */                                    \
    115              y += (x >> 16);                                            \
    116                                                                         \
    117              /* Copy remainder to z */                                  \
    118              z = (uint16)(x & 0x0FFFF);                                 \
    119            )
    120            
    121            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    122                                                                         \
    123              /* The 16 bit quotient is in MSW and */                    \
    124              /* the 16 bit remainder is in LSW. */                      \
    125              x = osalMcuDivide31By16To16( x, 1000 );                    \
    126                                                                         \
    127              /* Add quotient to y */                                    \
    128              y += (x >> 16);                                            \
    129                                                                         \
    130              /* Copy remainder to z */                                  \
    131              z = (uint16)(x & 0x0FFFF);                                 \
    132            )
    133          
    134          #else /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    135          
    136            #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \
    137              y += x / 25;                                               \
    138              z = x % 25;                                                \
    139            )
    140            
    141            #define CONVERT_MS_TO_S_ELAPSED_REMAINDER( x, y, z ) st(     \
    142              y += x / 1000;                                             \
    143              z = x % 1000;                                              \
    144            )
    145          #endif /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */

   \                                 In section .bss, align 4
    150          static uint32 previousMacTimerTick = 0;
   \                     previousMacTimerTick:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    151          static uint16 remUsTicks = 0;
   \                     remUsTicks:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
    152          static uint32 timeMSec = 0;
   \                     timeMSec:
   \   00000000                      DS8 4
    153          
    154          // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
    155          // 1st of January 2000 UTC

   \                                 In section .bss, align 4
    156          UTCTime OSAL_timeSeconds = 0;
   \                     OSAL_timeSeconds:
   \   00000000                      DS8 4
    157          
    158          /*********************************************************************
    159           * LOCAL FUNCTION PROTOTYPES
    160           */
    161          static uint8 monthLength( uint8 lpyr, uint8 mon );
    162          
    163          static void osalClockUpdate( uint32 elapsedMSec );
    164          
    165          /*********************************************************************
    166           * FUNCTIONS
    167           *********************************************************************/
    168          
    169          /*********************************************************************
    170           * @fn      osalTimeUpdate
    171           *
    172           * @brief   Uses the free running rollover count of the MAC backoff timer;
    173           *          this timer runs freely with a constant 320 usec interval.  The
    174           *          count of 320-usec ticks is converted to msecs and used to update
    175           *          the OSAL clock and Timers by invoking osalClockUpdate() and
    176           *          osalTimerUpdate().  This function is intended to be invoked
    177           *          from the background, not interrupt level.
    178           *
    179           * @param   None.
    180           *
    181           * @return  None.
    182           */

   \                                 In section .text, align 2, keep-with-next
    183          void osalTimeUpdate( void )
    184          {
   \                     osalTimeUpdate: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    185            halIntState_t intState;
    186            uint32 tmp;
    187            uint32 ticks320us;
    188            uint32 elapsedMSec = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    189          
    190            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000004   0x.... 0x....      BL       IntMasterDisable
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0xF090 0x0601      EORS     R6,R0,#0x1
    191            // Get the free-running count of 320us timer ticks
    192            tmp = macMcuPrecisionCount();
   \   00000010   0x.... 0x....      BL       macMcuPrecisionCount
   \   00000014   0x0005             MOVS     R5,R0
    193            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E00             CMP      R6,#+0
   \   0000001A   0xD001             BEQ.N    ??osalTimeUpdate_0
   \   0000001C   0x.... 0x....      BL       IntMasterEnable
    194            
    195            if ( tmp != previousMacTimerTick )
   \                     ??osalTimeUpdate_0: (+1)
   \   00000020   0x....             LDR.N    R0,??DataTable5
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x4285             CMP      R5,R0
   \   00000026   0xD024             BEQ.N    ??osalTimeUpdate_1
    196            {
    197              // Calculate the elapsed ticks of the free-running timer.
    198              ticks320us = (tmp - previousMacTimerTick) & 0xffffffffu;
   \   00000028   0x....             LDR.N    R0,??DataTable5
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x1A28             SUBS     R0,R5,R0
    199          
    200              if (ticks320us >= TIMER_CLOCK_UPDATE )
   \   0000002E   0x2804             CMP      R0,#+4
   \   00000030   0xD31F             BCC.N    ??osalTimeUpdate_1
    201              {
    202                // Store the MAC Timer tick count for the next time through this function.
    203                previousMacTimerTick = tmp;
   \   00000032   0x....             LDR.N    R1,??DataTable5
   \   00000034   0x600D             STR      R5,[R1, #+0]
   \   00000036   0xE004             B.N      ??osalTimeUpdate_2
    204                
    205                /*
    206                 * remUsTicks can have a maximum value of 24 (Since remusTicks got by mod 
    207                 * of 25). The value of COUNTER_TICK320US is a multiple of 25 and the 
    208                 * quotient of  CONVERT_320US_TO_MS_ELAPSED_REMAINDER() does not exceed 
    209                 * 0xFFFF or 16 bit.
    210                 */
    211                while(ticks320us >= COUNTER_TICK320US)
    212                {
    213                  ticks320us  -= COUNTER_TICK320US;
   \                     ??osalTimeUpdate_3: (+1)
   \   00000038   0x....             LDR.N    R1,??DataTable5_1  ;; 0xfffce019
   \   0000003A   0x1808             ADDS     R0,R1,R0
    214                  elapsedMSec += COUNTER_ELAPSEDMS;
   \   0000003C   0xF504 0x447F      ADD      R4,R4,#+65280
   \   00000040   0x34F8             ADDS     R4,R4,#+248
    215                }
   \                     ??osalTimeUpdate_2: (+1)
   \   00000042   0x....             LDR.N    R1,??DataTable5_2  ;; 0x31fe7
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD2F7             BCS.N    ??osalTimeUpdate_3
    216              
    217                // update converted number with remaining ticks from loop and the
    218                // accumulated remainder from loop
    219                tmp = (ticks320us * 8) + remUsTicks;
   \   00000048   0x....             LDR.N    R1,??DataTable5_3
   \   0000004A   0x8809             LDRH     R1,[R1, #+0]
   \   0000004C   0xEB11 0x05C0      ADDS     R5,R1,R0, LSL #+3
    220          
    221                // Convert the 320 us ticks into milliseconds and a remainder
    222                CONVERT_320US_TO_MS_ELAPSED_REMAINDER( tmp, elapsedMSec, remUsTicks );
   \   00000050   0x2019             MOVS     R0,#+25
   \   00000052   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000056   0x1904             ADDS     R4,R0,R4
   \   00000058   0x2019             MOVS     R0,#+25
   \   0000005A   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000005E   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000062   0x....             LDR.N    R1,??DataTable5_3
   \   00000064   0x8008             STRH     R0,[R1, #+0]
    223                
    224                // Update OSAL Clock and Timers
    225                osalClockUpdate( elapsedMSec );
   \   00000066   0x0020             MOVS     R0,R4
   \   00000068   0x.... 0x....      BL       osalClockUpdate
    226                osalTimerUpdate( elapsedMSec );
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       osalTimerUpdate
    227              }
    228            }
    229          }
   \                     ??osalTimeUpdate_1: (+1)
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
    230          
    231          /*********************************************************************
    232           * @fn      osalClockUpdate
    233           *
    234           * @brief   Updates the OSAL Clock time with elapsed milliseconds.
    235           *
    236           * @param   elapsedMSec - elapsed milliseconds
    237           *
    238           * @return  none
    239           */

   \                                 In section .text, align 2, keep-with-next
    240          static void osalClockUpdate( uint32 elapsedMSec )
    241          {
   \                     osalClockUpdate: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    242            uint32 tmp;
    243            halIntState_t intState;
    244            
    245            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000004   0x.... 0x....      BL       IntMasterDisable
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0xF090 0x0001      EORS     R0,R0,#0x1
    246            // Add elapsed milliseconds to the saved millisecond portion of time
    247            timeMSec += elapsedMSec;
   \   00000010   0x....             LDR.N    R1,??DataTable5_4
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x1861             ADDS     R1,R4,R1
   \   00000016   0x....             LDR.N    R2,??DataTable5_4
   \   00000018   0x6011             STR      R1,[R2, #+0]
    248          
    249            // Roll up milliseconds to the number of seconds
    250            if ( timeMSec >= 1000 )
   \   0000001A   0x....             LDR.N    R1,??DataTable5_4
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF5B1 0x7F7A      CMP      R1,#+1000
   \   00000022   0xD312             BCC.N    ??osalClockUpdate_0
    251            {
    252              tmp = timeMSec;
   \   00000024   0x....             LDR.N    R1,??DataTable5_4
   \   00000026   0x6809             LDR      R1,[R1, #+0]
    253              CONVERT_MS_TO_S_ELAPSED_REMAINDER(tmp, OSAL_timeSeconds, timeMSec);
   \   00000028   0x....             LDR.N    R2,??DataTable5_5
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0xF44F 0x737A      MOV      R3,#+1000
   \   00000030   0xFBB1 0xF3F3      UDIV     R3,R1,R3
   \   00000034   0x189A             ADDS     R2,R3,R2
   \   00000036   0x....             LDR.N    R3,??DataTable5_5
   \   00000038   0x601A             STR      R2,[R3, #+0]
   \   0000003A   0xF44F 0x727A      MOV      R2,#+1000
   \   0000003E   0xFBB1 0xF3F2      UDIV     R3,R1,R2
   \   00000042   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \   00000046   0x....             LDR.N    R2,??DataTable5_4
   \   00000048   0x6011             STR      R1,[R2, #+0]
    254            }
    255            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osalClockUpdate_0: (+1)
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD001             BEQ.N    ??osalClockUpdate_1
   \   00000050   0x.... 0x....      BL       IntMasterEnable
    256          }
   \                     ??osalClockUpdate_1: (+1)
   \   00000054   0xBD10             POP      {R4,PC}          ;; return
    257          
    258          #ifdef HAL_BOARD_CC2538
    259          /*********************************************************************
    260           * @fn      osalAdjustTimer
    261           *
    262           * @brief   Updates the OSAL Clock and Timer with elapsed milliseconds.
    263           *
    264           * @param   MSec - elapsed milliseconds
    265           *
    266           * @return  none
    267           */

   \                                 In section .text, align 2, keep-with-next
    268          void osalAdjustTimer(uint32 Msec )
    269          {
   \                     osalAdjustTimer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    270            /* Disable SysTick interrupts */ 
    271            SysTickIntDisable(); 
   \   00000004   0x.... 0x....      BL       SysTickIntDisable
    272            
    273            osalClockUpdate(Msec);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       osalClockUpdate
    274            osalTimerUpdate(Msec);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       osalTimerUpdate
    275            
    276            /* Enable SysTick interrupts */ 
    277            SysTickIntEnable(); 
   \   00000014   0x.... 0x....      BL       SysTickIntEnable
    278          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    279          #endif /* HAL_BOARD_CC2538 */
    280          
    281          /*********************************************************************
    282           * @fn      osal_setClock
    283           *
    284           * @brief   Set the new time.  This will only set the seconds portion
    285           *          of time and doesn't change the factional second counter.
    286           *
    287           * @param   newTime - number of seconds since 0 hrs, 0 minutes,
    288           *                    0 seconds, on the 1st of January 2000 UTC
    289           *
    290           * @return  none
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          void osal_setClock( UTCTime newTime )
    293          {
   \                     osal_setClock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    294            HAL_CRITICAL_STATEMENT(OSAL_timeSeconds = newTime);
   \   00000004   0x.... 0x....      BL       IntMasterDisable
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0xF090 0x0001      EORS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable5_5
   \   00000012   0x600C             STR      R4,[R1, #+0]
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD001             BEQ.N    ??osal_setClock_0
   \   0000001A   0x.... 0x....      BL       IntMasterEnable
    295          }
   \                     ??osal_setClock_0: (+1)
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    296          
    297          /*********************************************************************
    298           * @fn      osal_getClock
    299           *
    300           * @brief   Gets the current time.  This will only return the seconds
    301           *          portion of time and doesn't include the factional second
    302           *          counter.
    303           *
    304           * @param   none
    305           *
    306           * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
    307           *          on the 1st of January 2000 UTC
    308           */

   \                                 In section .text, align 2, keep-with-next
    309          UTCTime osal_getClock( void )
    310          {
    311            return ( OSAL_timeSeconds );
   \                     osal_getClock: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    312          }
    313          
    314          /*********************************************************************
    315           * @fn      osal_ConvertUTCTime
    316           *
    317           * @brief   Converts UTCTime to UTCTimeStruct
    318           *
    319           * @param   tm - pointer to breakdown struct
    320           *
    321           * @param   secTime - number of seconds since 0 hrs, 0 minutes,
    322           *          0 seconds, on the 1st of January 2000 UTC
    323           *
    324           * @return  none
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
    327          {
   \                     osal_ConvertUTCTime: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    328            // calculate the time less than a day - hours, minutes, seconds
    329            {
    330              uint32 day = secTime % DAY;
   \   00000004   0x....             LDR.N    R0,??DataTable5_6  ;; 0x15180
   \   00000006   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   0000000A   0xFB00 0x1012      MLS      R0,R0,R2,R1
    331              tm->seconds = day % 60UL;
   \   0000000E   0x223C             MOVS     R2,#+60
   \   00000010   0xFBB0 0xF3F2      UDIV     R3,R0,R2
   \   00000014   0xFB02 0x0213      MLS      R2,R2,R3,R0
   \   00000018   0x7022             STRB     R2,[R4, #+0]
    332              tm->minutes = (day % 3600UL) / 60UL;
   \   0000001A   0xF44F 0x6261      MOV      R2,#+3600
   \   0000001E   0xFBB0 0xF3F2      UDIV     R3,R0,R2
   \   00000022   0xFB02 0x0213      MLS      R2,R2,R3,R0
   \   00000026   0x233C             MOVS     R3,#+60
   \   00000028   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   0000002C   0x7062             STRB     R2,[R4, #+1]
    333              tm->hour = day / 3600UL;
   \   0000002E   0xF44F 0x6261      MOV      R2,#+3600
   \   00000032   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000036   0x70A0             STRB     R0,[R4, #+2]
    334            }
    335          
    336            // Fill in the calendar - day, month, year
    337            {
    338              uint16 numDays = secTime / DAY;
   \   00000038   0x....             LDR.N    R0,??DataTable5_6  ;; 0x15180
   \   0000003A   0xFBB1 0xF5F0      UDIV     R5,R1,R0
    339              tm->year = BEGYEAR;
   \   0000003E   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000042   0x80E0             STRH     R0,[R4, #+6]
   \   00000044   0xE005             B.N      ??osal_ConvertUTCTime_0
    340              while ( numDays >= YearLength( tm->year ) )
    341              {
    342                numDays -= YearLength( tm->year );
   \                     ??osal_ConvertUTCTime_1: (+1)
   \   00000046   0xF240 0x106D      MOVW     R0,#+365
   \                     ??osal_ConvertUTCTime_2: (+1)
   \   0000004A   0x1A2D             SUBS     R5,R5,R0
    343                tm->year++;
   \   0000004C   0x88E0             LDRH     R0,[R4, #+6]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x80E0             STRH     R0,[R4, #+6]
   \                     ??osal_ConvertUTCTime_0: (+1)
   \   00000052   0x88E0             LDRH     R0,[R4, #+6]
   \   00000054   0xF44F 0x71C8      MOV      R1,#+400
   \   00000058   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000005C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD00F             BEQ.N    ??osal_ConvertUTCTime_3
   \   00000064   0x88E0             LDRH     R0,[R4, #+6]
   \   00000066   0x2164             MOVS     R1,#+100
   \   00000068   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000006C   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD00A             BEQ.N    ??osal_ConvertUTCTime_4
   \   00000074   0x88E0             LDRH     R0,[R4, #+6]
   \   00000076   0x2104             MOVS     R1,#+4
   \   00000078   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000007C   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000080   0x2A00             CMP      R2,#+0
   \   00000082   0xD102             BNE.N    ??osal_ConvertUTCTime_4
   \                     ??osal_ConvertUTCTime_3: (+1)
   \   00000084   0xF44F 0x70B7      MOV      R0,#+366
   \   00000088   0xE001             B.N      ??osal_ConvertUTCTime_5
   \                     ??osal_ConvertUTCTime_4: (+1)
   \   0000008A   0xF240 0x106D      MOVW     R0,#+365
   \                     ??osal_ConvertUTCTime_5: (+1)
   \   0000008E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000090   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000092   0x4285             CMP      R5,R0
   \   00000094   0xD31B             BCC.N    ??osal_ConvertUTCTime_6
   \   00000096   0x88E0             LDRH     R0,[R4, #+6]
   \   00000098   0xF44F 0x71C8      MOV      R1,#+400
   \   0000009C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A0   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD00F             BEQ.N    ??osal_ConvertUTCTime_7
   \   000000A8   0x88E0             LDRH     R0,[R4, #+6]
   \   000000AA   0x2164             MOVS     R1,#+100
   \   000000AC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000B0   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD0C6             BEQ.N    ??osal_ConvertUTCTime_1
   \   000000B8   0x88E0             LDRH     R0,[R4, #+6]
   \   000000BA   0x2104             MOVS     R1,#+4
   \   000000BC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000C0   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000C4   0x2A00             CMP      R2,#+0
   \   000000C6   0xD1BE             BNE.N    ??osal_ConvertUTCTime_1
   \                     ??osal_ConvertUTCTime_7: (+1)
   \   000000C8   0xF44F 0x70B7      MOV      R0,#+366
   \   000000CC   0xE7BD             B.N      ??osal_ConvertUTCTime_2
    344              }
    345          
    346              tm->month = 0;
   \                     ??osal_ConvertUTCTime_6: (+1)
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x7120             STRB     R0,[R4, #+4]
   \   000000D2   0xE008             B.N      ??osal_ConvertUTCTime_8
    347              while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
    348              {
    349                numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
   \                     ??osal_ConvertUTCTime_9: (+1)
   \   000000D4   0x2000             MOVS     R0,#+0
   \                     ??osal_ConvertUTCTime_10: (+1)
   \   000000D6   0x7921             LDRB     R1,[R4, #+4]
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0x.... 0x....      BL       monthLength
   \   000000DE   0x1A2D             SUBS     R5,R5,R0
    350                tm->month++;
   \   000000E0   0x7920             LDRB     R0,[R4, #+4]
   \   000000E2   0x1C40             ADDS     R0,R0,#+1
   \   000000E4   0x7120             STRB     R0,[R4, #+4]
   \                     ??osal_ConvertUTCTime_8: (+1)
   \   000000E6   0x88E0             LDRH     R0,[R4, #+6]
   \   000000E8   0xF44F 0x71C8      MOV      R1,#+400
   \   000000EC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000F0   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD00F             BEQ.N    ??osal_ConvertUTCTime_11
   \   000000F8   0x88E0             LDRH     R0,[R4, #+6]
   \   000000FA   0x2164             MOVS     R1,#+100
   \   000000FC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000100   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD009             BEQ.N    ??osal_ConvertUTCTime_12
   \   00000108   0x88E0             LDRH     R0,[R4, #+6]
   \   0000010A   0x2104             MOVS     R1,#+4
   \   0000010C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000110   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000114   0x2A00             CMP      R2,#+0
   \   00000116   0xD101             BNE.N    ??osal_ConvertUTCTime_12
   \                     ??osal_ConvertUTCTime_11: (+1)
   \   00000118   0x2001             MOVS     R0,#+1
   \   0000011A   0xE000             B.N      ??osal_ConvertUTCTime_13
   \                     ??osal_ConvertUTCTime_12: (+1)
   \   0000011C   0x2000             MOVS     R0,#+0
   \                     ??osal_ConvertUTCTime_13: (+1)
   \   0000011E   0x7921             LDRB     R1,[R4, #+4]
   \   00000120   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000122   0x.... 0x....      BL       monthLength
   \   00000126   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000128   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012A   0x4285             CMP      R5,R0
   \   0000012C   0xD31A             BCC.N    ??osal_ConvertUTCTime_14
   \   0000012E   0x88E0             LDRH     R0,[R4, #+6]
   \   00000130   0xF44F 0x71C8      MOV      R1,#+400
   \   00000134   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000138   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD00F             BEQ.N    ??osal_ConvertUTCTime_15
   \   00000140   0x88E0             LDRH     R0,[R4, #+6]
   \   00000142   0x2164             MOVS     R1,#+100
   \   00000144   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000148   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD0C1             BEQ.N    ??osal_ConvertUTCTime_9
   \   00000150   0x88E0             LDRH     R0,[R4, #+6]
   \   00000152   0x2104             MOVS     R1,#+4
   \   00000154   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000158   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000015C   0x2A00             CMP      R2,#+0
   \   0000015E   0xD1B9             BNE.N    ??osal_ConvertUTCTime_9
   \                     ??osal_ConvertUTCTime_15: (+1)
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0xE7B8             B.N      ??osal_ConvertUTCTime_10
    351              }
    352          
    353              tm->day = numDays;
   \                     ??osal_ConvertUTCTime_14: (+1)
   \   00000164   0x70E5             STRB     R5,[R4, #+3]
    354            }
    355          }
   \   00000166   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    356          
    357          /*********************************************************************
    358           * @fn      monthLength
    359           *
    360           * @param   lpyr - 1 for leap year, 0 if not
    361           *
    362           * @param   mon - 0 - 11 (jan - dec)
    363           *
    364           * @return  number of days in specified month
    365           */

   \                                 In section .text, align 2, keep-with-next
    366          static uint8 monthLength( uint8 lpyr, uint8 mon )
    367          {
    368            uint8 days = 31;
   \                     monthLength: (+1)
   \   00000000   0x221F             MOVS     R2,#+31
    369          
    370          	if ( mon == 1 ) // feb
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD102             BNE.N    ??monthLength_0
    371            {
    372          		days = ( 28 + lpyr );
   \   00000008   0xF110 0x021C      ADDS     R2,R0,#+28
   \   0000000C   0xE006             B.N      ??monthLength_1
    373            }
    374            else
    375            {
    376              if ( mon > 6 ) // aug-dec
   \                     ??monthLength_0: (+1)
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2907             CMP      R1,#+7
   \   00000012   0xDB00             BLT.N    ??monthLength_2
    377              {
    378                mon--;
   \   00000014   0x1E49             SUBS     R1,R1,#+1
    379              }
    380          
    381              if ( mon & 1 )
   \                     ??monthLength_2: (+1)
   \   00000016   0x07C8             LSLS     R0,R1,#+31
   \   00000018   0xD500             BPL.N    ??monthLength_1
    382              {
    383                days = 30;
   \   0000001A   0x221E             MOVS     R2,#+30
    384              }
    385            }
    386          
    387          	return ( days );
   \                     ??monthLength_1: (+1)
   \   0000001C   0x0010             MOVS     R0,R2
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x4770             BX       LR               ;; return
    388          }
    389          
    390          /*********************************************************************
    391           * @fn      osal_ConvertUTCSecs
    392           *
    393           * @brief   Converts a UTCTimeStruct to UTCTime
    394           *
    395           * @param   tm - pointer to provided struct
    396           *
    397           * @return  number of seconds since 00:00:00 on 01/01/2000 (UTC)
    398           */

   \                                 In section .text, align 2, keep-with-next
    399          UTCTime osal_ConvertUTCSecs( UTCTimeStruct *tm )
    400          {
   \                     osal_ConvertUTCSecs: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
    401            uint32 seconds;
    402          
    403            /* Seconds for the partial day */
    404            seconds = (((tm->hour * 60UL) + tm->minutes) * 60UL) + tm->seconds;
   \   00000004   0x78B0             LDRB     R0,[R6, #+2]
   \   00000006   0x213C             MOVS     R1,#+60
   \   00000008   0x7872             LDRB     R2,[R6, #+1]
   \   0000000A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000E   0x213C             MOVS     R1,#+60
   \   00000010   0x7832             LDRB     R2,[R6, #+0]
   \   00000012   0xFB01 0x2400      MLA      R4,R1,R0,R2
    405          
    406            /* Account for previous complete days */
    407            {
    408              /* Start with complete days in current month */
    409              uint16 days = tm->day;
   \   00000016   0x78F5             LDRB     R5,[R6, #+3]
    410          
    411              /* Next, complete months in current year */
    412              {
    413                int8 month = tm->month;
   \   00000018   0xF996 0x7004      LDRSB    R7,[R6, #+4]
   \   0000001C   0xE006             B.N      ??osal_ConvertUTCSecs_0
    414                while ( --month >= 0 )
    415                {
    416                  days += monthLength( IsLeapYear( tm->year ), month );
   \                     ??osal_ConvertUTCSecs_1: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??osal_ConvertUTCSecs_2: (+1)
   \   00000020   0x0039             MOVS     R1,R7
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       monthLength
   \   0000002A   0x1945             ADDS     R5,R0,R5
   \                     ??osal_ConvertUTCSecs_0: (+1)
   \   0000002C   0x1E7F             SUBS     R7,R7,#+1
   \   0000002E   0xB27F             SXTB     R7,R7            ;; SignExt  R7,R7,#+24,#+24
   \   00000030   0x2F00             CMP      R7,#+0
   \   00000032   0xD41A             BMI.N    ??osal_ConvertUTCSecs_3
   \   00000034   0x88F0             LDRH     R0,[R6, #+6]
   \   00000036   0xF44F 0x71C8      MOV      R1,#+400
   \   0000003A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000003E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD00F             BEQ.N    ??osal_ConvertUTCSecs_4
   \   00000046   0x88F0             LDRH     R0,[R6, #+6]
   \   00000048   0x2164             MOVS     R1,#+100
   \   0000004A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000004E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD0E3             BEQ.N    ??osal_ConvertUTCSecs_1
   \   00000056   0x88F0             LDRH     R0,[R6, #+6]
   \   00000058   0x2104             MOVS     R1,#+4
   \   0000005A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000005E   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000062   0x2A00             CMP      R2,#+0
   \   00000064   0xD1DB             BNE.N    ??osal_ConvertUTCSecs_1
   \                     ??osal_ConvertUTCSecs_4: (+1)
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xE7DA             B.N      ??osal_ConvertUTCSecs_2
    417                }
    418              }
    419          
    420              /* Next, complete years before current year */
    421              {
    422                uint16 year = tm->year;
   \                     ??osal_ConvertUTCSecs_3: (+1)
   \   0000006A   0x88F0             LDRH     R0,[R6, #+6]
   \   0000006C   0xE002             B.N      ??osal_ConvertUTCSecs_5
    423                while ( --year >= BEGYEAR )
    424                {
    425                  days += YearLength( year );
   \                     ??osal_ConvertUTCSecs_6: (+1)
   \   0000006E   0xF240 0x116D      MOVW     R1,#+365
   \                     ??osal_ConvertUTCSecs_7: (+1)
   \   00000072   0x194D             ADDS     R5,R1,R5
   \                     ??osal_ConvertUTCSecs_5: (+1)
   \   00000074   0x1E40             SUBS     R0,R0,#+1
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   0000007C   0xDB1B             BLT.N    ??osal_ConvertUTCSecs_8
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0xF44F 0x71C8      MOV      R1,#+400
   \   00000084   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000088   0xFB01 0x0112      MLS      R1,R1,R2,R0
   \   0000008C   0x2900             CMP      R1,#+0
   \   0000008E   0xD00F             BEQ.N    ??osal_ConvertUTCSecs_9
   \   00000090   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000092   0x2164             MOVS     R1,#+100
   \   00000094   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000098   0xFB01 0x0112      MLS      R1,R1,R2,R0
   \   0000009C   0x2900             CMP      R1,#+0
   \   0000009E   0xD0E6             BEQ.N    ??osal_ConvertUTCSecs_6
   \   000000A0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A2   0x2104             MOVS     R1,#+4
   \   000000A4   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000A8   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   000000AC   0x2A00             CMP      R2,#+0
   \   000000AE   0xD1DE             BNE.N    ??osal_ConvertUTCSecs_6
   \                     ??osal_ConvertUTCSecs_9: (+1)
   \   000000B0   0xF44F 0x71B7      MOV      R1,#+366
   \   000000B4   0xE7DD             B.N      ??osal_ConvertUTCSecs_7
    426                }
    427              }
    428          
    429              /* Add total seconds before partial day */
    430              seconds += (days * DAY);
   \                     ??osal_ConvertUTCSecs_8: (+1)
   \   000000B6   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B8   0x....             LDR.N    R0,??DataTable5_6  ;; 0x15180
   \   000000BA   0xFB00 0x4405      MLA      R4,R0,R5,R4
    431            }
    432          
    433            return ( seconds );
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    434          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     previousMacTimerTick

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xFFFCE019         DC32     0xfffce019

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x00031FE7         DC32     0x31fe7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     remUsTicks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     timeMSec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     OSAL_timeSeconds

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00015180         DC32     0x15180

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   monthLength
       8   osalAdjustTimer
         8   -> SysTickIntDisable
         8   -> SysTickIntEnable
         8   -> osalClockUpdate
         8   -> osalTimerUpdate
       8   osalClockUpdate
         8   -> IntMasterDisable
         8   -> IntMasterEnable
      16   osalTimeUpdate
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> macMcuPrecisionCount
        16   -> osalClockUpdate
        16   -> osalTimerUpdate
      24   osal_ConvertUTCSecs
        24   -> monthLength
      16   osal_ConvertUTCTime
        16   -> monthLength
       0   osal_getClock
       8   osal_setClock
         8   -> IntMasterDisable
         8   -> IntMasterEnable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  OSAL_timeSeconds
      34  monthLength
      26  osalAdjustTimer
      86  osalClockUpdate
     116  osalTimeUpdate
     194  osal_ConvertUTCSecs
     360  osal_ConvertUTCTime
       6  osal_getClock
      32  osal_setClock
       4  previousMacTimerTick
       2  remUsTicks
       4  timeMSec

 
  14 bytes in section .bss
 882 bytes in section .text
 
 882 bytes of CODE memory
  14 bytes of DATA memory

Errors: none
Warnings: none
