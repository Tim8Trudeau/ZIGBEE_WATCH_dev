/********************************************************************
 *     program:  WatchHW.c
 *      Project: Zigbee Watch
 *     Version:  0.0.1 -- phase 1
 *   Copyright:  2014, Barron Associates
 *     Written:  Wednesday, March 18, 2015
 *      Author:  Tim Trudeau - Timware
 *   Processor:  TI CC2538
 *        Tool:  IAR Embedded Workbench
 *
 *-------------------------------------------------------------------
 *
 *******************************************************************/


/* ------------------------------------------------------------------------------------------------
 *                                          Includes
 * ------------------------------------------------------------------------------------------------
 */
#include "ZComDef.h"
#include "Hal_drivers.h" 
#include "hal_key.h" 
#include "OSAL.h"
#include "WatchApp.h"
#include "MT.h"
#include "MT_SYS.h"
#include "DebugTrace.h"
#include "mac_api.h"

/* Hal */
#include "hal_mcu.h"
#include "hal_timer.h"
//#include "hal_key.h"
//#include "hal_led.h"
//#include "hal_lcd.h"

/* Allow access macRandomByte() */
#include "mac_radio_defs.h"

/* ------------------------------------------------------------------------------------------------
 *                                           Constants
 * ------------------------------------------------------------------------------------------------
 */
// Task ID not initialized
#define NO_TASK_ID 0xFF

// Minimum length RAM "pattern" for Stack check
#define MIN_RAM_INIT 12

/* ------------------------------------------------------------------------------------------------
 *                                           Global Variables
 * ------------------------------------------------------------------------------------------------
 */

extern void HalUARTInit(void);
void OnBoard_KeyCallback ( uint8 keys, uint8 state );

uint8 OnboardKeyIntEnable;
// Registered keys task ID, initialized to NOT USED.
static uint8 registeredKeysTaskID = NO_TASK_ID;

// 64-bit Extended Address of this device
uint8 aExtendedAddress[8];

#if defined ZCL_KEY_ESTABLISH
#include "ZGlobals.h"
// Only include certificate data if we are building an initial OTA capable image
// or an image not designed to be transferred via OTA or SBL.
#if ( ((!defined OTA_CLIENT) && (!defined SBL_CLIENT)) || (defined OTA_INITIAL_IMAGE))
#include "zcl_cert_data.c"
#endif
#endif

//Used for handling button
static uint8 halSavedKeys;
static uint8 halIntKeys;
static halKeyCBack_t pHal_KeyProcessFunction;

/******************************************************************************
 * LOCAL FUNCTIONS
 */
/******************************************************************************
 * @fn      InitBoard()
 * @brief   Initialize the CC22538DB Board Peripherals
 * @param   level: COLD,WARM,READY
 * @return  None
******************************************************************************/
void InitBoard( uint8 level )
{
  if ( level == OB_COLD )
  {
    // Interrupts off
    osal_int_disable( INTS_ALL );
    HalKeyConfig( FALSE, NULL); //Config GPIO as input
#if (defined OTA_CLIENT) && (OTA_CLIENT == TRUE)
    HalOTAInit();
#endif
  }
  else  // !OB_COLD
  {
    /* Initialize Key stuff */
    OnboardKeyIntEnable = HAL_KEY_INTERRUPT_DISABLE;
    HalKeyConfig( OnboardKeyIntEnable, OnBoard_KeyCallback);
  }
}

/******************************************************************************
 * Button Register function
 *
 * The Button handler is setup to send all keyboard changes to
 * one task (if a task is registered). 
 *
 * If a task registers, it will get all button events. 
 ******************************************************************************/
uint8 RegisterForKeys( uint8 task_id )
{
  // Allow only the one task is registed since watch has only one button 
  if ( registeredKeysTaskID == NO_TASK_ID )
  {
    registeredKeysTaskID = task_id;
    Hal_KeyIntEnable = FALSE;  //No interrupts
    bspKeyInit(BSP_KEY_MODE_POLL); //Poll buttons
   
    if( OnBoard_KeyCallback != NULL)  // OnBoard_KeyCallback is a function pointer
    {
      /* Register the callback fucntion */
      pHal_KeyProcessFunction = OnBoard_KeyCallback;  
      /* Start polling if callback function is setup*/
      osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
    }
    return ( true );
  }
  else
  {
    return ( false );
  }
}

/******************************************************************************
 * @fn      OnBoard_SendKeys
 *
 * @brief   Send "Button Pressed" message to application.
 *
 * @param   keys  - keys that were pressed
 *          state - shifted
 *
 * @return  status
 ******************************************************************************/

//uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
//{
//  uint8 keystate = state;
//  uint8 *msgPtr = &keystate;
//
//  if ( registeredKeysTaskID != NO_TASK_ID ) {
//    // Send the address to the task
//    msgPtr = &state;
//    osal_msg_send( registeredKeysTaskID, msgPtr );
//    return ( ZSuccess );
//  } else {
//    return ( ZFailure );
//  }
//}

/******************************************************************************
 * @fn      OnBoard_KeyCallback
 *
 * @brief   Callback service for keys
 *
 * @param   keys  - keys that were pressed
 *          state - shifted
 *
 * @return  void
 ******************************************************************************/
void OnBoard_KeyCallback ( uint8 keys, uint8 state )
{
  uint8 *msgPtr;

  if ( registeredKeysTaskID != NO_TASK_ID ) {
    // Send the address to the task
    msgPtr = "FALL";
    osal_msg_send( registeredKeysTaskID, msgPtr );
    HAL_TOGGLE_LED2();
  } else {
    //error ("Fall Message did not get sent");
  }
}

/******************************************************************************
 * @fn      SetAll_IO_Direction
 *
 * @brief   
 *
 * @param   none
 *
 * @return  void
 ******************************************************************************/
void SetAll_IO_Direction(void)
{

}

/******************************************************************************
 * @fn      SetAll_IO_DefaultValues
 *
 * @brief   
 *
 * @param   none
 *
 * @return  void
 ******************************************************************************/
void SetAll_IO_DefaultValues(void)
{
 // GPIOPinTypeGPIOOutput(GPIO_B_BASE, GPIO_PIN_4);
 // GPIOPinWrite();          
 // GPIOPinTypeGPIOInput();  
}
  /******************************************************************************
 * @fn      _itoa
 *
 * @brief   convert a 16bit number to ASCII
 *
 * @param   num -
 *          buf -
 *          radix -
 *
 * @return  void
 *
 ******************************************************************************/
void _itoa(uint16 num, uint8 *buf, uint8 radix)
{
  char c,i;
  uint8 *p, rst[5];

  p = rst;
  for ( i=0; i<5; i++,p++ )
  {
    c = num % radix;  // Isolate a digit
    *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
    num /= radix;
    if ( !num )
    {
      break;
    }
  }

  for ( c=0 ; c<=i; c++ )
  {
    *buf++ = *p--;  // Reverse character order
  }

  *buf = '\0';
}
/******************************************************************************
 * @fn        Onboard_rand
 *
 * @brief    Random number generator
 *
 * @param   none
 *
 * @return  uint16 - new random number
 *
 ******************************************************************************/
uint16 Onboard_rand( void )
{
   return ( MAC_RADIO_RANDOM_WORD() );
}

/******************************************************************************
 *                     DEV BOARD EXTERNAL I/O FUNCTIONS
 *
 * User defined functions to control external devices. Add your code
 * to the following functions to control devices wired to DB outputs.
 *
 * NOTE - These functions MUST be left here as is if code is running on DEV board
 ******************************************************************************/

void BigLight_On( void )
{
  // Put code here to turn on an external light
}

void BigLight_Off( void )
{
  // Put code here to turn off an external light
}

void BuzzerControl( uint8 on )
{
  // Put code here to turn a buzzer on/off
  (void)on;
}

void Dimmer( uint8 lvl )
{
  // Put code here to control a dimmer
  (void)lvl;
}

// No dip switches on this board
uint8 GetUserDipSw( void )
{
  return 0;
}

/******************************************************************************
 */
