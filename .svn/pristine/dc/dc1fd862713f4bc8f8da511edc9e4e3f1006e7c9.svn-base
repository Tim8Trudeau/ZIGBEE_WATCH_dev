###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        03/Apr/2015  21:04:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchInitStack.c
#    Command line =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchInitStack.c -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=NO
#        -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0x0000
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\WatchInitStack.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\WatchInitStack.o
#
###############################################################################

C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchInitStack.c
      1          /*
      2           *     program:  WatchApp.c
      3           *      Project: Zigbee Watch
      4           *     Version:  0.0.1 -- phase 1
      5           *   Copyright:  2014, Barron Associates
      6           *     Written:  Wednesday, March 18, 2015
      7           *      Author:  Tim Trudeau - Timware
      8           *   Processor:  TI CC2538
      9           *        Tool:  IAR Embedded Workbench
     10           *
     11           *-------------------------------------------------------------------
     12           This is a collections of application specific function used to manage
     13           the zigbee stack.  This is where the proprietary profile is set up.
     14           This application uses a proprietary profile and runs on a nonscoring sleepy end device.
     15           After a power on reset the watch send a join request ZDO broadcast and periodically
     16           continues to send a join request until allowed to join the network.
     17           *******************************************************************/
     18          
     19          
     20          /* ------------------------------------------------------------------------------------------------
     21           *                                          Includes
     22           * ------------------------------------------------------------------------------------------------
     23           */
     24          #include "OSAL.h"
     25          #include "AF.h"
     26          #include "ZDApp.h"
     27          #include "ZDObject.h"
     28          #include "ZDProfile.h"
     29          
     30          #include "WatchApp.h"
     31          #include "DebugTrace.h"
     32          
     33          /* HAL */
     34          #include "hal_lcd.h"
     35          #include "hal_led.h"
     36          #include "hal_key.h"
     37          #include "hal_uart.h"
     38          
     39          /* RTOS */
     40          #if defined( IAR_ARMCM3_LM )
     41          #include "RTOS_App.h"
     42          #endif  
     43          /* ------------------------------------------------------------------------------------------------
     44           *                                           Constants
     45           * ------------------------------------------------------------------------------------------------
     46           */
     47          
     48          /* ------------------------------------------------------------------------------------------------
     49           *                                           Functions Declarations
     50           * ------------------------------------------------------------------------------------------------
     51           */
     52          static void WatchApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
     53          static void WatchApp_HandleAlarm( uint8 alarm);
     54          static void WatchApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     55          afStatus_t WatchApp_SendTheMessage( byte* message );
     56          
     57          /* ------------------------------------------------------------------------------------------------
     58           *                                           Global Variables
     59           * ------------------------------------------------------------------------------------------------
     60           */
     61          extern const cId_t WatchApp_ClusterList;
     62          extern const SimpleDescriptionFormat_t WatchApp_SimpleDesc;
     63          extern const endPointDesc_t WatchApp_epDesc;
     64          
     65          byte WatchApp_TaskID;             // Task ID for internal task/event processing
     66                                    	  // This variable will be received when
     67                                    	  // WatchApp_Init() is called.
     68          
     69          devStates_t WatchApp_NwkState;    // Network FSM state varable
     70          byte WatchApp_TransID;  	  // This is the unique message ID (counter)
     71          afAddrType_t WatchApp_DstAddr;    // Struct long & short addresses, endpoint, PANID
     72          
     73          // Number of recieved messages
     74          static uint16 rxMsgCount;
     75          
     76          // Time interval between sending messages
     77          static uint32 txMsgDelay = WATCHAPP_SEND_MSG_TIMEOUT;
     78          
     79          /*********************************************************************
     80           * Watch System Messages
     81           */
     82          
     83          #define ALARM_EVENT                0xE0    
     84          
     85          // OSAL System Message IDs/Events Reserved for applications (user applications)
     86          // 0xE0 – 0xFC
     87          
     88          
     89          /*********************************************************************
     90           * NETWORK LAYER CALLBACKS
     91          **********************************************************************
     92           * PUBLIC FUNCTIONS
     93           */
     94          
     95          /*********************************************************************
     96           * @fn      WatchApp_Init
     97           *
     98           * @brief   Initialization function for the App Task.
     99           *          This is called during initialization and should contain
    100           *          any application specific initialization (ie. hardware
    101           *          initialization/setup, table initialization, power up
    102           *          notificaiton ... ).
    103           *
    104           * @param   task_id - the ID assigned by OSAL.  This ID should be
    105           *                    used to send messages and set timers.
    106           *
    107           * @return  none
    108           *********************************************************************/
    109          void WatchApp_Init( uint8 task_id )
    110          {
    111            WatchApp_TaskID = task_id;
    112            WatchApp_NwkState = DEV_INIT;
    113            WatchApp_TransID = 0;
    114          
    115            // Device hardware initialization can be added here or in main() (Zmain.c).
    116            // If the hardware is application specific - add it here.
    117            // If the hardware is other parts of the device add it in main().
    118          
    119            WatchApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
    120            WatchApp_DstAddr.endPoint = 0;
    121            WatchApp_DstAddr.addr.shortAddr = 0;
    122          
    123            // Fill out the endpoint description.
    124            WatchApp_epDesc.endPoint = WATCHAPP_ENDPOINT;
                   ^
Error[Pe137]: expression must be a modifiable lvalue
    125            WatchApp_epDesc.task_id = &WatchApp_TaskID;
                   ^
Error[Pe137]: expression must be a modifiable lvalue
    126            WatchApp_epDesc.simpleDesc
                   ^
Error[Pe137]: expression must be a modifiable lvalue
    127                      = (SimpleDescriptionFormat_t *)&WatchApp_SimpleDesc;
    128            WatchApp_epDesc.latencyReq = noLatencyReqs;
                   ^
Error[Pe137]: expression must be a modifiable lvalue
    129          
    130            // Register the endpoint description with the AF
    131            afRegister( &WatchApp_epDesc );
                               ^
Error[Pe167]: argument of type "endPointDesc_t const *" is incompatible with
          parameter of type "struct <unnamed> *"
    132            
    133          // TODO register watch events here
    134            // Register for all key events - This app will handle all key events
    135            //RegisterForKeys( WatchApp_TaskID ); example
    136          
    137            ZDO_RegisterForZDOMsg( WatchApp_TaskID, End_Device_Bind_rsp );
    138            ZDO_RegisterForZDOMsg( WatchApp_TaskID, Match_Desc_rsp );
    139          }
    140          
    141          /*********************************************************************
    142           * @fn      WatchApp_ProcessEvent
    143           *
    144           * @brief   Application Task event processor.  This function
    145           *          is called to process all events for the task.  Events
    146           *          include timers, messages and any other user defined events.
    147           *
    148           * @param   task_id  - The OSAL assigned task ID.
    149           * @param   events - events to process.  This is a bit map and can
    150           *                   contain more than one event.
    151           *
    152           * @return  none
    153           ********************************************************************/
    154          uint16 WatchApp_ProcessEvent( uint8 task_id, uint16 events )
    155          {
    156            afIncomingMSGPacket_t *MSGpkt;
    157            afDataConfirm_t *afDataConfirm;
    158          
    159            // Data Confirmation message fields
    160            byte sentEP;
    161            ZStatus_t sentStatus;
    162            byte sentTransID;       // This should match the value sent
    163            (void)task_id;  // Intentionally unreferenced parameter
    164          
    165            if ( events & SYS_EVENT_MSG )
    166            {
    167              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( WatchApp_TaskID );
    168              while ( MSGpkt )
    169              {
    170                switch ( MSGpkt->hdr.event )
    171                {
    172                  case ZDO_CB_MSG:
    173                    WatchApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    174                    break;
    175          
    176                  case AF_DATA_CONFIRM_CMD:
    177                    // This message is received as a confirmation of a data packet sent.
    178                    // The status is of ZStatus_t type [defined in ZComDef.h]
    179                    // The message fields are defined in AF.h
    180                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    181                    
    182                    sentEP = afDataConfirm->endpoint;
    183                    (void)sentEP;  // This info not used now
    184                    sentTransID = afDataConfirm->transID;
    185                    (void)sentTransID;  // This info not used now
    186          
    187                    sentStatus = afDataConfirm->hdr.status;
    188                    // Action taken when confirmation is received.
    189                    if ( sentStatus != ZSuccess )
    190                    {
    191                      // TODO The data wasn't delivered -- Do something
    192                    }
    193                    break;
    194          
    195                  case AF_INCOMING_MSG_CMD:
    196                    WatchApp_MessageMSGCB( MSGpkt );
    197                    break;
    198          
    199                  case ZDO_STATE_CHANGE:
    200                    WatchApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    201                    if ( (WatchApp_NwkState == DEV_ZB_COORD) ||
    202                         (WatchApp_NwkState == DEV_ROUTER) ||
    203                         (WatchApp_NwkState == DEV_END_DEVICE) )
    204                    {
    205                      // Start sending "the" message in a regular interval.
    206                      osal_start_timerEx( WatchApp_TaskID,
    207                                          WATCHAPP_SEND_MSG_EVT,
    208                                          txMsgDelay );
    209                    }
    210                    break;
    211          
    212                  default:
    213                    break;
    214                }
    215          
    216                // Release the memory
    217                osal_msg_deallocate( (uint8 *)MSGpkt );
    218          
    219                // Next
    220                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( WatchApp_TaskID );
    221              }
    222          
    223              // return unprocessed events
    224              return (events ^ SYS_EVENT_MSG);
    225            }
    226          
    227            // Send a message out - This event is generated by a timer
    228            //  (setup in WatchApp_Init()).
    229            if ( events & WATCHAPP_SEND_MSG_EVT )
    230            {
    231              // Send "the" message
    232              WatchApp_SendTheMessage((uint8 *)MSGpkt);
    233          
    234              // Setup to send message again
    235              osal_start_timerEx( WatchApp_TaskID,
    236                                  WATCHAPP_SEND_MSG_EVT,
    237                                  txMsgDelay );
    238              // return unprocessed events
    239              return (events ^ WATCHAPP_SEND_MSG_EVT);
    240            }
    241            // Discard unknown events
    242            return 0;
    243          }
    244          
    245          /*********************************************************************
    246           * @fn      WatchApp_ProcessZDOMsgs()
    247           *
    248           * @brief   Process zigbee ZDO callback
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           *********************************************************************/
    254          static void WatchApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    255          {
    256            switch ( inMsg->clusterID )
    257            {
    258              case End_Device_Bind_rsp:
    259                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    260                {
    261                  // Light LED
    262                  //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    263                }
    264                break;
    265          
    266              case Match_Desc_rsp:
    267                {
    268                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    269                  if ( pRsp )
    270                  {
    271                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    272                    {
    273                      WatchApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    274                      WatchApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    275                      // Only one endpoint
    276                      WatchApp_DstAddr.endPoint = pRsp->epList[0];
    277          
    278                      // Light LED
    279                      //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    280                    }
    281                    osal_mem_free( pRsp );
    282                  }
    283                }
    284                break;
    285            }
    286          }
    287          
    288          /*********************************************************************
    289           * @fn      WatchApp_HandleAlarm
    290           *
    291           * @brief   Handles an Alarm events for the Watch. Maybe Produced by UART message
    292           * from MSP430 or from fall algorithm.
    293           *
    294           * @param   alarm - Alarm Type.
    295           *
    296           * @return  none
    297           ********************************************************************/
    298          static void WatchApp_HandleAlarm( uint8 alarm)
    299          {
    300            zAddrType_t dstAddr;
    301          
    302            ZDOInitDevice(0);
    303          
    304          // Initiate an End Device Bind Request for the mandatory endpoint
    305            dstAddr.addrMode = Addr16Bit;
    306            dstAddr.addr.shortAddr = 0x0000; // Coordinator
    307            ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    308                                  WatchApp_epDesc.endPoint,
    309                                  WATCHAPP_PROFID,
    310                                  WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    311                                  WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    312                                  FALSE );
    313           
    314          
    315            // Initiate a Match Description Request (Service Discovery)
    316            dstAddr.addrMode = AddrBroadcast;
    317            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    318            ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    319                              WATCHAPP_PROFID,
    320                              WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    321                              WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    322                              FALSE );
    323              
    324          }
    325          
    326          /*********************************************************************
    327           * @fn      WatchApp_MessageMSGCB
    328           *
    329           * @brief   Data message processor callback.  This function processes
    330           *          any incoming data - probably from other devices. This message is  
    331           *          from the OSAL which may include UART message!!
    332           *          So, based on cluster ID, perform the intended action.
    333           *
    334           * @param   none
    335           *
    336           * @return  none
    337           *********************************************************************/
    338          static void WatchApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    339          {
    340            switch ( pkt->clusterId )
    341            {
    342              case WATCHAPP_CLUSTERID:
    343                rxMsgCount += 1;  // Count this message
    344                //*********** Parse commands from coordinator here
    345          
    346                break;
    347            }
    348          }
    349          
    350          /*********************************************************************
    351           * @fn      WatchApp_SendTheMessage
    352           *
    353           * @brief   Send "the" message.
    354           *
    355           * @param   address of message string to send as payload
    356           *
    357           * @return  uint8 indication of message success. Zero indicates fail.
    358           */
    359          afStatus_t WatchApp_SendTheMessage( byte* message )
    360          {
    361            afStatus_t success;
    362            success = ( AF_DataRequest( &WatchApp_DstAddr, &WatchApp_epDesc,
                                                                  ^
Error[Pe167]: argument of type "endPointDesc_t const *" is incompatible with
          parameter of type "struct <unnamed> *"

  static void WatchApp_HandleAlarm( uint8 alarm)
              ^
"C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchInitStack.c",298  Warning[Pe177]: 
          function "WatchApp_HandleAlarm" was declared but never referenced
    363                                 WATCHAPP_CLUSTERID,
    364                                 (byte)osal_strlen((char*)message ) + 1,
    365                                 (byte *)message,
    366                                 &WatchApp_TransID,
    367                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
    368           
    369           return(success);
    370          }
    371          
    372          /*********************************************************************/
    373          
    374          

Errors: 6
Warnings: 1
