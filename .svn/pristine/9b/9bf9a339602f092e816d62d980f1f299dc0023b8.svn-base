###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        12/Apr/2015  15:43:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_UART.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_UART.c" -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=YES
#        -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\MT_UART.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\MT_UART.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In section .bss, align 1
     70          byte App_TaskID;
   \                     App_TaskID:
   \   00000000                      DS8 1
     71          
     72          /* ZTool protocal parameters */

   \                                 In section .bss, align 1
     73          uint8 state;
   \                     state:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   00000000                      DS8 1
     79          
     80          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     81          uint16  MT_UartMaxZAppBufLen;
     82          bool    MT_UartZAppRxStatus;
     83          #endif
     84          
     85          
     86          /***************************************************************************************************
     87           *                                          LOCAL FUNCTIONS
     88           ***************************************************************************************************/
     89          
     90          /***************************************************************************************************
     91           * @fn      MT_UartInit
     92           *
     93           * @brief   Initialize MT with UART support
     94           *
     95           * @param   None
     96           *
     97           * @return  None
     98          ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     99          void MT_UartInit ()
    100          {
   \                     MT_UartInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    101            halUARTCfg_t uartConfig;
    102          
    103            /* Initialize APP ID */
    104            App_TaskID = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable2
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    105          
    106            /* UART Configuration */
    107            uartConfig.configured           = TRUE;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    108            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xF88D 0x0001      STRB     R0,[SP, #+1]
    109            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xF88D 0x0002      STRB     R0,[SP, #+2]
    110            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000001C   0x2005             MOVS     R0,#+5
   \   0000001E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    111            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00000022   0x2078             MOVS     R0,#+120
   \   00000024   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    112            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   00000028   0x20AA             MOVS     R0,#+170
   \   0000002A   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    113            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   0000002E   0x2005             MOVS     R0,#+5
   \   00000030   0xF88D 0x0006      STRB     R0,[SP, #+6]
    114            uartConfig.intEnable            = TRUE;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xF88D 0x0020      STRB     R0,[SP, #+32]
    115          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    116            uartConfig.callBackFunc         = MT_UartProcessZToolData;
   \   0000003A   0x.... 0x....      ADR.W    R0,MT_UartProcessZToolData
   \   0000003E   0x900A             STR      R0,[SP, #+40]
    117          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    118            uartConfig.callBackFunc         = MT_UartProcessZAppData;
    119          #else
    120            uartConfig.callBackFunc         = NULL;
    121          #endif
    122          
    123            /* Start UART */
    124          #if defined (MT_UART_DEFAULT_PORT)
    125            HalUARTOpen (MT_UART_DEFAULT_PORT, &uartConfig);
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       HalUARTOpen
    126          #else
    127            /* Silence IAR compiler warning */
    128            (void)uartConfig;
    129          #endif
    130          
    131            /* Initialize for ZApp */
    132          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    133            /* Default max bytes that ZAPP can take */
    134            MT_UartMaxZAppBufLen  = 1;
    135            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    136          #endif
    137          
    138          }
   \   00000048   0xB00B             ADD      SP,SP,#+44
   \   0000004A   0xBD00             POP      {PC}             ;; return
    139          
    140          /***************************************************************************************************
    141           * @fn      MT_SerialRegisterTaskID
    142           *
    143           * @brief   This function registers the taskID of the application so it knows
    144           *          where to send the messages whent they come in.
    145           *
    146           * @param   void
    147           *
    148           * @return  void
    149           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    150          void MT_UartRegisterTaskID( byte taskID )
    151          {
    152            App_TaskID = taskID;
   \                     MT_UartRegisterTaskID: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable2
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    153          }
   \   00000004   0x4770             BX       LR               ;; return
    154          
    155          /***************************************************************************************************
    156           * @fn      SPIMgr_CalcFCS
    157           *
    158           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    159           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    160           *
    161           * @param   byte *msg_ptr - message pointer
    162           * @param   byte len - length (in bytes) of message
    163           *
    164           * @return  result byte
    165           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    166          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
    167          {
   \                     MT_UartCalcFCS: (+1)
   \   00000000   0xB410             PUSH     {R4}
    168            byte x;
    169            byte xorResult;
    170          
    171            xorResult = 0;
   \   00000002   0x2200             MOVS     R2,#+0
    172          
    173            for ( x = 0; x < len; x++, msg_ptr++ )
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xE003             B.N      ??MT_UartCalcFCS_0
    174              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1: (+1)
   \   00000008   0x7804             LDRB     R4,[R0, #+0]
   \   0000000A   0x4062             EORS     R2,R4,R2
   \   0000000C   0x1C5B             ADDS     R3,R3,#+1
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??MT_UartCalcFCS_0: (+1)
   \   00000010   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD3F7             BCC.N    ??MT_UartCalcFCS_1
    175          
    176            return ( xorResult );
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0xBC10             POP      {R4}
   \   0000001E   0x4770             BX       LR               ;; return
    177          }
    178          
    179          
    180          /***************************************************************************************************
    181           * @fn      MT_UartProcessZToolData
    182           *
    183           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    184           *          |  1  |     1        |    2    |  0-Len   |   1   |
    185           *
    186           *          Parses the data and determine either is SPI or just simply serial data
    187           *          then send the data to correct place (MT or APP)
    188           *
    189           * @param   port     - UART port
    190           *          event    - Event that causes the callback
    191           *
    192           *
    193           * @return  None
    194           ***************************************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    195          void MT_UartProcessZToolData ( uint8 port, uint8 event )
    196          {
   \                     MT_UartProcessZToolData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    197            uint8  ch;
    198            uint8  bytesInRxBuffer;
    199            
    200            (void)event;  // Intentionally unreferenced parameter
   \   00000004   0xE006             B.N      ??MT_UartProcessZToolData_0
    201          
    202            while (Hal_UART_RxBufLen(port))
    203            {
    204              HalUARTRead (port, &ch, 1);
    205          
    206              switch (state)
    207              {
    208                case SOP_STATE:
    209                  if (ch == MT_UART_SOF)
   \                     ??MT_UartProcessZToolData_1: (+1)
   \   00000006   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000A   0x28FE             CMP      R0,#+254
   \   0000000C   0xD102             BNE.N    ??MT_UartProcessZToolData_2
    210                    state = LEN_STATE;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x....             LDR.N    R1,??DataTable2_1
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    211                  break;
   \                     ??MT_UartProcessZToolData_2: (+1)
   \                     ??MT_UartProcessZToolData_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       Hal_UART_RxBufLen
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xF000 0x80D1      BEQ.W    ??MT_UartProcessZToolData_3
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       HalUARTRead
   \   0000002E   0x....             LDR.N    R0,??DataTable2_1
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD0E7             BEQ.N    ??MT_UartProcessZToolData_1
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD03C             BEQ.N    ??MT_UartProcessZToolData_4
   \   0000003A   0xD331             BCC.N    ??MT_UartProcessZToolData_5
   \   0000003C   0x2804             CMP      R0,#+4
   \   0000003E   0xD04B             BEQ.N    ??MT_UartProcessZToolData_6
   \   00000040   0xD303             BCC.N    ??MT_UartProcessZToolData_7
   \   00000042   0x2805             CMP      R0,#+5
   \   00000044   0xF000 0x809C      BEQ.W    ??MT_UartProcessZToolData_8
   \   00000048   0xE0BB             B.N      ??MT_UartProcessZToolData_9
    212          
    213                case LEN_STATE:
    214                  LEN_Token = ch;
   \                     ??MT_UartProcessZToolData_7: (+1)
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x....             LDR.N    R1,??DataTable2_2
   \   00000050   0x7008             STRB     R0,[R1, #+0]
    215          
    216                  tempDataLen = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR.N    R1,??DataTable2_3
   \   00000056   0x7008             STRB     R0,[R1, #+0]
    217          
    218                  /* Allocate memory for the data */
    219                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    220                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
   \   00000058   0x....             LDR.N    R0,??DataTable2_2
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x300B             ADDS     R0,R0,#+11
   \   0000005E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000060   0x.... 0x....      BL       osal_msg_allocate
   \   00000064   0x....             LDR.N    R1,??DataTable2_4
   \   00000066   0x6008             STR      R0,[R1, #+0]
    221          
    222                  if (pMsg)
   \   00000068   0x....             LDR.N    R0,??DataTable2_4
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD013             BEQ.N    ??MT_UartProcessZToolData_10
    223                  {
    224                    /* Fill up what we can */
    225                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x....             LDR.N    R1,??DataTable2_4
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x7008             STRB     R0,[R1, #+0]
    226                    pMsg->msg = (uint8*)(pMsg+1);
   \   00000078   0x....             LDR.N    R0,??DataTable2_4
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x3008             ADDS     R0,R0,#+8
   \   0000007E   0x....             LDR.N    R1,??DataTable2_4
   \   00000080   0x6809             LDR      R1,[R1, #+0]
   \   00000082   0x6048             STR      R0,[R1, #+4]
    227                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \   00000084   0x....             LDR.N    R0,??DataTable2_2
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x....             LDR.N    R1,??DataTable2_4
   \   0000008A   0x6809             LDR      R1,[R1, #+0]
   \   0000008C   0x6849             LDR      R1,[R1, #+4]
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
    228                    state = CMD_STATE1;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x....             LDR.N    R1,??DataTable2_1
   \   00000094   0x7008             STRB     R0,[R1, #+0]
    229                  }
    230                  else
    231                  {
    232                    state = SOP_STATE;
    233                    return;
    234                  }
    235                  break;
   \   00000096   0xE7BD             B.N      ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_10: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             LDR.N    R1,??DataTable2_1
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
   \   0000009E   0xE091             B.N      ??MT_UartProcessZToolData_11
    236          
    237                case CMD_STATE1:
    238                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5: (+1)
   \   000000A0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A4   0x....             LDR.N    R1,??DataTable2_4
   \   000000A6   0x6809             LDR      R1,[R1, #+0]
   \   000000A8   0x6849             LDR      R1,[R1, #+4]
   \   000000AA   0x7048             STRB     R0,[R1, #+1]
    239                  state = CMD_STATE2;
   \   000000AC   0x2002             MOVS     R0,#+2
   \   000000AE   0x....             LDR.N    R1,??DataTable2_1
   \   000000B0   0x7008             STRB     R0,[R1, #+0]
    240                  break;
   \   000000B2   0xE7AF             B.N      ??MT_UartProcessZToolData_0
    241          
    242                case CMD_STATE2:
    243                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_4: (+1)
   \   000000B4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B8   0x....             LDR.N    R1,??DataTable2_4
   \   000000BA   0x6809             LDR      R1,[R1, #+0]
   \   000000BC   0x6849             LDR      R1,[R1, #+4]
   \   000000BE   0x7088             STRB     R0,[R1, #+2]
    244                  /* If there is no data, skip to FCS state */
    245                  if (LEN_Token)
   \   000000C0   0x....             LDR.N    R0,??DataTable2_2
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD003             BEQ.N    ??MT_UartProcessZToolData_12
    246                  {
    247                    state = DATA_STATE;
   \   000000C8   0x2004             MOVS     R0,#+4
   \   000000CA   0x....             LDR.N    R1,??DataTable2_1
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   \   000000CE   0xE002             B.N      ??MT_UartProcessZToolData_13
    248                  }
    249                  else
    250                  {
    251                    state = FCS_STATE;
   \                     ??MT_UartProcessZToolData_12: (+1)
   \   000000D0   0x2005             MOVS     R0,#+5
   \   000000D2   0x....             LDR.N    R1,??DataTable2_1
   \   000000D4   0x7008             STRB     R0,[R1, #+0]
    252                  }
    253                  break;
   \                     ??MT_UartProcessZToolData_13: (+1)
   \   000000D6   0xE79D             B.N      ??MT_UartProcessZToolData_0
    254          
    255                case DATA_STATE:
    256          
    257                  /* Fill in the buffer the first byte of the data */
    258                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_6: (+1)
   \   000000D8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000DC   0x....             LDR.N    R1,??DataTable2_4
   \   000000DE   0x6809             LDR      R1,[R1, #+0]
   \   000000E0   0x6849             LDR      R1,[R1, #+4]
   \   000000E2   0x....             LDR.N    R2,??DataTable2_3
   \   000000E4   0x7812             LDRB     R2,[R2, #+0]
   \   000000E6   0x1851             ADDS     R1,R2,R1
   \   000000E8   0x70C8             STRB     R0,[R1, #+3]
   \   000000EA   0x....             LDR.N    R0,??DataTable2_3
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x1C40             ADDS     R0,R0,#+1
   \   000000F0   0x....             LDR.N    R1,??DataTable2_3
   \   000000F2   0x7008             STRB     R0,[R1, #+0]
    259          
    260                  /* Check number of bytes left in the Rx buffer */
    261                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F8   0x.... 0x....      BL       Hal_UART_RxBufLen
   \   000000FC   0x0005             MOVS     R5,R0
    262          
    263                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    264                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   000000FE   0x....             LDR.N    R0,??DataTable2_2
   \   00000100   0x7800             LDRB     R0,[R0, #+0]
   \   00000102   0x....             LDR.N    R1,??DataTable2_3
   \   00000104   0x7809             LDRB     R1,[R1, #+0]
   \   00000106   0x1A40             SUBS     R0,R0,R1
   \   00000108   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000010A   0x42A8             CMP      R0,R5
   \   0000010C   0xDB13             BLT.N    ??MT_UartProcessZToolData_14
    265                  {
    266                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   0000010E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000110   0x002A             MOVS     R2,R5
   \   00000112   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000114   0x....             LDR.N    R0,??DataTable2_4
   \   00000116   0x6800             LDR      R0,[R0, #+0]
   \   00000118   0x6840             LDR      R0,[R0, #+4]
   \   0000011A   0x....             LDR.N    R1,??DataTable2_3
   \   0000011C   0x7809             LDRB     R1,[R1, #+0]
   \   0000011E   0x1808             ADDS     R0,R1,R0
   \   00000120   0x1CC1             ADDS     R1,R0,#+3
   \   00000122   0x0020             MOVS     R0,R4
   \   00000124   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000126   0x.... 0x....      BL       HalUARTRead
    267                    tempDataLen += bytesInRxBuffer;
   \   0000012A   0x....             LDR.N    R0,??DataTable2_3
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x1828             ADDS     R0,R5,R0
   \   00000130   0x....             LDR.N    R1,??DataTable2_3
   \   00000132   0x7008             STRB     R0,[R1, #+0]
   \   00000134   0xE01A             B.N      ??MT_UartProcessZToolData_15
    268                  }
    269                  else
    270                  {
    271                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_14: (+1)
   \   00000136   0x....             LDR.N    R0,??DataTable2_2
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x....             LDR.N    R1,??DataTable2_3
   \   0000013C   0x7809             LDRB     R1,[R1, #+0]
   \   0000013E   0x1A42             SUBS     R2,R0,R1
   \   00000140   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000142   0x....             LDR.N    R0,??DataTable2_4
   \   00000144   0x6800             LDR      R0,[R0, #+0]
   \   00000146   0x6840             LDR      R0,[R0, #+4]
   \   00000148   0x....             LDR.N    R1,??DataTable2_3
   \   0000014A   0x7809             LDRB     R1,[R1, #+0]
   \   0000014C   0x1808             ADDS     R0,R1,R0
   \   0000014E   0x1CC1             ADDS     R1,R0,#+3
   \   00000150   0x0020             MOVS     R0,R4
   \   00000152   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000154   0x.... 0x....      BL       HalUARTRead
    272                    tempDataLen += (LEN_Token - tempDataLen);
   \   00000158   0x....             LDR.N    R0,??DataTable2_3
   \   0000015A   0x7800             LDRB     R0,[R0, #+0]
   \   0000015C   0x....             LDR.N    R1,??DataTable2_2
   \   0000015E   0x7809             LDRB     R1,[R1, #+0]
   \   00000160   0x1808             ADDS     R0,R1,R0
   \   00000162   0x....             LDR.N    R1,??DataTable2_3
   \   00000164   0x7809             LDRB     R1,[R1, #+0]
   \   00000166   0x1A40             SUBS     R0,R0,R1
   \   00000168   0x....             LDR.N    R1,??DataTable2_3
   \   0000016A   0x7008             STRB     R0,[R1, #+0]
    273                  }
    274          
    275                  /* If number of bytes read is equal to data length, time to move on to FCS */
    276                  if ( tempDataLen == LEN_Token )
   \                     ??MT_UartProcessZToolData_15: (+1)
   \   0000016C   0x....             LDR.N    R0,??DataTable2_3
   \   0000016E   0x7800             LDRB     R0,[R0, #+0]
   \   00000170   0x....             LDR.N    R1,??DataTable2_2
   \   00000172   0x7809             LDRB     R1,[R1, #+0]
   \   00000174   0x4288             CMP      R0,R1
   \   00000176   0xD102             BNE.N    ??MT_UartProcessZToolData_16
    277                      state = FCS_STATE;
   \   00000178   0x2005             MOVS     R0,#+5
   \   0000017A   0x....             LDR.N    R1,??DataTable2_1
   \   0000017C   0x7008             STRB     R0,[R1, #+0]
    278          
    279                  break;
   \                     ??MT_UartProcessZToolData_16: (+1)
   \   0000017E   0xE749             B.N      ??MT_UartProcessZToolData_0
    280          
    281                case FCS_STATE:
    282          
    283                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_8: (+1)
   \   00000180   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000184   0x....             LDR.N    R1,??DataTable2_5
   \   00000186   0x7008             STRB     R0,[R1, #+0]
    284          
    285                  /* Make sure it's correct */
    286                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \   00000188   0x....             LDR.N    R0,??DataTable2_2
   \   0000018A   0x7800             LDRB     R0,[R0, #+0]
   \   0000018C   0x1CC1             ADDS     R1,R0,#+3
   \   0000018E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000190   0x....             LDR.N    R0,??DataTable2_4
   \   00000192   0x6800             LDR      R0,[R0, #+0]
   \   00000194   0x6840             LDR      R0,[R0, #+4]
   \   00000196   0x.... 0x....      BL       MT_UartCalcFCS
   \   0000019A   0x....             LDR.N    R1,??DataTable2_5
   \   0000019C   0x7809             LDRB     R1,[R1, #+0]
   \   0000019E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001A0   0x4288             CMP      R0,R1
   \   000001A2   0xD106             BNE.N    ??MT_UartProcessZToolData_17
    287                  {
    288                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   000001A4   0x....             LDR.N    R0,??DataTable2_4
   \   000001A6   0x6801             LDR      R1,[R0, #+0]
   \   000001A8   0x....             LDR.N    R0,??DataTable2
   \   000001AA   0x7800             LDRB     R0,[R0, #+0]
   \   000001AC   0x.... 0x....      BL       osal_msg_send
   \   000001B0   0xE003             B.N      ??MT_UartProcessZToolData_18
    289                  }
    290                  else
    291                  {
    292                    /* deallocate the msg */
    293                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_17: (+1)
   \   000001B2   0x....             LDR.N    R0,??DataTable2_4
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0x.... 0x....      BL       osal_msg_deallocate
    294                  }
    295          
    296                  /* Reset the state, send or discard the buffers at this point */
    297                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_18: (+1)
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x....             LDR.N    R1,??DataTable2_1
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
    298          
    299                  break;
   \   000001C0   0xE728             B.N      ??MT_UartProcessZToolData_0
    300          
    301                default:
    302                 break;
   \                     ??MT_UartProcessZToolData_9: (+1)
   \   000001C2   0xE727             B.N      ??MT_UartProcessZToolData_0
    303              }
    304            }
    305          }
   \                     ??MT_UartProcessZToolData_3: (+1)
   \                     ??MT_UartProcessZToolData_11: (+1)
   \   000001C4   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     App_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     LEN_Token

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     tempDataLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     pMsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     FSC_Token
    306          
    307          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    308          /***************************************************************************************************
    309           * @fn      MT_UartProcessZAppData
    310           *
    311           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    312           *          |  1  |  2   |       1         |  1   |
    313           *
    314           *          Parses the data and determine either is SPI or just simply serial data
    315           *          then send the data to correct place (MT or APP)
    316           *
    317           * @param   port    - UART port
    318           *          event   - Event that causes the callback
    319           *
    320           *
    321           * @return  None
    322           ***************************************************************************************************/
    323          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    324          {
    325          
    326            osal_event_hdr_t  *msg_ptr;
    327            uint16 length = 0;
    328            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    329          
    330            /*
    331               If maxZAppBufferLength is 0 or larger than current length
    332               the entire length of the current buffer is returned.
    333            */
    334            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    335            {
    336              length = MT_UartMaxZAppBufLen;
    337            }
    338            else
    339            {
    340              length = rxBufLen;
    341            }
    342          
    343            /* Verify events */
    344            if (event == HAL_UART_TX_FULL)
    345            {
    346              // Do something when TX if full
    347              return;
    348            }
    349          
    350            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    351            {
    352              if ( App_TaskID )
    353              {
    354                /*
    355                   If Application is ready to receive and there is something
    356                   in the Rx buffer then send it up
    357                */
    358                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    359                {
    360                  /* Disable App flow control until it processes the current data */
    361                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    362          
    363                  /* 2 more bytes are added, 1 for CMD type, other for length */
    364                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    365                  if ( msg_ptr )
    366                  {
    367                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    368                    msg_ptr->status = length;
    369          
    370                    /* Read the data of Rx buffer */
    371                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    372          
    373                    /* Send the raw data to application...or where ever */
    374                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    375                  }
    376                }
    377              }
    378            }
    379          }
    380          
    381          /***************************************************************************************************
    382           * @fn      SPIMgr_ZAppBufferLengthRegister
    383           *
    384           * @brief
    385           *
    386           * @param   maxLen - Max Length that the application wants at a time
    387           *
    388           * @return  None
    389           *
    390           ***************************************************************************************************/
    391          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    392          {
    393            /* If the maxLen is larger than the RX buff, something is not right */
    394            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    395              MT_UartMaxZAppBufLen = maxLen;
    396            else
    397              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    398          }
    399          
    400          /***************************************************************************************************
    401           * @fn      SPIMgr_AppFlowControl
    402           *
    403           * @brief
    404           *
    405           * @param   status - ready to send or not
    406           *
    407           * @return  None
    408           *
    409           ***************************************************************************************************/
    410          void MT_UartAppFlowControl ( bool status )
    411          {
    412          
    413            /* Make sure only update if needed */
    414            if (status != MT_UartZAppRxStatus )
    415            {
    416              MT_UartZAppRxStatus = status;
    417            }
    418          
    419            /* App is ready to read again, ProcessZAppData have to be triggered too */
    420            if (status == MT_UART_ZAPP_RX_READY)
    421            {
    422              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    423            }
    424          
    425          }
    426          
    427          #endif //ZAPP
    428          
    429          /***************************************************************************************************
    430          ***************************************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   MT_UartCalcFCS
      48   MT_UartInit
        48   -> HalUARTOpen
      16   MT_UartProcessZToolData
        16   -> HalUARTRead
        16   -> Hal_UART_RxBufLen
        16   -> MT_UartCalcFCS
        16   -> osal_msg_allocate
        16   -> osal_msg_deallocate
        16   -> osal_msg_send
       0   MT_UartRegisterTaskID


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       1  App_TaskID
       2  CMD_Token
       1  FSC_Token
       1  LEN_Token
      32  MT_UartCalcFCS
      76  MT_UartInit
     454  MT_UartProcessZToolData
       6  MT_UartRegisterTaskID
       4  pMsg
       1  state
       1  tempDataLen

 
  11 bytes in section .bss
 592 bytes in section .text
 
 592 bytes of CODE memory
  11 bytes of DATA memory

Errors: none
Warnings: none
