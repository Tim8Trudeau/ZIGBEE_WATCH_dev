###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        12/Apr/2015  15:43:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\New folder\hal_ccm.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\New folder\hal_ccm.c" -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=YES
#        -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\hal_ccm.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\hal_ccm.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\New folder\hal_ccm.c
      1          /******************************************************************************
      2            Filename:       _hal_ccm.c
      3            Revised:        $Date: 2014-07-29 21:18:07 -0700 (Tue, 29 Jul 2014) $
      4            Revision:       $Revision: 39577 $
      5          
      6            Description:    Support for Hardware CCM authentication.
      7          
      8            Copyright 2011-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          ******************************************************************************/
     38          
     39          /******************************************************************************
     40           * INCLUDES
     41           */
     42          
     43          #include "OSAL.h"
     44          #include "hw_aes.h"
     45          #include "hal_aes.h"
     46          #include "hal_ccm.h"
     47          #include "hal_assert.h"
     48          #include "aes.h"
     49          #include "ccm.h"
     50          
     51          /******************************************************************************
     52           * MACROS
     53           */
     54          
     55          /******************************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /******************************************************************************
     60           * TYPEDEFS
     61           */
     62          
     63          /******************************************************************************
     64           * LOCAL VARIABLES
     65           */
     66          
     67          /******************************************************************************
     68           * GLOBAL VARIABLES
     69           */
     70          
     71          /******************************************************************************
     72           * FUNCTION PROTOTYPES
     73           */
     74          
     75          /******************************************************************************
     76           * @fn      SSP_CCM_Auth_Encrypt
     77           *
     78           * @brief   Generates CCM Authentication tag U.
     79           *
     80           * input parameters
     81           * @param encrypt if set to 'true' then run encryption and set to 'flase' for
     82           * authentication only.
     83           * @param   Mval    - Length of authentication field in octets [0,2,4,6,8,10,12,14 or 16]
     84           * @param   N       - Pointer to 13-byte Nonce
     85           * @param   M       - Pointer to octet string 'm'
     86           * @param   len_m   - Length of M[] in octets
     87           * @param   A       - Pointer to octet string 'a'
     88           * @param   len_a   - Length of A[] in octets
     89           * @param   AesKey  - Pointer to AES Key or Pointer to Key Expansion buffer.
     90           * @param   Cstate  - Pointer to output buffer
     91           * @param   ccmLVal - ccm L Value to be used.
     92           *
     93           * output parameters
     94           *
     95           * @param   Cstate[]    - The first Mval bytes contain Authentication Tag T
     96           *
     97           * @return  ZStatus_t
     98           *
     99           */

   \                                 In section .text, align 4, keep-with-next
    100          uint8 SSP_CCM_Auth_Encrypt (bool encrypt, uint8 Mval, uint8 *N, uint8 *M, uint16 len_m, uint8 *A,
    101                              uint16 len_a, uint8 *AesKey, uint8 *Cstate, uint8 ccmLVal)
    102          {
   \                     SSP_CCM_Auth_Encrypt: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x9C0C             LDR      R4,[SP, #+48]
   \   00000008   0x9E10             LDR      R6,[SP, #+64]
    103          
    104            unsigned char status;
    105          
    106            if((status = CCMAuthEncryptStart(encrypt, Mval, N, M,  len_m, A, len_a, 0,
    107                                                 Cstate, ccmLVal, false)) != AES_SUCCESS)
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9106             STR      R1,[SP, #+24]
   \   0000000E   0x9911             LDR      R1,[SP, #+68]
   \   00000010   0x9105             STR      R1,[SP, #+20]
   \   00000012   0x9604             STR      R6,[SP, #+16]
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x9103             STR      R1,[SP, #+12]
   \   00000018   0x990E             LDR      R1,[SP, #+56]
   \   0000001A   0x9102             STR      R1,[SP, #+8]
   \   0000001C   0x990D             LDR      R1,[SP, #+52]
   \   0000001E   0x9101             STR      R1,[SP, #+4]
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       CCMAuthEncryptStart
   \   00000030   0x0001             MOVS     R1,R0
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD001             BEQ.N    ??SSP_CCM_Auth_Encrypt_0
    108            {
    109              return status;
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xE012             B.N      ??SSP_CCM_Auth_Encrypt_1
    110            }
    111          
    112            do
    113            {
    114              ASM_NOP;
   \                     ??SSP_CCM_Auth_Encrypt_0: (+1)
   \   0000003C   0xBF00             NOP
    115            }while(!(CCMAuthEncryptCheckResult()));
   \   0000003E   0x.... 0x....      BL       CCMAuthEncryptCheckResult
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD0FA             BEQ.N    ??SSP_CCM_Auth_Encrypt_0
    116          
    117            if((status = CCMAuthEncryptGetResult(Mval, len_m, Cstate)) != AES_SUCCESS)
   \   00000046   0x0032             MOVS     R2,R6
   \   00000048   0x0021             MOVS     R1,R4
   \   0000004A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       CCMAuthEncryptGetResult
   \   00000054   0x0001             MOVS     R1,R0
   \   00000056   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000058   0x2900             CMP      R1,#+0
   \   0000005A   0xD001             BEQ.N    ??SSP_CCM_Auth_Encrypt_2
    118            {
    119              return status;
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0xE000             B.N      ??SSP_CCM_Auth_Encrypt_1
    120            }
    121            return AES_SUCCESS;
   \                     ??SSP_CCM_Auth_Encrypt_2: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??SSP_CCM_Auth_Encrypt_1: (+1)
   \   00000062   0xB008             ADD      SP,SP,#+32
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
    122          }
    123          
    124          
    125          /******************************************************************************
    126           * @fn      SSP_CCM_InvAuth_Decrypt
    127           *
    128           * @brief   Verifies CCM authentication.
    129           *
    130           * input parameters
    131           * @param decrypt if set to 'true' then run decryption and set to 'flase' for
    132           * authentication only.
    133           * @param   Mval    - Length of authentication field in octets [0,2,4,6,8,10,12,14 or 16]
    134           * @param   N       - Pointer to 13-byte Nonce
    135           * @param   C       - Pointer to octet string 'c' = 'm' || auth tag T
    136           * @param   len_c   - Length of C[] in octets
    137           * @param   A       - Pointer to octet string 'a'
    138           * @param   len_a   - Length of A[] in octets
    139           * @param   AesKey  - Pointer to AES Key or Pointer to Key Expansion buffer.
    140           * @param   Cstate  - Pointer to AES state buffer (cannot be part of C[])
    141           * @param   ccmLVal - ccm L Value to be used.
    142           *
    143           * output parameters
    144           *
    145           * @param   Cstate[]    - The first Mval bytes contain computed Authentication Tag T
    146           *
    147           * @return  0 = Success, 1 = Failure
    148           *
    149           */

   \                                 In section .text, align 4, keep-with-next
    150          uint8 SSP_CCM_InvAuth_Decrypt (bool decrypt, uint8 Mval, uint8 *N, uint8 *C, uint16 len_c, uint8 *A,
    151                                 uint16 len_a, uint8 *AesKey, uint8 *Cstate, uint8 ccmLVal)
    152          {
   \                     SSP_CCM_InvAuth_Decrypt: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x9C0C             LDR      R4,[SP, #+48]
   \   0000000A   0x9F10             LDR      R7,[SP, #+64]
    153          
    154            unsigned char status;
    155            if((status = CCMInvAuthDecryptStart(decrypt, Mval, N, C, len_c, A, len_a, 0, Cstate,
    156                                                   ccmLVal, false))!= AES_SUCCESS )
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x9106             STR      R1,[SP, #+24]
   \   00000010   0x9911             LDR      R1,[SP, #+68]
   \   00000012   0x9105             STR      R1,[SP, #+20]
   \   00000014   0x9704             STR      R7,[SP, #+16]
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x9103             STR      R1,[SP, #+12]
   \   0000001A   0x990E             LDR      R1,[SP, #+56]
   \   0000001C   0x9102             STR      R1,[SP, #+8]
   \   0000001E   0x990D             LDR      R1,[SP, #+52]
   \   00000020   0x9101             STR      R1,[SP, #+4]
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000026   0x9100             STR      R1,[SP, #+0]
   \   00000028   0x0033             MOVS     R3,R6
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x.... 0x....      BL       CCMInvAuthDecryptStart
   \   00000034   0x0001             MOVS     R1,R0
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD001             BEQ.N    ??SSP_CCM_InvAuth_Decrypt_0
    157            {
    158              return status;
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xE013             B.N      ??SSP_CCM_InvAuth_Decrypt_1
    159            }
    160          
    161            /* wait for completion of the operation */
    162            do
    163            {
    164              ASM_NOP;
   \                     ??SSP_CCM_InvAuth_Decrypt_0: (+1)
   \   00000040   0xBF00             NOP
    165            }while(!(CCMInvAuthDecryptCheckResult()));
   \   00000042   0x.... 0x....      BL       CCMInvAuthDecryptCheckResult
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD0FA             BEQ.N    ??SSP_CCM_InvAuth_Decrypt_0
    166          
    167          
    168            if((status = CCMInvAuthDecryptGetResult(Mval, C, len_c, Cstate)) != AES_SUCCESS)
   \   0000004A   0x003B             MOVS     R3,R7
   \   0000004C   0x0022             MOVS     R2,R4
   \   0000004E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000050   0x0031             MOVS     R1,R6
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       CCMInvAuthDecryptGetResult
   \   0000005A   0x0001             MOVS     R1,R0
   \   0000005C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005E   0x2900             CMP      R1,#+0
   \   00000060   0xD001             BEQ.N    ??SSP_CCM_InvAuth_Decrypt_2
    169            {
    170              return status;
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0xE000             B.N      ??SSP_CCM_InvAuth_Decrypt_1
    171            }
    172          
    173            return AES_SUCCESS;
   \                     ??SSP_CCM_InvAuth_Decrypt_2: (+1)
   \   00000066   0x2000             MOVS     R0,#+0
   \                     ??SSP_CCM_InvAuth_Decrypt_1: (+1)
   \   00000068   0xB007             ADD      SP,SP,#+28
   \   0000006A   0xBDF0             POP      {R4-R7,PC}       ;; return
    174          }
    175          
    176          /******************************************************************************
    177           * @fn      SSP_CCM_Encrypt
    178           *
    179           * @brief   Performs CCM encryption.
    180           *
    181           * This is a deprecated function. Use SSP_CCM_Auth_Encrypt instead
    182           * 
    183           * input parameters
    184           *
    185           * @param   Mval    - Length of authentication field in octets [0,2,4,6,8,10,12,14 or 16]
    186           * @param   N       - Pointer to 13-byte Nonce
    187           * @param   M       - Pointer to octet string 'm'
    188           * @param   len_m   - Length of M[] in octets
    189           * @param   AesKey  - Pointer to AES Key or Pointer to Key Expansion buffer.
    190           * @param   Cstate  - Pointer to Authentication Tag U
    191           * @param   ccmLVal - ccm L Value to be used. 
    192           *
    193           * output parameters
    194           *
    195           * @param   M[]         - Encrypted octet string 'm'
    196           * @param   Cstate[]    - The first Mval bytes contain Encrypted Authentication Tag U
    197           *
    198           * @return  ZStatus_t
    199           *
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          ZStatus_t SSP_CCM_Encrypt (uint8 Mval, uint8 *N, uint8 *M, uint16 len_m,
    202                                     uint8 *AesKey, uint8 *Cstate, uint8 ccmLVal)
    203          {
    204            return AES_SUCCESS;
   \                     SSP_CCM_Encrypt: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    205          }
    206          
    207          /******************************************************************************
    208           * @fn      SSP_CCM_Decrypt
    209           *
    210           * @brief   Performs CCM decryption.
    211           *
    212           * This is a deprecated function. Use SSP_CCM_InvAuth_Decrypt instead
    213           *
    214           * input parameters
    215           *
    216           * @param   Mval    - Length of authentication field in octets [0,2,4,6,8,10,12,14 or 16]
    217           * @param   N       - Pointer to 13-byte Nonce
    218           * @param   C       - Pointer to octet string 'c', where 'c' = encrypted 'm' || encrypted auth tag U
    219           * @param   len_c   - Length of C[] in octets
    220           * @param   AesKey  - Pointer to AES Key or Pointer to Key Expansion buffer.
    221           * @param   Cstate  - Pointer AES state buffer (cannot be part of C[])
    222           * @param   ccmLVal - ccm L Value to be used. 
    223           *
    224           * output parameters
    225           *
    226           * @param   C[]         - Decrypted octet string 'm' || auth tag T
    227           * @param   Cstate[]    - The first Mval bytes contain  Authentication Tag T
    228           *
    229           * @return  ZStatus_t
    230           *
    231           */

   \                                 In section .text, align 2, keep-with-next
    232          ZStatus_t SSP_CCM_Decrypt( uint8 Mval, uint8 *N, uint8 *C, uint16 len_c,
    233                                     uint8 *AesKey, uint8 *Cstate, uint8 ccmLVal )
    234          {
    235            return AES_SUCCESS;
   \                     SSP_CCM_Decrypt: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    236          }
    237          
    238          
    239          
    240          
    241          
    242          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   SSP_CCM_Auth_Encrypt
        48   -> CCMAuthEncryptCheckResult
        48   -> CCMAuthEncryptGetResult
        48   -> CCMAuthEncryptStart
       0   SSP_CCM_Decrypt
       0   SSP_CCM_Encrypt
      48   SSP_CCM_InvAuth_Decrypt
        48   -> CCMInvAuthDecryptCheckResult
        48   -> CCMInvAuthDecryptGetResult
        48   -> CCMInvAuthDecryptStart


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     102  SSP_CCM_Auth_Encrypt
       4  SSP_CCM_Decrypt
       4  SSP_CCM_Encrypt
     108  SSP_CCM_InvAuth_Decrypt

 
 218 bytes in section .text
 
 218 bytes of CODE memory

Errors: none
Warnings: none
