###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        12/Apr/2015  15:43:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c
#    Command line =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=YES
#        -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\WatchHW.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\WatchHW.o
#
###############################################################################

C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c
      1          /*
      2           *     program:  WatchHW.c
      3           *      Project: Zigbee Watch
      4           *     Version:  0.0.1 -- phase 1
      5           *   Copyright:  2014, Barron Associates
      6           *     Written:  Wednesday, March 18, 2015
      7           *      Author:  Tim Trudeau - Timware
      8           *   Processor:  TI CC2538
      9           *        Tool:  IAR Embedded Workbench
     10           *
     11           *-------------------------------------------------------------------
     12           *
     13           *******************************************************************/
     14          
     15          
     16          /* ------------------------------------------------------------------------------------------------
     17           *                                          Includes
     18           * ------------------------------------------------------------------------------------------------
     19           */
     20          #include "ZComDef.h"
     21          #include "Hal_drivers.h" 
     22          #include "hal_key.h" 
     23          #include "OSAL.h"
     24          #include "WatchApp.h"
     25          #include "MT.h"
     26          #include "MT_SYS.h"
     27          #include "DebugTrace.h"
     28          #include "mac_api.h"
     29          
     30          /* Hal */
     31          //#include "hal_lcd.h"
     32          #include "hal_mcu.h"
     33          //#if (defined OTA_CLIENT) && (OTA_CLIENT == TRUE)
     34          //#include "hal_ota.h"
     35          //#endif
     36          #include "hal_timer.h"
     37          //#include "hal_key.h"
     38          //#include "hal_led.h"
     39          
     40          /* Allow access macRandomByte() */
     41          #include "mac_radio_defs.h"
     42          
     43          /* ------------------------------------------------------------------------------------------------
     44           *                                           Constants
     45           * ------------------------------------------------------------------------------------------------
     46           */
     47          // Task ID not initialized
     48          #define NO_TASK_ID 0xFF
     49          
     50          // Minimum length RAM "pattern" for Stack check
     51          #define MIN_RAM_INIT 12
     52          
     53          
     54          /* ------------------------------------------------------------------------------------------------
     55           *                                           Global Variables
     56           * ------------------------------------------------------------------------------------------------
     57           */
     58          
     59          extern void HalUARTInit(void);
     60          void OnBoard_KeyCallback ( uint8 keys, uint8 state );
     61          

   \                                 In section .bss, align 1
     62          uint8 OnboardKeyIntEnable;
   \                     OnboardKeyIntEnable:
   \   00000000                      DS8 1
     63          // Registered keys task ID, initialized to NOT USED.

   \                                 In section .data, align 1
     64          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   00000000   0xFF               DC8 255
     65          
     66          // 64-bit Extended Address of this device

   \                                 In section .bss, align 4
     67          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   00000000                      DS8 8
     68          
     69          #if defined ZCL_KEY_ESTABLISH
     70          #include "ZGlobals.h"
     71          // Only include certificate data if we are building an initial OTA capable image
     72          // or an image not designed to be transferred via OTA or SBL.
     73          #if ( ((!defined OTA_CLIENT) && (!defined SBL_CLIENT)) || (defined OTA_INITIAL_IMAGE))
     74          #include "zcl_cert_data.c"
     75          #endif
     76          #endif
     77          
     78          //Used for handling button
     79          static uint8 halSavedKeys;
     80          static uint8 halIntKeys;

   \                                 In section .bss, align 4
     81          static halKeyCBack_t pHal_KeyProcessFunction;
   \                     pHal_KeyProcessFunction:
   \   00000000                      DS8 4
     82          
     83          /******************************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          
     87          
     88          // TODO These functions are left here as templates for whatever watch tasks are defined.
     89          /* TODO Determine if any of this is needed and what should be done to ready the watch */
     90          /**************************************************************************************************
     91           * @fn       InitWatch
     92           *
     93           * @brief    Initialize the Watch CC22538 Peripherals like IO. The Hal is set
     94                       to do polling of the button and make the callback.
     95           *
     96           * input parameters
     97           *
     98           * @param   none
     99           *
    100           * output parameters
    101           *
    102           * @param    None    
    103           *
    104           * @return  void
    105           **************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    106          void InitWatch( void)
    107          {
   \                     InitWatch: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    108             // Interrupts off
    109              osal_int_disable( INTS_ALL );
   \   00000002   0x20FF             MOVS     R0,#+255
   \   00000004   0x.... 0x....      BL       osal_int_disable
    110                /* Initialize NVIC Vector Table offset register */                     
    111              /* Initialize NVIC Vector Table offset register */                     
    112              HWREG(NVIC_VTABLE) = HAL_NVIC_ADDR;                                    
   \   00000008   0xF45F 0x1000      MOVS     R0,#+2097152
   \   0000000C   0x....             LDR.N    R1,??DataTable2  ;; 0xe000ed08
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    113                                                                                     
    114              /* Setup the System Clocks */                                          
    115              SysCtrlClockStartSetting();                                            
   \   00000010   0x.... 0x....      BL       SysCtrlClockStartSetting
    116                                                                                     
    117              /* Check if clock is stable */                                         
    118              HAL_CLOCK_STABLE();                                                    
   \                     ??InitWatch_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable2_1  ;; 0x400d2004
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0300             LSLS     R0,R0,#+12
   \   0000001A   0xD5FB             BPL.N    ??InitWatch_0
    119                                                                                     
    120              /* Turn on cache prefetch mode */                                      
    121              PREFETCH_ENABLE();                                                     
   \   0000001C   0x2008             MOVS     R0,#+8
   \   0000001E   0x....             LDR.N    R1,??DataTable2_2  ;; 0x400d3008
   \   00000020   0x6008             STR      R0,[R1, #+0]
    122                                                                                     
    123              /* Enable Alternate Interrupt Map */                                   
    124              IntAltMapEnable();                                                     
   \   00000022   0x.... 0x....      BL       IntAltMapEnable
    125                                                                                     
    126              /* Setup Deep Sleep settings for peripherals */                        
    127              SysCtrlDeepSleepSetting();                                             
   \   00000026   0x.... 0x....      BL       SysCtrlDeepSleepSetting
    128              /* Setup Sleep settings for peripherals */                             
    129              SysCtrlSleepSetting();                                                 
   \   0000002A   0x.... 0x....      BL       SysCtrlSleepSetting
    130              /* Setup Run settings for peripherals */                               
    131              SysCtrlRunSetting();                                                   
   \   0000002E   0x.... 0x....      BL       SysCtrlRunSetting
    132              /* Setup which peripherals can wake the system from sleep */           
    133              SysCtrlWakeupSetting();                                                
   \   00000032   0x.... 0x....      BL       SysCtrlWakeupSetting
    134                                                                                     
    135              /* Configure the leds as outputs */                                    
    136              GPIOPinTypeGPIOOutput(BSP_LED_BASE, BSP_LED_1);                        
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   0000003A   0x.... 0x....      BL       GPIOPinTypeGPIOOutput
    137              GPIOPinTypeGPIOOutput(BSP_LED_BASE, BSP_LED_2);                        
   \   0000003E   0x2102             MOVS     R1,#+2
   \   00000040   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   00000042   0x.... 0x....      BL       GPIOPinTypeGPIOOutput
    138              GPIOPinTypeGPIOOutput(BSP_LED_BASE, BSP_LED_3);                        
   \   00000046   0x2104             MOVS     R1,#+4
   \   00000048   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   0000004A   0x.... 0x....      BL       GPIOPinTypeGPIOOutput
    139              GPIOPinTypeGPIOOutput(BSP_LED_BASE, BSP_LED_4);                        
   \   0000004E   0x2108             MOVS     R1,#+8
   \   00000050   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   00000052   0x.... 0x....      BL       GPIOPinTypeGPIOOutput
    140                                                                                     
    141              /* reset does not affect GPIO state */                                 
    142              HAL_TURN_OFF_LED1();                                                   
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   0000005C   0x.... 0x....      BL       GPIOPinWrite
    143              HAL_TURN_OFF_LED2();                                                   
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0x2102             MOVS     R1,#+2
   \   00000064   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   00000066   0x.... 0x....      BL       GPIOPinWrite
    144              HAL_TURN_OFF_LED3();                                                   
   \   0000006A   0x2200             MOVS     R2,#+0
   \   0000006C   0x2104             MOVS     R1,#+4
   \   0000006E   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   00000070   0x.... 0x....      BL       GPIOPinWrite
    145              HAL_TURN_OFF_LED4();                                                   
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400db000
   \   0000007A   0x.... 0x....      BL       GPIOPinWrite
    146                                                                                     
    147              GPIOPinTypeGPIOOutput(BSP_LCD_PWR_BASE, BSP_LCD_PWR);  /* PWR output */
   \   0000007E   0x2110             MOVS     R1,#+16
   \   00000080   0x....             LDR.N    R0,??DataTable2_4  ;; 0x400da000
   \   00000082   0x.... 0x....      BL       GPIOPinTypeGPIOOutput
    148              GPIOPinWrite(BSP_LCD_PWR_BASE, BSP_LCD_PWR, 0);        /* low */       
   \   00000086   0x2200             MOVS     R2,#+0
   \   00000088   0x2110             MOVS     R1,#+16
   \   0000008A   0x....             LDR.N    R0,??DataTable2_4  ;; 0x400da000
   \   0000008C   0x.... 0x....      BL       GPIOPinWrite
    149              GPIOPinTypeGPIOInput(BSP_LCD_CS_BASE, BSP_LCD_CS); /*CSn input no drive*/
   \   00000090   0x2120             MOVS     R1,#+32
   \   00000092   0x....             LDR.N    R0,??DataTable2_4  ;; 0x400da000
   \   00000094   0x.... 0x....      BL       GPIOPinTypeGPIOInput
    150                                                                                     
    151              HAL_BOARD_RF_FRONTEND_SETUP();                                         
    152          
    153              HalUARTInit();
   \   00000098   0x.... 0x....      BL       HalUARTInit
    154              /* Initialize Key stuff */
    155              bspKeyInit(BSP_KEY_MODE_POLL);
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       bspKeyInit
    156              
    157              /* Start polling if callback function is setup*/
    158              osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   000000A2   0x2110             MOVS     R1,#+16
   \   000000A4   0x....             LDR.N    R0,??DataTable2_5
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x.... 0x....      BL       osal_set_event
    159          }
   \   000000AC   0xBD01             POP      {R0,PC}          ;; return
    160          
    161          /******************************************************************************
    162           * Button Register function
    163           *
    164           * The Button handler is setup to send all keyboard changes to
    165           * one task (if a task is registered). 
    166           *
    167           * If a task registers, it will get all button events. 
    168           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          uint8 RegisterForKeys( uint8 task_id )
    170          {
   \                     RegisterForKeys: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    171            // Allow only the one task is registed since watch has only one button 
    172            if ( registeredKeysTaskID == NO_TASK_ID )
   \   00000002   0x....             LDR.N    R1,??DataTable2_6
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x29FF             CMP      R1,#+255
   \   00000008   0xD116             BNE.N    ??RegisterForKeys_0
    173            {
    174              registeredKeysTaskID = task_id;
   \   0000000A   0x....             LDR.N    R1,??DataTable2_6
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    175              Hal_KeyIntEnable = FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR.N    R1,??DataTable2_7
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    176              bspKeyInit(BSP_KEY_MODE_POLL); 
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       bspKeyInit
    177             
    178              if( OnBoard_KeyCallback != NULL)  // OnBoard_KeyCallback is a pointer to function
                         ^
Warning[Pa131]: this is a function pointer constant. Did you intend a function
          call?

  static uint8 halSavedKeys;
               ^
"C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c",79  Warning[Pe177]: 
          variable "halSavedKeys" was declared but never referenced

  static uint8 halIntKeys;
               ^
"C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c",80  Warning[Pe177]: 
          variable "halIntKeys" was declared but never referenced

  static halKeyCBack_t pHal_KeyProcessFunction;
                       ^
"C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WatchHW.c",81  Warning[Pe550]: 
          variable "pHal_KeyProcessFunction" was set but never used
   \   0000001A   0x.... 0x....      ADR.W    R0,OnBoard_KeyCallback
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD008             BEQ.N    ??RegisterForKeys_1
    179              {
    180                /* Register the callback fucntion */
    181                pHal_KeyProcessFunction = OnBoard_KeyCallback;  
   \   00000022   0x.... 0x....      ADR.W    R0,OnBoard_KeyCallback
   \   00000026   0x....             LDR.N    R1,??DataTable2_8
   \   00000028   0x6008             STR      R0,[R1, #+0]
    182                /* Start polling if callback function is setup*/
    183                osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
   \   0000002A   0x2110             MOVS     R1,#+16
   \   0000002C   0x....             LDR.N    R0,??DataTable2_5
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       osal_set_event
    184              }
    185              return ( true );
   \                     ??RegisterForKeys_1: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE000             B.N      ??RegisterForKeys_2
    186            }
    187            else
    188            {
    189              return ( false );
   \                     ??RegisterForKeys_0: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \                     ??RegisterForKeys_2: (+1)
   \   0000003A   0xBD02             POP      {R1,PC}          ;; return
    190            }
    191          }
    192          
    193          /******************************************************************************
    194           * @fn      OnBoard_SendKeys
    195           *
    196           * @brief   Send "Button Pressed" message to application.
    197           *
    198           * @param   keys  - keys that were pressed
    199           *          state - shifted
    200           *
    201           * @return  status
    202           ******************************************************************************/
    203          

   \                                 In section .text, align 2, keep-with-next
    204          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
    205          {
   \                     OnBoard_SendKeys: (+1)
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    206            uint8 keystate = state;
   \   00000004   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    207            uint8 *msgPtr = &keystate;
   \   0000000C   0xA900             ADD      R1,SP,#+0
    208          
    209            if ( registeredKeysTaskID != NO_TASK_ID ) {
   \   0000000E   0x....             LDR.N    R0,??DataTable2_6
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xD006             BEQ.N    ??OnBoard_SendKeys_0
    210              // Send the address to the task
    211              msgPtr = &state;
   \   00000016   0xA902             ADD      R1,SP,#+8
    212              osal_msg_send( registeredKeysTaskID, msgPtr );
   \   00000018   0x....             LDR.N    R0,??DataTable2_6
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       osal_msg_send
    213              return ( ZSuccess );
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??OnBoard_SendKeys_1
    214            } else {
    215              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0: (+1)
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??OnBoard_SendKeys_1: (+1)
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
    216            }
    217          }
    218          
    219          /******************************************************************************
    220           * @fn      OnBoard_KeyCallback
    221           *
    222           * @brief   Callback service for keys
    223           *
    224           * @param   keys  - keys that were pressed
    225           *          state - shifted
    226           *
    227           * @return  void
    228           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    229          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
    230          {
   \                     OnBoard_KeyCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    231            (void)state;
    232            uint8 shift = false;
   \   00000002   0x2100             MOVS     R1,#+0
    233          
    234            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess ) { //ZSuccess is active low
   \   00000004   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       OnBoard_SendKeys
    235              //Buttom message has been sent to coordinator. Now what?
    236            }else{
    237             //Message was not sent. Now What?
    238            }
    239          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    240          
    241          /******************************************************************************
    242           * @fn      _itoa
    243           *
    244           * @brief   convert a 16bit number to ASCII
    245           *
    246           * @param   num -
    247           *          buf -
    248           *          radix -
    249           *
    250           * @return  void
    251           *
    252           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    253          void _itoa(uint16 num, uint8 *buf, uint8 radix)
    254          {
   \                     _itoa: (+1)
   \   00000000   0xB47C             PUSH     {R2-R6}
    255            char c,i;
    256            uint8 *p, rst[5];
    257          
    258            p = rst;
   \   00000002   0xAD00             ADD      R5,SP,#+0
    259            for ( i=0; i<5; i++,p++ )
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0xE001             B.N      ??_itoa_0
   \                     ??_itoa_1: (+1)
   \   00000008   0x1C64             ADDS     R4,R4,#+1
   \   0000000A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??_itoa_0: (+1)
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C05             CMP      R4,#+5
   \   00000010   0xDA14             BGE.N    ??_itoa_2
    260            {
    261              c = num % radix;  // Isolate a digit
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0xFB90 0xF3F2      SDIV     R3,R0,R2
   \   0000001A   0xFB02 0x0313      MLS      R3,R2,R3,R0
    262              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   0000001E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000020   0x2B0A             CMP      R3,#+10
   \   00000022   0xDA01             BGE.N    ??_itoa_3
   \   00000024   0x2630             MOVS     R6,#+48
   \   00000026   0xE000             B.N      ??_itoa_4
   \                     ??_itoa_3: (+1)
   \   00000028   0x2637             MOVS     R6,#+55
   \                     ??_itoa_4: (+1)
   \   0000002A   0x18F3             ADDS     R3,R6,R3
   \   0000002C   0x702B             STRB     R3,[R5, #+0]
    263              num /= radix;
   \   0000002E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000030   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000032   0xFB90 0xF0F2      SDIV     R0,R0,R2
    264              if ( !num )
   \   00000036   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E5             BNE.N    ??_itoa_1
    265              {
    266                break;
    267              }
    268            }
    269          
    270            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_2: (+1)
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0xE004             B.N      ??_itoa_5
    271            {
    272              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_6: (+1)
   \   00000040   0x7828             LDRB     R0,[R5, #+0]
   \   00000042   0x7008             STRB     R0,[R1, #+0]
   \   00000044   0x1E6D             SUBS     R5,R5,#+1
   \   00000046   0x1C49             ADDS     R1,R1,#+1
    273            }
   \   00000048   0x1C5B             ADDS     R3,R3,#+1
   \                     ??_itoa_5: (+1)
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000004E   0x429C             CMP      R4,R3
   \   00000050   0xD2F6             BCS.N    ??_itoa_6
    274          
    275            *buf = '\0';
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x7008             STRB     R0,[R1, #+0]
    276          }
   \   00000056   0xBC73             POP      {R0,R1,R4-R6}
   \   00000058   0x4770             BX       LR               ;; return
    277          /******************************************************************************
    278           * @fn        Onboard_rand
    279           *
    280           * @brief    Random number generator
    281           *
    282           * @param   none
    283           *
    284           * @return  uint16 - new random number
    285           *
    286           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    287          uint16 Onboard_rand( void )
    288          {
   \                     Onboard_rand: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    289             return ( MAC_RADIO_RANDOM_WORD() );
   \   00000002   0x.... 0x....      BL       macMcuRandomWord
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    290          }
    291          
    292          /******************************************************************************
    293           *                     DEV BOARD EXTERNAL I/O FUNCTIONS
    294           *
    295           * User defined functions to control external devices. Add your code
    296           * to the following functions to control devices wired to DB outputs.
    297           *
    298           * NOTE - These functions MUST be left here as is if code is running on DEV board
    299           ******************************************************************************/
    300          

   \                                 In section .text, align 2, keep-with-next
    301          void BigLight_On( void )
    302          {
    303            // Put code here to turn on an external light
    304          }
   \                     BigLight_On: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    305          

   \                                 In section .text, align 2, keep-with-next
    306          void BigLight_Off( void )
    307          {
    308            // Put code here to turn off an external light
    309          }
   \                     BigLight_Off: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    310          

   \                                 In section .text, align 2, keep-with-next
    311          void BuzzerControl( uint8 on )
    312          {
    313            // Put code here to turn a buzzer on/off
    314            (void)on;
    315          }
   \                     BuzzerControl: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    316          

   \                                 In section .text, align 2, keep-with-next
    317          void Dimmer( uint8 lvl )
    318          {
    319            // Put code here to control a dimmer
    320            (void)lvl;
    321          }
   \                     Dimmer: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    322          
    323          // No dip switches on this board

   \                                 In section .text, align 2, keep-with-next
    324          uint8 GetUserDipSw( void )
    325          {
    326            return 0;
   \                     GetUserDipSw: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    327          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x400D2004         DC32     0x400d2004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x400D3008         DC32     0x400d3008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x400DB000         DC32     0x400db000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x400DA000         DC32     0x400da000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     Hal_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     registeredKeysTaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     Hal_KeyIntEnable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     pHal_KeyProcessFunction
    328          
    329          /******************************************************************************
    330           */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BigLight_Off
       0   BigLight_On
       0   BuzzerControl
       0   Dimmer
       0   GetUserDipSw
       8   InitWatch
         8   -> GPIOPinTypeGPIOInput
         8   -> GPIOPinTypeGPIOOutput
         8   -> GPIOPinWrite
         8   -> HalUARTInit
         8   -> IntAltMapEnable
         8   -> SysCtrlClockStartSetting
         8   -> SysCtrlDeepSleepSetting
         8   -> SysCtrlRunSetting
         8   -> SysCtrlSleepSetting
         8   -> SysCtrlWakeupSetting
         8   -> bspKeyInit
         8   -> osal_int_disable
         8   -> osal_set_event
       8   OnBoard_KeyCallback
         8   -> OnBoard_SendKeys
      16   OnBoard_SendKeys
        16   -> osal_msg_send
       8   Onboard_rand
         8   -> macMcuRandomWord
       8   RegisterForKeys
         8   -> bspKeyInit
         8   -> osal_set_event
      20   _itoa


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       2  BigLight_Off
       2  BigLight_On
       2  BuzzerControl
       2  Dimmer
       4  GetUserDipSw
     174  InitWatch
      14  OnBoard_KeyCallback
      40  OnBoard_SendKeys
       1  OnboardKeyIntEnable
       8  Onboard_rand
      60  RegisterForKeys
      90  _itoa
       8  aExtendedAddress
       4  pHal_KeyProcessFunction
       1  registeredKeysTaskID

 
  13 bytes in section .bss
   1 byte  in section .data
 434 bytes in section .text
 
 434 bytes of CODE memory
  14 bytes of DATA memory

Errors: none
Warnings: 4
