###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        12/Apr/2015  15:43:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\MainApplication.c
#    Command line =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\MainApplication.c -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=YES
#        -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1 --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\List\MainApplication.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\Debug\Obj\MainApplication.o
#
###############################################################################

C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\MainApplication.c
      1            /*
      2            *     program:  application.c
      3            *      Project: Zigbee Watch
      4            *     Version:  0.0.1 -- phase 1
      5            *   Copyright:  2014, Barron Associates
      6            *     Written:  Sunday, March 15, 2015
      7            *          By:  Tim Trudeau - Timware
      8            *   Processor:  TI CC2538
      9            *        Tool:  IAR Embedded Workbench
     10            *
     11            *-------------------------------------------------------------------
     12            This source file contains the MAIN function.
     13            This is where all the ZSTACK and Watch hardware initilization calls are performed.
     14            This application uses a proprietary profile and runs on a nonbeaconing sleepy end device.
     15            After initilization  osal_start_system() is called to start the OS task handler.
     16            This function call does not return.
     17            *******************************************************************/
     18           
     19           
     20           /* ------------------------------------------------------------------------------------------------
     21            *                                          Includes
     22            * ------------------------------------------------------------------------------------------------
     23            */
     24          #include "ZComDef.h"
     25          #include "OSAL.h"
     26          #include "OSAL_Nv.h"
     27          
     28          #include "AF.h"
     29          #include "ZDApp.h"
     30          #include "ZDObject.h"
     31          #include "ZDProfile.h"
     32          #include "DebugTrace.h"
     33          
     34          #include "MT.h"
     35          #include "MT_SYS.h"
     36          #include "MT_UART.h"
     37          #include "MT_UTIL.h"
     38          
     39          #include "hal_drivers.h"
     40          #include "hal_lcd.h"
     41          #include "hal_led.h"
     42          #include "hal_key.h"
     43          #include "hal_uart.h"
     44          #include "hal_systick.h"
     45          #include "OSAL_PwrMgr.h"
     46          
     47          #include "hal_board_cfg.h"
     48          #include "mac_radio_defs.h"
     49          
     50          #include "WatchApp.h"
     51          
     52           /* ------------------------------------------------------------------------------------------------
     53            *                                           Constants
     54            * ------------------------------------------------------------------------------------------------
     55            */
     56          // TI IEEE Organizational Unique Identifier
     57          #define IEEE_OUI 0x00124B
     58          
     59          // This list should be filled with Application specific Cluster IDs.

   \                                 In section .rodata, align 2
     60          const cId_t WatchApp_ClusterList[WATCHAPP_MAX_CLUSTERS] =
   \                     WatchApp_ClusterList:
   \   00000000   0x0001             DC16 1
     61          {
     62            WATCHAPP_CLUSTERID
     63          };
     64          
     65          

   \                                 In section .rodata, align 4
     66          const SimpleDescriptionFormat_t       WatchApp_SimpleDesc =
   \                     WatchApp_SimpleDesc:
   \   00000000   0x01 0x00          DC8 1, 0
   \   00000002   0x0F04 0x0001      DC16 3844, 1
   \   00000006   0x00 0x01          DC8 0, 1
   \   00000008   0x........         DC32 WatchApp_ClusterList
   \   0000000C   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   00000010   0x........         DC32 WatchApp_ClusterList
     67          {
     68            WATCHAPP_ENDPOINT,              //  int Endpoint;
     69            WATCHAPP_PROFID,                //  uint16 AppProfId[2];
     70            WATCHAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     71            WATCHAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     72            WATCHAPP_FLAGS,                 //  int   AppFlags:4;
     73            WATCHAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     74            (cId_t *)WatchApp_ClusterList,  //  byte *pAppInClusterList;
     75            WATCHAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     76            (cId_t *)WatchApp_ClusterList   //  byte *pAppInClusterList;
     77          };
     78          
     79           /* ------------------------------------------------------------------------------------------------
     80            *                                           Functions Declarations
     81            * ------------------------------------------------------------------------------------------------
     82            */
     83          extern void InitBoard( uint8 level );
     84          extern void HalUARTInitIsr(void);
     85          extern void InitWatch( void);
     86          static void zmain_ext_addr( void );      
     87          static void WatchApp_SendTheMessage( void );
     88          static void WatchApp_HandleKeys( byte shift, byte keys );
     89          static void WatchApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     90          extern void WatchApp_ProcessUARTMsgs(UARTMsg_t *pckt );
     91          extern void WatchApp_ProcessZDOMsgs( zdoIncomingMsg_t  *pckt );
     92          
     93          
     94          
     95           /* ------------------------------------------------------------------------------------------------
     96            *                                           Global Variables
     97            * ------------------------------------------------------------------------------------------------
     98            */
     99          
    100          // This is the Endpoint/Interface description.  It is defined here, but
    101          // filled-in in WatchApp_Init().  Another way to go would be to fill
    102          // in the structure here and make it a "const" (in code space).  The
    103          // way it's defined in this sample app it is define in RAM.

   \                                 In section .bss, align 4
    104          endPointDesc_t WatchApp_epDesc;
   \                     WatchApp_epDesc:
   \   00000000                      DS8 16
    105          
    106           /* ------------------------------------------------------------------------------------------------
    107             LOCAL VARIABLES
    108            * ------------------------------------------------------------------------------------------------
    109           */

   \                                 In section .bss, align 1
    110          byte WatchApp_TaskID;   // Task ID for internal task/event processing
   \                     WatchApp_TaskID:
   \   00000000                      DS8 1
    111                                    // This variable will be received when
    112                                    // WatchApp_Init() is called.
    113          

   \                                 In section .bss, align 1
    114          devStates_t WatchApp_NwkState;
   \                     WatchApp_NwkState:
   \   00000000                      DS8 1
    115          

   \                                 In section .bss, align 1
    116          byte WatchApp_TransID;  // This is the unique message ID (counter)
   \                     WatchApp_TransID:
   \   00000000                      DS8 1
    117          

   \                                 In section .bss, align 4
    118          afAddrType_t WatchApp_DstAddr;
   \                     WatchApp_DstAddr:
   \   00000000                      DS8 12
    119          
    120          // Number of recieved messages

   \                                 In section .bss, align 2
    121          static uint16 rxMsgCount;
   \                     rxMsgCount:
   \   00000000                      DS8 2
    122          
    123          // Time interval between sending messages

   \                                 In section .data, align 4
    124          static uint32 txMsgDelay = WATCHAPP_SEND_MSG_TIMEOUT;
   \                     txMsgDelay:
   \   00000000   0x00001388         DC32 5000
    125          
    126            /*****************************************************************************
    127             * @fn          main
    128             *
    129             * @brief    This function initializes the ZSTACK layers
    130             *
    131             * Input Parameters 
    132             *
    133             * @param     None
    134             *
    135             * Output Parameters
    136             *
    137             * @param     None
    138             *
    139             * @return    Exit int
    140             ****************************************************************************/
    141           

   \                                 In section .text, align 2, keep-with-next
    142          int main( void )
    143          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144          uint8 stat;
                       ^
Warning[Pe550]: variable "stat" was set but never used
    145            
    146            // Turn off interrupts
    147            osal_int_disable( INTS_ALL );
   \   00000002   0x20FF             MOVS     R0,#+255
   \   00000004   0x.... 0x....      BL       osal_int_disable
    148          
    149            // Initialization for radio, LEDs & UART
    150            InitWatch();
   \   00000008   0x.... 0x....      BL       InitWatch
    151          
    152            // Initialze HAL drivers
    153            HalDriverInit();
   \   0000000C   0x.... 0x....      BL       HalDriverInit
    154          
    155            // Initialize NV System
    156            osal_nv_init( NULL );
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       osal_nv_init
    157          
    158            // Initialize the MAC --This is correct
    159            MAC_Init();
   \   00000016   0x.... 0x....      BL       MAC_Init
    160            MAC_InitDevice();
   \   0000001A   0x.... 0x....      BL       MAC_InitDevice
    161            stat = ZMacReset( TRUE );
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       ZMacReset
    162          
    163            // Determine the extended address
    164            zmain_ext_addr();
   \   00000024   0x.... 0x....      BL       zmain_ext_addr
    165          
    166          #if defined ZCL_KEY_ESTABLISH
    167            // Initialize the Certicom certificate information.
    168            zmain_cert_init();
    169          #endif
    170          
    171            // Initialize basic NV items
    172            zgInit();
   \   00000028   0x.... 0x....      BL       zgInit
    173           
    174            // Since the AF isn't a task, call it's initialization routine
    175            afInit();
    176          
    177             // Initialize the operating system
    178            osal_init_system();
   \   0000002C   0x.... 0x....      BL       osal_init_system
    179          
    180            // Allow interrupts
    181            osal_int_enable( INTS_ALL );
   \   00000030   0x20FF             MOVS     R0,#+255
   \   00000032   0x.... 0x....      BL       osal_int_enable
    182          
    183             SysTickSetup();
   \   00000036   0x.... 0x....      BL       SysTickSetup
    184             
    185            HAL_TURN_ON_LED1();
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable7  ;; 0x400db000
   \   00000042   0x.... 0x....      BL       GPIOPinWrite
    186            osal_start_system(); // No Return from here
   \   00000046   0x.... 0x....      BL       osal_start_system
    187          
    188            return 0;  // Shouldn't get here.
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xBD02             POP      {R1,PC}          ;; return
    189          } // END main()
    190          
    191          /*********************************************************************
    192           * @fn      WatchApp_Init
    193           *
    194           * @brief   Initialization function for the App Task.
    195           *          This is called during initialization and should contain
    196           *          any application specific initialization (ie. hardware
    197           *          initialization/setup, table initialization, power up
    198           *          notificaiton ... ).
    199           *
    200           * @param   task_id - the ID assigned by OSAL.  This ID should be
    201           *                    used to send messages and set timers.
    202           *
    203           * @return  none
    204             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    205          void WatchApp_Init( uint8 task_id )
    206          {
   \                     WatchApp_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    207            uint8 WatchApp_TaskID = task_id;
   \   00000002   0xF88D 0x0000      STRB     R0,[SP, #+0]
    208            uint8 WatchApp_NwkState = DEV_INIT;
                         ^
Warning[Pe177]: variable "WatchApp_NwkState" was declared but never referenced
   \   00000006   0x2001             MOVS     R0,#+1
    209            uint8 WatchApp_TransID = 0;
                         ^
Warning[Pe177]: variable "WatchApp_TransID" was declared but never referenced
   \   00000008   0x2000             MOVS     R0,#+0
    210          
    211            // Device hardware initialization can be added here or in main() (Zmain.c).
    212            // If the hardware is application specific - add it here.
    213            // If the hardware is other parts of the device add it in main().
    214          
    215            WatchApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000010   0x7208             STRB     R0,[R1, #+8]
    216            WatchApp_DstAddr.endPoint = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000018   0x7248             STRB     R0,[R1, #+9]
    217            WatchApp_DstAddr.addr.shortAddr = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    218          
    219            // Fill out the endpoint description.
    220            WatchApp_epDesc.endPoint = WATCHAPP_ENDPOINT;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    221            WatchApp_epDesc.task_id = &WatchApp_TaskID;
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000030   0x6048             STR      R0,[R1, #+4]
    222            WatchApp_epDesc.simpleDesc
    223                      = (SimpleDescriptionFormat_t *)&WatchApp_SimpleDesc;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable7_3
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   0000003A   0x6088             STR      R0,[R1, #+8]
    224            WatchApp_epDesc.latencyReq = noLatencyReqs;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000042   0x7308             STRB     R0,[R1, #+12]
    225          
    226            // Register the endpoint description with the AF
    227            afRegister( &WatchApp_epDesc );
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable7_2
   \   00000048   0x.... 0x....      BL       afRegister
    228          
    229            // Register for all key events - The app will handle all key events
    230            RegisterForKeys( WatchApp_TaskID );
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x.... 0x....      BL       RegisterForKeys
    231          
    232            // Update the display
    233          #if defined ( LCD_SUPPORTED )
    234            HalLcdWriteString( "WatchApp", HAL_LCD_LINE_5 );
   \   00000054   0x2105             MOVS     R1,#+5
   \   00000056   0x.... 0x....      LDR.W    R0,??DataTable7_4
   \   0000005A   0x.... 0x....      BL       HalLcdWriteString
    235          #endif
    236          
    237            ZDO_RegisterForZDOMsg( WatchApp_TaskID, End_Device_Bind_rsp );
   \   0000005E   0xF248 0x0120      MOVW     R1,#+32800
   \   00000062   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000066   0x.... 0x....      BL       ZDO_RegisterForZDOMsg
    238            ZDO_RegisterForZDOMsg( WatchApp_TaskID, Match_Desc_rsp );
   \   0000006A   0xF248 0x0106      MOVW     R1,#+32774
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0x.... 0x....      BL       ZDO_RegisterForZDOMsg
    239          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    240          
    241          /*********************************************************************
    242           * @fn      WatchApp_ProcessEvent
    243           *
    244           * @brief   Application Task event processor.  This function
    245           *          is called to process all events for WatchApp_TaskID.  Events
    246           *          include timers, messages and any other user defined events.
    247           *
    248           * @param   task_id  - The OSAL assigned task ID.
    249           * @param   events - events to process.  This is a bit map and can
    250           *                   contain more than one event.
    251           *
    252           * @return  none
    253             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          uint16 WatchApp_ProcessEvent( uint8 task_id, uint16 events )
    255          {
   \                     WatchApp_ProcessEvent: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
    256            afIncomingMSGPacket_t *MSGpkt;
    257            afDataConfirm_t *afDataConfirm;
    258          
    259            // Data Confirmation message fields
    260            byte sentEP;
    261            ZStatus_t sentStatus;
    262            byte sentTransID;       // This should match the value sent
    263            (void)task_id;  // Intentionally unreferenced parameter
    264          
    265            if ( events & SYS_EVENT_MSG ) { //Look for System Event first
   \   00000004   0x0420             LSLS     R0,R4,#+16
   \   00000006   0xD547             BPL.N    ??WatchApp_ProcessEvent_0
    266              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( WatchApp_TaskID );
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       osal_msg_receive
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0xE008             B.N      ??WatchApp_ProcessEvent_1
    267              while ( MSGpkt )
    268              {
    269                switch ( MSGpkt->hdr.event ) {
    270                  case WATCHAPP_UART_MESSAGE:
    271                    WatchApp_ProcessUARTMsgs((UARTMsg_t *)MSGpkt );
    272                    break;
    273          
    274                  case ZDO_CB_MSG:
    275                    WatchApp_ProcessZDOMsgs((zdoIncomingMsg_t *)MSGpkt );
    276                    break;
    277          
    278                  case KEY_CHANGE:
    279                    WatchApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    280                    break;
    281          
    282                  case AF_DATA_CONFIRM_CMD:
    283                    // This message is received as a confirmation of a data packet sent.
    284                    // The status is of ZStatus_t type [defined in ZComDef.h]
    285                    // The message fields are defined in AF.h
    286                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    287          
    288                    sentEP = afDataConfirm->endpoint;
    289                    (void)sentEP;  // This info not used now
    290                    sentTransID = afDataConfirm->transID;
    291                    (void)sentTransID;  // This info not used now
    292          
    293                    sentStatus = afDataConfirm->hdr.status;
    294                    // Action taken when confirmation is received.
    295                    if ( sentStatus != ZSuccess ) {
    296                      // The data wasn't delivered -- Do something
    297                    }
    298                    break;
    299          
    300                  case AF_INCOMING_MSG_CMD:
    301                    WatchApp_MessageMSGCB( MSGpkt );
    302                    break;
    303          
    304                  case ZDO_STATE_CHANGE:
    305                    WatchApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    306                    if ( WatchApp_NwkState == DEV_END_DEVICE ) {
    307                      // Start sending "the" message in a regular interval.
    308                       osal_start_reload_timer( WatchApp_TaskID,
    309                                          WATCHAPP_SEND_MSG_EVT,
    310                                          txMsgDelay );
    311                    }
    312                    break;
    313          
    314                  default:
    315                    break;
    316                }
    317          
    318                // Release the memory
    319                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??WatchApp_ProcessEvent_2: (+1)
   \                     ??WatchApp_ProcessEvent_3: (+1)
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       osal_msg_deallocate
    320          
    321                // Next
    322                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( WatchApp_TaskID );
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable7_5
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       osal_msg_receive
   \   00000026   0x0005             MOVS     R5,R0
   \                     ??WatchApp_ProcessEvent_1: (+1)
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD031             BEQ.N    ??WatchApp_ProcessEvent_4
   \   0000002C   0x7828             LDRB     R0,[R5, #+0]
   \   0000002E   0x281A             CMP      R0,#+26
   \   00000030   0xD01B             BEQ.N    ??WatchApp_ProcessEvent_5
   \   00000032   0x2820             CMP      R0,#+32
   \   00000034   0xD008             BEQ.N    ??WatchApp_ProcessEvent_6
   \   00000036   0x28C0             CMP      R0,#+192
   \   00000038   0xD00E             BEQ.N    ??WatchApp_ProcessEvent_7
   \   0000003A   0x28D1             CMP      R0,#+209
   \   0000003C   0xD019             BEQ.N    ??WatchApp_ProcessEvent_8
   \   0000003E   0x28D3             CMP      R0,#+211
   \   00000040   0xD006             BEQ.N    ??WatchApp_ProcessEvent_9
   \   00000042   0x28FD             CMP      R0,#+253
   \   00000044   0xD00D             BEQ.N    ??WatchApp_ProcessEvent_10
   \   00000046   0xE7E6             B.N      ??WatchApp_ProcessEvent_2
   \                     ??WatchApp_ProcessEvent_6: (+1)
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       WatchApp_ProcessUARTMsgs
   \   0000004E   0xE7E2             B.N      ??WatchApp_ProcessEvent_3
   \                     ??WatchApp_ProcessEvent_9: (+1)
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0x.... 0x....      BL       WatchApp_ProcessZDOMsgs
   \   00000056   0xE7DE             B.N      ??WatchApp_ProcessEvent_3
   \                     ??WatchApp_ProcessEvent_7: (+1)
   \   00000058   0x78E9             LDRB     R1,[R5, #+3]
   \   0000005A   0x78A8             LDRB     R0,[R5, #+2]
   \   0000005C   0x.... 0x....      BL       WatchApp_HandleKeys
   \   00000060   0xE7D9             B.N      ??WatchApp_ProcessEvent_3
   \                     ??WatchApp_ProcessEvent_10: (+1)
   \   00000062   0x78A8             LDRB     R0,[R5, #+2]
   \   00000064   0x78E8             LDRB     R0,[R5, #+3]
   \   00000066   0x7868             LDRB     R0,[R5, #+1]
   \   00000068   0xE7D5             B.N      ??WatchApp_ProcessEvent_3
   \                     ??WatchApp_ProcessEvent_5: (+1)
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       WatchApp_MessageMSGCB
   \   00000070   0xE7D1             B.N      ??WatchApp_ProcessEvent_3
   \                     ??WatchApp_ProcessEvent_8: (+1)
   \   00000072   0x7868             LDRB     R0,[R5, #+1]
   \   00000074   0x....             LDR.N    R1,??DataTable7_6
   \   00000076   0x7008             STRB     R0,[R1, #+0]
   \   00000078   0x....             LDR.N    R0,??DataTable7_6
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2806             CMP      R0,#+6
   \   0000007E   0xD106             BNE.N    ??WatchApp_ProcessEvent_11
   \   00000080   0x....             LDR.N    R0,??DataTable7_7
   \   00000082   0x6802             LDR      R2,[R0, #+0]
   \   00000084   0x2101             MOVS     R1,#+1
   \   00000086   0x....             LDR.N    R0,??DataTable7_5
   \   00000088   0x7800             LDRB     R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       osal_start_reload_timer
   \                     ??WatchApp_ProcessEvent_11: (+1)
   \   0000008E   0xE7C2             B.N      ??WatchApp_ProcessEvent_3
    323              }
    324          
    325              // return unprocessed events
    326              return (events ^ SYS_EVENT_MSG);
   \                     ??WatchApp_ProcessEvent_4: (+1)
   \   00000090   0xF494 0x4000      EORS     R0,R4,#0x8000
   \   00000094   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000096   0xE02E             B.N      ??WatchApp_ProcessEvent_12
    327            }
    328          //----------  Non System Messages do not have Message Packets -----------------
    329            if ( events & WATCHAPP_SEND_MSG_EVT ) {
   \                     ??WatchApp_ProcessEvent_0: (+1)
   \   00000098   0x07E0             LSLS     R0,R4,#+31
   \   0000009A   0xD505             BPL.N    ??WatchApp_ProcessEvent_13
    330            // Send "I'M Awake" message - This event is generated by a timer
    331            //  (setup in WatchApp_Init()).
    332              WatchApp_SendTheMessage();
   \   0000009C   0x.... 0x....      BL       WatchApp_SendTheMessage
    333              return (events ^ WATCHAPP_SEND_MSG_EVT);
   \   000000A0   0xF094 0x0001      EORS     R0,R4,#0x1
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0xE026             B.N      ??WatchApp_ProcessEvent_12
    334            }
    335          
    336            if ( events & WATCHAPP_FALL_ALARM ) {
   \                     ??WatchApp_ProcessEvent_13: (+1)
   \   000000A8   0x07A0             LSLS     R0,R4,#+30
   \   000000AA   0xD503             BPL.N    ??WatchApp_ProcessEvent_14
    337              return (events ^ WATCHAPP_FALL_ALARM);
   \   000000AC   0xF094 0x0002      EORS     R0,R4,#0x2
   \   000000B0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000B2   0xE020             B.N      ??WatchApp_ProcessEvent_12
    338            }
    339          
    340            if ( events & WATCHAPP_LCD_UPDATE ) {
   \                     ??WatchApp_ProcessEvent_14: (+1)
   \   000000B4   0x0760             LSLS     R0,R4,#+29
   \   000000B6   0xD503             BPL.N    ??WatchApp_ProcessEvent_15
    341              return (events ^ WATCHAPP_LCD_UPDATE);
   \   000000B8   0xF094 0x0004      EORS     R0,R4,#0x4
   \   000000BC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BE   0xE01A             B.N      ??WatchApp_ProcessEvent_12
    342            }
    343          
    344            if ( events & WATCHAPP_TIMER1 ) {
   \                     ??WatchApp_ProcessEvent_15: (+1)
   \   000000C0   0x0660             LSLS     R0,R4,#+25
   \   000000C2   0xD50A             BPL.N    ??WatchApp_ProcessEvent_16
    345               osal_start_timerEx(*(WatchApp_epDesc.task_id), WATCHAPP_TIMER1, 1);
   \   000000C4   0x2201             MOVS     R2,#+1
   \   000000C6   0x2140             MOVS     R1,#+64
   \   000000C8   0x....             LDR.N    R0,??DataTable7_2
   \   000000CA   0x6840             LDR      R0,[R0, #+4]
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x.... 0x....      BL       osal_start_timerEx
    346              return (events ^ WATCHAPP_TIMER1);
   \   000000D2   0xF094 0x0040      EORS     R0,R4,#0x40
   \   000000D6   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D8   0xE00D             B.N      ??WatchApp_ProcessEvent_12
    347            }
    348          
    349            if ( events & WATCHAPP_TIMER2 ) {
   \                     ??WatchApp_ProcessEvent_16: (+1)
   \   000000DA   0x0620             LSLS     R0,R4,#+24
   \   000000DC   0xD50A             BPL.N    ??WatchApp_ProcessEvent_17
    350                osal_start_timerEx(*(WatchApp_epDesc.task_id), WATCHAPP_TIMER2, 1);
   \   000000DE   0x2201             MOVS     R2,#+1
   \   000000E0   0x2180             MOVS     R1,#+128
   \   000000E2   0x....             LDR.N    R0,??DataTable7_2
   \   000000E4   0x6840             LDR      R0,[R0, #+4]
   \   000000E6   0x7800             LDRB     R0,[R0, #+0]
   \   000000E8   0x.... 0x....      BL       osal_start_timerEx
    351              return (events ^ WATCHAPP_TIMER2);
   \   000000EC   0xF094 0x0080      EORS     R0,R4,#0x80
   \   000000F0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000F2   0xE000             B.N      ??WatchApp_ProcessEvent_12
    352            }
    353            // Discard unknown events
    354            return 0;
   \                     ??WatchApp_ProcessEvent_17: (+1)
   \   000000F4   0x2000             MOVS     R0,#+0
   \                     ??WatchApp_ProcessEvent_12: (+1)
   \   000000F6   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    355          }
    356          
    357          /*********************************************************************
    358           * Event Generation Functions
    359           */
    360          
    361          /*********************************************************************
    362           * @fn      WatchApp_ProcessZDOMsgs()
    363           *
    364           * @brief   Process response messages
    365           *
    366           * @param   none
    367           *
    368           * @return  none
    369             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    370          static void WatchApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    371          {
   \                     WatchApp_ProcessZDOMsgs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    372            switch ( inMsg->clusterID ) {
   \   00000002   0x89C1             LDRH     R1,[R0, #+14]
   \   00000004   0xF248 0x0206      MOVW     R2,#+32774
   \   00000008   0x1A89             SUBS     R1,R1,R2
   \   0000000A   0xD00F             BEQ.N    ??WatchApp_ProcessZDOMsgs_0
   \   0000000C   0x391A             SUBS     R1,R1,#+26
   \   0000000E   0xD128             BNE.N    ??WatchApp_ProcessZDOMsgs_1
    373              case End_Device_Bind_rsp:
    374                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess ) {
   \                     ??WatchApp_ProcessZDOMsgs_2: (+1)
   \   00000010   0x6980             LDR      R0,[R0, #+24]
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD104             BNE.N    ??WatchApp_ProcessZDOMsgs_3
    375                  // Light LED
    376                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x2008             MOVS     R0,#+8
   \   0000001C   0x.... 0x....      BL       HalLedSet
   \   00000020   0xE003             B.N      ??WatchApp_ProcessZDOMsgs_4
    377                }
    378          #if defined( BLINK_LEDS )
    379                else {
    380                  // Flash LED to show failure
    381                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??WatchApp_ProcessZDOMsgs_3: (+1)
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0x.... 0x....      BL       HalLedSet
    382                }
    383          #endif
    384                break;
   \                     ??WatchApp_ProcessZDOMsgs_4: (+1)
   \   0000002A   0xE01A             B.N      ??WatchApp_ProcessZDOMsgs_1
    385          
    386              case Match_Desc_rsp:
    387                {
    388                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??WatchApp_ProcessZDOMsgs_0: (+1)
   \   0000002C   0x.... 0x....      BL       ZDO_ParseEPListRsp
   \   00000030   0x0004             MOVS     R4,R0
    389                  if ( pRsp ) {
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD015             BEQ.N    ??WatchApp_ProcessZDOMsgs_5
    390                    if ( pRsp->status == ZSuccess && pRsp->cnt ) {
   \   00000036   0x7820             LDRB     R0,[R4, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD10F             BNE.N    ??WatchApp_ProcessZDOMsgs_6
   \   0000003C   0x7920             LDRB     R0,[R4, #+4]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD00C             BEQ.N    ??WatchApp_ProcessZDOMsgs_6
    391                      WatchApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x....             LDR.N    R1,??DataTable7_1
   \   00000046   0x7208             STRB     R0,[R1, #+8]
    392                      WatchApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00000048   0x8860             LDRH     R0,[R4, #+2]
   \   0000004A   0x....             LDR.N    R1,??DataTable7_1
   \   0000004C   0x8008             STRH     R0,[R1, #+0]
    393                      // Take the first endpoint, Can be changed to search through endpoints
    394                      WatchApp_DstAddr.endPoint = pRsp->epList[0];
   \   0000004E   0x7960             LDRB     R0,[R4, #+5]
   \   00000050   0x....             LDR.N    R1,??DataTable7_1
   \   00000052   0x7248             STRB     R0,[R1, #+9]
    395          
    396                      // Light LED
    397                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x2008             MOVS     R0,#+8
   \   00000058   0x.... 0x....      BL       HalLedSet
    398                    }
    399                    osal_mem_free( pRsp );
   \                     ??WatchApp_ProcessZDOMsgs_6: (+1)
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       osal_mem_free
    400                  }
    401                }
    402                break;
    403            }
    404          }
   \                     ??WatchApp_ProcessZDOMsgs_5: (+1)
   \                     ??WatchApp_ProcessZDOMsgs_1: (+1)
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    405          
    406          /*********************************************************************
    407           * @fn      WatchApp_HandleKeys
    408           *
    409           * @brief   Handles all key events for this device.
    410           *
    411           * @param   shift - true if in shift/alt. -Shift Not supported-
    412           * @param   keys - bit field for key events. Valid entries:
    413           *                 HAL_KEY_SW_2
    414           *                 HAL_KEY_SW_1
    415           *
    416           * @return  none
    417             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    418          static void WatchApp_HandleKeys( uint8 shift, uint8 keys )
    419          {
   \                     WatchApp_HandleKeys: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000C             MOVS     R4,R1
    420            zAddrType_t dstAddr;
    421              if ( keys & HAL_KEY_SW_1 ) {
   \   00000006   0x07E0             LSLS     R0,R4,#+31
   \   00000008   0xD51E             BPL.N    ??WatchApp_HandleKeys_0
    422                HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       HalLedSet
    423          
    424                // Initiate an End Device Bind Request for the mandatory endpoint
    425                dstAddr.addrMode = Addr16Bit;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xF88D 0x001C      STRB     R0,[SP, #+28]
    426                dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    427                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    428                                      WatchApp_epDesc.endPoint,
    429                                      WATCHAPP_PROFID,
    430                                      WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    431                                      WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    432                                      FALSE );
   \   0000001E   0x.... 0x....      BL       NLME_GetShortAddr
   \   00000022   0x0001             MOVS     R1,R0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9004             STR      R0,[SP, #+16]
   \   00000028   0x....             LDR.N    R0,??DataTable7_8
   \   0000002A   0x9003             STR      R0,[SP, #+12]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x9002             STR      R0,[SP, #+8]
   \   00000030   0x....             LDR.N    R0,??DataTable7_8
   \   00000032   0x9001             STR      R0,[SP, #+4]
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0xF640 0x7304      MOVW     R3,#+3844
   \   0000003C   0x....             LDR.N    R0,??DataTable7_2
   \   0000003E   0x7802             LDRB     R2,[R0, #+0]
   \   00000040   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000042   0xA805             ADD      R0,SP,#+20
   \   00000044   0x.... 0x....      BL       ZDP_EndDeviceBindReq
    433              }
    434          
    435              if ( keys & HAL_KEY_SW_2 ) {
   \                     ??WatchApp_HandleKeys_0: (+1)
   \   00000048   0x07A0             LSLS     R0,R4,#+30
   \   0000004A   0xD51A             BPL.N    ??WatchApp_HandleKeys_1
    436                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x2008             MOVS     R0,#+8
   \   00000050   0x.... 0x....      BL       HalLedSet
    437                // Initiate a Match Description Request (Service Discovery)
    438                dstAddr.addrMode = AddrBroadcast;
   \   00000054   0x200F             MOVS     R0,#+15
   \   00000056   0xF88D 0x001C      STRB     R0,[SP, #+28]
    439                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
   \   0000005A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000005E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    440                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    441                                      WATCHAPP_PROFID,
    442                                      WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    443                                      WATCHAPP_MAX_CLUSTERS, (cId_t *)WatchApp_ClusterList,
    444                                      FALSE );
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9003             STR      R0,[SP, #+12]
   \   00000066   0x....             LDR.N    R0,??DataTable7_8
   \   00000068   0x9002             STR      R0,[SP, #+8]
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x....             LDR.N    R0,??DataTable7_8
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0xF640 0x7204      MOVW     R2,#+3844
   \   00000078   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000007C   0xA805             ADD      R0,SP,#+20
   \   0000007E   0x.... 0x....      BL       ZDP_MatchDescReq
    445              }
    446          }
   \                     ??WatchApp_HandleKeys_1: (+1)
   \   00000082   0xB008             ADD      SP,SP,#+32
   \   00000084   0xBD10             POP      {R4,PC}          ;; return
    447          
    448          /*********************************************************************
    449           * @fn      WatchApp_MessageMSGCB
    450           *
    451           * @brief   Data message processor callback.  This function processes
    452           *          any incoming data - probably from other devices.  So, based
    453           *          on cluster ID, perform the intended action.
    454           *
    455           * @param   none
    456           *
    457           * @return  none
    458             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    459          static void WatchApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    460          {
   \                     WatchApp_MessageMSGCB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    461            switch ( pkt->clusterId ) {
   \   00000004   0x88A0             LDRH     R0,[R4, #+4]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD113             BNE.N    ??WatchApp_MessageMSGCB_0
    462              case WATCHAPP_CLUSTERID:
    463                rxMsgCount += 1;  // Count this message
   \   0000000A   0x....             LDR.N    R0,??DataTable7_9
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable7_9
   \   00000012   0x8008             STRH     R0,[R1, #+0]
    464                HalLedSet ( HAL_LED_4, HAL_LED_MODE_BLINK );  // Blink an LED
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x2008             MOVS     R0,#+8
   \   00000018   0x.... 0x....      BL       HalLedSet
    465          #if defined( LCD_SUPPORTED )
    466                HalLcdWriteString( (char*)pkt->cmd.Data, HAL_LCD_LINE_1 );
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x6AA0             LDR      R0,[R4, #+40]
   \   00000020   0x.... 0x....      BL       HalLcdWriteString
    467                HalLcdWriteStringValue( "Rcvd:", rxMsgCount, 10, HAL_LCD_LINE_2 );
   \   00000024   0x2302             MOVS     R3,#+2
   \   00000026   0x220A             MOVS     R2,#+10
   \   00000028   0x....             LDR.N    R0,??DataTable7_9
   \   0000002A   0x8801             LDRH     R1,[R0, #+0]
   \   0000002C   0x....             LDR.N    R0,??DataTable7_10
   \   0000002E   0x.... 0x....      BL       HalLcdWriteStringValue
    468          #elif defined( WIN32 )
    469                // TODO - What is this??
    470                WPRINTSTR( pkt->cmd.Data );
    471          #endif
    472                break;
    473            }
    474          }
   \                     ??WatchApp_MessageMSGCB_0: (+1)
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    475          
    476          /*******************************************************************************
    477           * @fn      WatchApp_SendTheMessage
    478           *
    479           * @brief   Send "the" message.
    480           *
    481           * @param   none
    482           *
    483           * @return  none
    484             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    485          static void WatchApp_SendTheMessage( void )
    486          {
   \                     WatchApp_SendTheMessage: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    487            char theMessageData[] = "Hello World";
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x....             LDR.N    R1,??DataTable7_11
   \   00000008   0xC91C             LDM      R1!,{R2-R4}
   \   0000000A   0xC01C             STM      R0!,{R2-R4}
   \   0000000C   0x390C             SUBS     R1,R1,#+12
   \   0000000E   0x380C             SUBS     R0,R0,#+12
    488          
    489            if ( AF_DataRequest( &WatchApp_DstAddr, &WatchApp_epDesc,
    490                               WATCHAPP_CLUSTERID,
    491                               (byte)osal_strlen( theMessageData ) + 1,
    492                               (byte *)&theMessageData,
    493                               &WatchApp_TransID,
    494                               AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   00000010   0xA804             ADD      R0,SP,#+16
   \   00000012   0x.... 0x....      BL       osal_strlen
   \   00000016   0x211E             MOVS     R1,#+30
   \   00000018   0x9103             STR      R1,[SP, #+12]
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x9102             STR      R1,[SP, #+8]
   \   0000001E   0x....             LDR.N    R1,??DataTable7_12
   \   00000020   0x9101             STR      R1,[SP, #+4]
   \   00000022   0xA904             ADD      R1,SP,#+16
   \   00000024   0x9100             STR      R1,[SP, #+0]
   \   00000026   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000028   0x1C43             ADDS     R3,R0,#+1
   \   0000002A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable7_2
   \   00000030   0x....             LDR.N    R0,??DataTable7_1
   \   00000032   0x.... 0x....      BL       AF_DataRequest
    495              // Successfully requested to be sent.
    496            } else {
    497              // Error occurred in request to send.
    498            }
    499          }
   \   00000036   0xB008             ADD      SP,SP,#+32
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    500          
    501          /******************************************************************************
    502           * @fn      zmain_ext_addr
    503           *
    504           * @brief   Execute a prioritized search for a valid extended address and write
    505           *          the results into the OSAL NV memory. If a valid extended address is
    506           *          not found this will create a Temporary address so a link can still be
    507           *          established. The Temporary IEEE address is not saved to NV. At some 
    508           *          point MAKE SURE the CC2538 device IEEE address is correctly placed in NV.
    509           *
    510           * @param   none
    511           *
    512           * @return  none
    513             ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    514          static void zmain_ext_addr( void )
    515          {
   \                     zmain_ext_addr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    516            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x....             LDR.N    R1,??DataTable7_13
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    517            uint8 temporaryIEEE_ADDR = FALSE;
   \   00000010   0x2400             MOVS     R4,#+0
    518          
    519            // First check whether a non-erased extended address exists in the OSAL NV.
    520            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    521                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    522                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))) {
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2108             MOVS     R1,#+8
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       osal_nv_item_init
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD10E             BNE.N    ??zmain_ext_addr_0
   \   00000020   0x....             LDR.N    R3,??DataTable7_14
   \   00000022   0x2208             MOVS     R2,#+8
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       osal_nv_read
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD106             BNE.N    ??zmain_ext_addr_0
   \   00000030   0x2208             MOVS     R2,#+8
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x....             LDR.N    R0,??DataTable7_14
   \   00000036   0x.... 0x....      BL       osal_memcmp
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD05B             BEQ.N    ??zmain_ext_addr_1
    523              // Attempt to read the extended address from the location in the last flash
    524              // page where the commissioning tools know to reserve it.
    525              if (!osal_memcmp((uint8 *)HAL_FLASH_IEEE_ADDR, nullAddr, Z_EXTADDR_LEN)) {
   \                     ??zmain_ext_addr_0: (+1)
   \   0000003E   0x2208             MOVS     R2,#+8
   \   00000040   0xA901             ADD      R1,SP,#+4
   \   00000042   0x....             LDR.N    R0,??DataTable7_15  ;; 0x27ffcc
   \   00000044   0x.... 0x....      BL       osal_memcmp
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD105             BNE.N    ??zmain_ext_addr_2
    526                (void)osal_memcpy(aExtendedAddress, (uint8 *)HAL_FLASH_IEEE_ADDR, Z_EXTADDR_LEN);
   \   0000004C   0x2208             MOVS     R2,#+8
   \   0000004E   0x....             LDR.N    R1,??DataTable7_15  ;; 0x27ffcc
   \   00000050   0x....             LDR.N    R0,??DataTable7_14
   \   00000052   0x.... 0x....      BL       osal_memcpy
   \   00000056   0xE045             B.N      ??zmain_ext_addr_3
    527              } else  {
    528                // Disable prefetch when reading from Information Page.
    529                uint32 fctl = HWREG(FLASH_CTRL_FCTL);
   \                     ??zmain_ext_addr_2: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable7_16  ;; 0x400d3008
   \   0000005A   0x6805             LDR      R5,[R0, #+0]
    530                HWREG(FLASH_CTRL_FCTL) = fctl & ~(FLASH_CTRL_FCTL_PREFETCH_ENABLE);
   \   0000005C   0xF035 0x0008      BICS     R0,R5,#0x8
   \   00000060   0x....             LDR.N    R1,??DataTable7_16  ;; 0x400d3008
   \   00000062   0x6008             STR      R0,[R1, #+0]
    531          
    532                // Copy 64-bit extended address from the Information Page
    533                (void)osal_memcpy(aExtendedAddress, (uint8*)HAL_INFO_IEEE_ADDR, Z_EXTADDR_LEN);
   \   00000064   0x2208             MOVS     R2,#+8
   \   00000066   0xF05F 0x1128      MOVS     R1,#+2621480
   \   0000006A   0x....             LDR.N    R0,??DataTable7_14
   \   0000006C   0x.... 0x....      BL       osal_memcpy
    534                if (!osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)) {
   \   00000070   0x2208             MOVS     R2,#+8
   \   00000072   0xA901             ADD      R1,SP,#+4
   \   00000074   0x....             LDR.N    R0,??DataTable7_14
   \   00000076   0x.... 0x....      BL       osal_memcmp
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD115             BNE.N    ??zmain_ext_addr_4
    535                  uint32 oui = IEEE_OUI;
   \   0000007E   0xF241 0x204B      MOVW     R0,#+4683
   \   00000082   0x9000             STR      R0,[SP, #+0]
    536                  // IEEE OUI is located in the upper 3 bytes of an 8-byte extended address
    537                  // Early Test CC2538EMs had the TI OUI located in the 2nd word,
    538                  // Production CC2538 devices have the TI OUI located in the 1st word
    539                  if (osal_memcmp(&aExtendedAddress[1], &oui, 3)) {
   \   00000084   0x2203             MOVS     R2,#+3
   \   00000086   0xA900             ADD      R1,SP,#+0
   \   00000088   0x....             LDR.N    R0,??DataTable7_17
   \   0000008A   0x.... 0x....      BL       osal_memcmp
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD026             BEQ.N    ??zmain_ext_addr_5
    540                    // OUI found in 1st word, swap words to place OUI in upper bytes
    541                    (void)osal_memcpy(aExtendedAddress, &aExtendedAddress[4], Z_EXTADDR_LEN/2);
   \   00000092   0x2204             MOVS     R2,#+4
   \   00000094   0x....             LDR.N    R1,??DataTable7_18
   \   00000096   0x....             LDR.N    R0,??DataTable7_14
   \   00000098   0x.... 0x....      BL       osal_memcpy
    542                    (void)osal_memcpy(&aExtendedAddress[4], (uint8*)HAL_INFO_IEEE_ADDR, Z_EXTADDR_LEN/2);
   \   0000009C   0x2204             MOVS     R2,#+4
   \   0000009E   0xF05F 0x1128      MOVS     R1,#+2621480
   \   000000A2   0x....             LDR.N    R0,??DataTable7_18
   \   000000A4   0x.... 0x....      BL       osal_memcpy
   \   000000A8   0xE01A             B.N      ??zmain_ext_addr_5
    543                  }
    544                } else { // No valid extended address was found.
    545                  uint8 idx;
    546          
    547          #if !defined ( NV_RESTORE )
    548                  temporaryIEEE_ADDR = TRUE;  // Make a temporary IEEE address, not saved in NV
   \                     ??zmain_ext_addr_4: (+1)
   \   000000AA   0x2401             MOVS     R4,#+1
    549          #endif
    550          
    551                 /* Create a sufficiently random extended address for expediency.
    552                  * Note: this is only valid/legal in a test environment and
    553                  *       must never be used for a commercial product.
    554                  */
    555                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);) {
   \   000000AC   0x2600             MOVS     R6,#+0
   \   000000AE   0xE00B             B.N      ??zmain_ext_addr_6
    556                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_7: (+1)
   \   000000B0   0x.... 0x....      BL       osal_rand
    557                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   000000B4   0x....             LDR.N    R1,??DataTable7_14
   \   000000B6   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B8   0x5470             STRB     R0,[R6, R1]
   \   000000BA   0x1C76             ADDS     R6,R6,#+1
    558                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   000000BC   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000BE   0x0A00             LSRS     R0,R0,#+8
   \   000000C0   0x....             LDR.N    R1,??DataTable7_14
   \   000000C2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000C4   0x5470             STRB     R0,[R6, R1]
   \   000000C6   0x1C76             ADDS     R6,R6,#+1
    559                  }
   \                     ??zmain_ext_addr_6: (+1)
   \   000000C8   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000CA   0x2E06             CMP      R6,#+6
   \   000000CC   0xDBF0             BLT.N    ??zmain_ext_addr_7
    560                // Next-to-MSB identifies ZigBee device type.
    561                aExtendedAddress[idx++] = 0x30;  //This is an end device
   \   000000CE   0x2030             MOVS     R0,#+48
   \   000000D0   0x....             LDR.N    R1,??DataTable7_14
   \   000000D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D4   0x5470             STRB     R0,[R6, R1]
   \   000000D6   0x1C76             ADDS     R6,R6,#+1
    562                // MSB has historical signficance.
    563                aExtendedAddress[idx] = 0xF8;
   \   000000D8   0x20F8             MOVS     R0,#+248
   \   000000DA   0x....             LDR.N    R1,??DataTable7_14
   \   000000DC   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000DE   0x5470             STRB     R0,[R6, R1]
    564                }
    565          
    566                // Restore flash control to previous state
    567                HWREG(FLASH_CTRL_FCTL) = fctl;
   \                     ??zmain_ext_addr_5: (+1)
   \   000000E0   0x....             LDR.N    R0,??DataTable7_16  ;; 0x400d3008
   \   000000E2   0x6005             STR      R5,[R0, #+0]
    568              }
    569          
    570              if (temporaryIEEE_ADDR == FALSE) { // only if this is NOT a Temporary
   \                     ??zmain_ext_addr_3: (+1)
   \   000000E4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E6   0x2C00             CMP      R4,#+0
   \   000000E8   0xD105             BNE.N    ??zmain_ext_addr_1
    571                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \   000000EA   0x....             LDR.N    R3,??DataTable7_14
   \   000000EC   0x2208             MOVS     R2,#+8
   \   000000EE   0x2100             MOVS     R1,#+0
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       osal_nv_write
    572              }
    573            }
    574          
    575            // Set the MAC PIB extended address according to results from above.
    576            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1: (+1)
   \   000000F6   0x....             LDR.N    R1,??DataTable7_14
   \   000000F8   0x20E2             MOVS     R0,#+226
   \   000000FA   0x.... 0x....      BL       ZMacSetReq
    577          }
   \   000000FE   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x400DB000         DC32     0x400db000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     WatchApp_DstAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     WatchApp_epDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     WatchApp_SimpleDesc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     WatchApp_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     WatchApp_NwkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     txMsgDelay

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     WatchApp_ClusterList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     rxMsgCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     WatchApp_TransID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x........         DC32     aExtendedAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x0027FFCC         DC32     0x27ffcc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x400D3008         DC32     0x400d3008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     aExtendedAddress+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x........         DC32     aExtendedAddress+0x4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x57 0x61          DC8 "WatchApp"
   \              0x74 0x63    
   \              0x68 0x41    
   \              0x70 0x70    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x52 0x63          DC8 "Rcvd:"
   \              0x76 0x64    
   \              0x3A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x48 0x65          DC8 "Hello World"
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x57 0x6F    
   \              0x72 0x6C    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
    578          
    579          #if defined ZCL_KEY_ESTABLISH
    580          /******************************************************************************
    581           * @fn      zmain_cert_init
    582           *
    583           * @brief   Initialize the Certicom certificate information.
    584           *
    585           * @param   none
    586           *
    587           * @return  none
    588             ****************************************************************************/
    589          static void zmain_cert_init( void )
    590          {
    591            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    592            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    593              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    594              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    595              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    596              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    597              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    598              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    599            };
    600          
    601            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    602            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    603          
    604            // First, check whether non-null certificate data already exists in the OSAL NV.
    605            // To save on code space, just use the CA_PUBLIC_KEY as the bellwether for all three.
    606            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))   ||
    607                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData)) ||
    608                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))) {
    609                  
    610              // If the certificate data is not NULL, use it to update the corresponding NV items.
    611              if (!osal_memcmp((uint8 *)HAL_FLASH_CA_PUBLIC_KEY_ADDR, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)) {
    612                (void)osal_memcpy(certData, (uint8 *)HAL_FLASH_CA_PUBLIC_KEY_ADDR, ZCL_KE_CA_PUBLIC_KEY_LEN);
    613                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    614          
    615                (void)osal_memcpy(certData, (uint8 *)HAL_FLASH_IMPLICIT_CERT_ADDR, ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    616                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    617          
    618                (void)osal_memcpy(certData, (uint8 *)HAL_FLASH_DEV_PRIVATE_KEY_ADDR, ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    619                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    620              }
    621            }
    622          }
    623          #endif
    624          
    625          #ifdef LCD_SUPPORTED
    626          /* LCD_SUPPORTED means the DEV board LCD, NOT the watch LCD.
    627             Undefine LCD_SUPPORTED when running on a watch
    628          */
    629          /******************************************************************************
    630           * @fn      zmain_dev_info
    631           *
    632           * @brief   Displays the IEEE address (MSB to LSB) on the LCD.
    633           *
    634           * @param   none
    635           *
    636           * @return  none
    637             ****************************************************************************/
    638          static void zmain_dev_info( void )
                             ^
Warning[Pe177]: function "zmain_dev_info" was declared but never referenced
    639          {
    640            uint8 i;
    641            uint8 *xad;
    642            uint8 lcd_buf[(Z_EXTADDR_LEN*2)+1];
    643          
    644            // Display the extended address.
    645            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    646          
    647            for (i = 0; i < Z_EXTADDR_LEN*2; xad--) {
    648              uint8 ch;
    649              ch = (*xad >> 4) & 0x0F;
    650              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    651              ch = *xad & 0x0F;
    652              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    653            }
    654            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    655            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_2 );
    656            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_3 );
    657          }
    658          #endif
    659          
    660          #ifdef LCD_SUPPORTED
    661          /*********************************************************************
    662           * @fn      zmain_lcd_init
    663           * @brief   Initialize LCD at start up.
    664           * @return  none
    665           *********************************************************************/
    666          static void zmain_lcd_init( void )
                             ^
Warning[Pe177]: function "zmain_lcd_init" was declared but never referenced
    667          {
    668          #ifdef SERIAL_DEBUG_SUPPORTED
    669            {
    670              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    671          
    672          #if defined( MT_MAC_FUNC )
    673          #if defined( ZDO_COORDINATOR )
    674                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    675          #else
    676                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    677          #endif // ZDO
    678          #elif defined( MT_NWK_FUNC )
    679          #if defined( ZDO_COORDINATOR )
    680                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    681          #else
    682                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    683          #endif // ZDO
    684          #endif // MT_FUNC
    685            }
    686          #endif // SERIAL_DEBUG_SUPPORTED
    687          }
    688          #endif
    689          
    690          /******************************************************************************
    691           */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   WatchApp_HandleKeys
        40   -> HalLedSet
        40   -> NLME_GetShortAddr
        40   -> ZDP_EndDeviceBindReq
        40   -> ZDP_MatchDescReq
       8   WatchApp_Init
         8   -> HalLcdWriteString
         8   -> RegisterForKeys
         8   -> ZDO_RegisterForZDOMsg
         8   -> afRegister
       8   WatchApp_MessageMSGCB
         8   -> HalLcdWriteString
         8   -> HalLcdWriteStringValue
         8   -> HalLedSet
      16   WatchApp_ProcessEvent
        16   -> WatchApp_HandleKeys
        16   -> WatchApp_MessageMSGCB
        16   -> WatchApp_ProcessUARTMsgs
        16   -> WatchApp_ProcessZDOMsgs
        16   -> WatchApp_SendTheMessage
        16   -> osal_msg_deallocate
        16   -> osal_msg_receive
        16   -> osal_start_reload_timer
        16   -> osal_start_timerEx
       8   WatchApp_ProcessZDOMsgs
         8   -> HalLedSet
         8   -> ZDO_ParseEPListRsp
         8   -> osal_mem_free
      40   WatchApp_SendTheMessage
        40   -> AF_DataRequest
        40   -> osal_strlen
       8   main
         8   -> GPIOPinWrite
         8   -> HalDriverInit
         8   -> InitWatch
         8   -> MAC_Init
         8   -> MAC_InitDevice
         8   -> SysTickSetup
         8   -> ZMacReset
         8   -> osal_init_system
         8   -> osal_int_disable
         8   -> osal_int_enable
         8   -> osal_nv_init
         8   -> osal_start_system
         8   -> zgInit
         8   -> zmain_ext_addr
      32   zmain_ext_addr
        32   -> ZMacSetReq
        32   -> osal_memcmp
        32   -> osal_memcpy
        32   -> osal_nv_item_init
        32   -> osal_nv_read
        32   -> osal_nv_write
        32   -> osal_rand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      12  ?_0
       8  ?_1
      12  ?_2
       8  ?_3
       2  WatchApp_ClusterList
      12  WatchApp_DstAddr
     134  WatchApp_HandleKeys
     120  WatchApp_Init
      52  WatchApp_MessageMSGCB
       1  WatchApp_NwkState
     248  WatchApp_ProcessEvent
     100  WatchApp_ProcessZDOMsgs
      58  WatchApp_SendTheMessage
      20  WatchApp_SimpleDesc
       1  WatchApp_TaskID
       1  WatchApp_TransID
      16  WatchApp_epDesc
      78  main
       2  rxMsgCount
       4  txMsgDelay
     256  zmain_ext_addr

 
    33 bytes in section .bss
     4 bytes in section .data
    62 bytes in section .rodata
 1 122 bytes in section .text
 
 1 122 bytes of CODE  memory
    62 bytes of CONST memory
    37 bytes of DATA  memory

Errors: none
Warnings: 5
