###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        05/Jul/2015  15:58:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_AF.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_AF.c" -D
#        EVERWRIST -D FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D
#        xPOWER_SAVING -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC
#        -D LCD_SUPPORTED=TRUE -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1
#        --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\MT_AF.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\MT_AF.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2014-08-21 13:23:51 -0700 (Thu, 21 Aug 2014) $
      4            Revision:       $Revision: 39843 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          #if defined ( MT_GP_FUNC )
     60          #include "MT_GP.h"
     61          #endif
     62          
     63          /* ------------------------------------------------------------------------------------------------
     64           *                                          Constants
     65           * ------------------------------------------------------------------------------------------------
     66           */
     67          
     68          #if !defined MT_AF_EXEC_CNT
     69          #define MT_AF_EXEC_CNT  15
     70          #endif
     71          
     72          #if !defined MT_AF_EXEC_DLY
     73          #define MT_AF_EXEC_DLY  1000
     74          #endif
     75          
     76          /* ------------------------------------------------------------------------------------------------
     77           *                                           Typedefs
     78           * ------------------------------------------------------------------------------------------------
     79           */
     80          
     81          typedef struct
     82          {
     83            uint8 *data;
     84            afAddrType_t dstAddr;
     85            endPointDesc_t *epDesc;
     86            uint16 cId;
     87            uint16 dataLen;
     88            uint8 transId;
     89            uint8 txOpts;
     90            uint8 radius;
     91            uint8 tick;
     92          } mtAfDataReq_t;
     93          
     94          typedef struct _mtAfInMsgList_t
     95          {
     96            struct _mtAfInMsgList_t *next;
     97            uint8 *data;
     98            uint32 timestamp;         // Receipt timestamp from MAC.
     99            uint8 tick;
    100          } mtAfInMsgList_t;
    101          
    102          /* ------------------------------------------------------------------------------------------------
    103           *                                        Local Variables
    104           * ------------------------------------------------------------------------------------------------
    105           */
    106          

   \                                 In section .bss, align 4
    107          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    108          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   00000000                      DS8 4
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                        Global Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */
    114          
    115          #if defined ( MT_AF_CB_FUNC )
    116          uint16 _afCallbackSub;
    117          #endif
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Functions
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          
    124          void MT_AfRegister(uint8 *pBuf);
    125          void MT_AfDelete(uint8 *pBuf);
    126          void MT_AfDataRequest(uint8 *pBuf);
    127          
    128          #if defined ( ZIGBEE_SOURCE_ROUTING )
    129          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    130          #endif
    131          
    132          #if defined INTER_PAN
    133          static void MT_AfInterPanCtl(uint8 *pBuf);
    134          #endif
    135          
    136          static void MT_AfDataRetrieve(uint8 *pBuf);
    137          static void MT_AfDataStore(uint8 *pBuf);
    138          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    139          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    140          
    141          
    142          /**************************************************************************************************
    143           * @fn          MT_AfExec
    144           *
    145           * @brief       This function is invoked by an MT timer event.
    146           *
    147           * input parameters
    148           *
    149           * None.
    150           *
    151           * output parameters
    152           *
    153           * None.
    154           *
    155           * @return      None.
    156           **************************************************************************************************
    157           */

   \                                 In section .text, align 2, keep-with-next
    158          void MT_AfExec(void)
    159          {
   \                     MT_AfExec: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    160            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xE001             B.N      ??MT_AfExec_0
    161          
    162            while (pItem != NULL)
    163            {
    164              if (--(pItem->tick) == 0)
    165              {
    166                if (pMtAfInMsgList == pItem)
    167                {
    168                  pMtAfInMsgList = pItem->next;
    169                  (void)osal_mem_free(pItem);
    170                  pItem = pMtAfInMsgList;
    171                }
    172                else
    173                {
    174                  pPrev->next = pItem->next;
    175                  (void)osal_mem_free(pItem);
    176                  pItem = pPrev->next;
    177                }
    178              }
    179              else
    180              {
    181                pPrev = pItem;
   \                     ??MT_AfExec_1: (+1)
   \   0000000A   0x0004             MOVS     R4,R0
    182                pItem = pItem->next;
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
    183              }
   \                     ??MT_AfExec_0: (+1)
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD01A             BEQ.N    ??MT_AfExec_2
   \   00000012   0x7B01             LDRB     R1,[R0, #+12]
   \   00000014   0x1E49             SUBS     R1,R1,#+1
   \   00000016   0x7301             STRB     R1,[R0, #+12]
   \   00000018   0x7B01             LDRB     R1,[R0, #+12]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1F5             BNE.N    ??MT_AfExec_1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable6
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0x4281             CMP      R1,R0
   \   00000026   0xD109             BNE.N    ??MT_AfExec_3
   \   00000028   0x6801             LDR      R1,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable6
   \   0000002E   0x6011             STR      R1,[R2, #+0]
   \   00000030   0x.... 0x....      BL       osal_mem_free
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xE7E8             B.N      ??MT_AfExec_0
   \                     ??MT_AfExec_3: (+1)
   \   0000003C   0x6801             LDR      R1,[R0, #+0]
   \   0000003E   0x6021             STR      R1,[R4, #+0]
   \   00000040   0x.... 0x....      BL       osal_mem_free
   \   00000044   0x6820             LDR      R0,[R4, #+0]
   \   00000046   0xE7E2             B.N      ??MT_AfExec_0
    184            }
    185          
    186            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_2: (+1)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD017             BEQ.N    ??MT_AfExec_4
    187            {
    188              if (--(pMtAfDataReq->tick) == 0)
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x7EC0             LDRB     R0,[R0, #+27]
   \   0000005A   0x1E40             SUBS     R0,R0,#+1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0x76C8             STRB     R0,[R1, #+27]
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x7EC0             LDRB     R0,[R0, #+27]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD108             BNE.N    ??MT_AfExec_4
    189              {
    190                (void)osal_mem_free(pMtAfDataReq);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       osal_mem_free
    191                pMtAfDataReq = NULL;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000080   0x6008             STR      R0,[R1, #+0]
    192              }
    193            }
    194          
    195            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_4: (+1)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD104             BNE.N    ??MT_AfExec_5
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD00F             BEQ.N    ??MT_AfExec_6
    196            {
    197              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_5: (+1)
   \   00000096   0xF44F 0x727A      MOV      R2,#+1000
   \   0000009A   0x2108             MOVS     R1,#+8
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x.... 0x....      BL       osal_start_timerEx
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD005             BEQ.N    ??MT_AfExec_6
    198              {
    199                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000000AA   0x2108             MOVS     R1,#+8
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   000000B0   0x7800             LDRB     R0,[R0, #+0]
   \   000000B2   0x.... 0x....      BL       osal_set_event
    200              }
    201            }
    202          }
   \                     ??MT_AfExec_6: (+1)
   \   000000B6   0xBD10             POP      {R4,PC}          ;; return
    203          
    204          /***************************************************************************************************
    205           * @fn      MT_AfCommandProcessing
    206           *
    207           * @brief   Process all the AF commands that are issued by test tool
    208           *
    209           * @param   pBuf - pointer to the received buffer
    210           *
    211           * @return  status
    212           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    213          uint8 MT_AfCommandProcessing(uint8 *pBuf)
    214          {
   \                     MT_AfCommandProcessing: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    215            uint8 status = MT_RPC_SUCCESS;
   \   00000002   0x2400             MOVS     R4,#+0
    216          
    217            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000004   0x7881             LDRB     R1,[R0, #+2]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD010             BEQ.N    ??MT_AfCommandProcessing_0
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD014             BEQ.N    ??MT_AfCommandProcessing_1
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD012             BEQ.N    ??MT_AfCommandProcessing_1
   \   00000012   0x2903             CMP      R1,#+3
   \   00000014   0xD013             BEQ.N    ??MT_AfCommandProcessing_2
   \   00000016   0x2904             CMP      R1,#+4
   \   00000018   0xD00B             BEQ.N    ??MT_AfCommandProcessing_3
   \   0000001A   0x2911             CMP      R1,#+17
   \   0000001C   0xD015             BEQ.N    ??MT_AfCommandProcessing_4
   \   0000001E   0x2912             CMP      R1,#+18
   \   00000020   0xD010             BEQ.N    ??MT_AfCommandProcessing_5
   \   00000022   0x2913             CMP      R1,#+19
   \   00000024   0xD014             BEQ.N    ??MT_AfCommandProcessing_6
   \   00000026   0x2914             CMP      R1,#+20
   \   00000028   0xD015             BEQ.N    ??MT_AfCommandProcessing_7
   \   0000002A   0xE017             B.N      ??MT_AfCommandProcessing_8
    218            {
    219              case MT_AF_REGISTER:
    220                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0: (+1)
   \   0000002C   0x.... 0x....      BL       MT_AfRegister
    221                break;
   \   00000030   0xE015             B.N      ??MT_AfCommandProcessing_9
    222          
    223              case MT_AF_DELETE:
    224                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3: (+1)
   \   00000032   0x.... 0x....      BL       MT_AfDelete
    225                break;
   \   00000036   0xE012             B.N      ??MT_AfCommandProcessing_9
    226          
    227              case MT_AF_DATA_REQUEST:
    228              case MT_AF_DATA_REQUEST_EXT:
    229                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1: (+1)
   \   00000038   0x.... 0x....      BL       MT_AfDataRequest
    230                break;
   \   0000003C   0xE00F             B.N      ??MT_AfCommandProcessing_9
    231          
    232          #if defined ( ZIGBEE_SOURCE_ROUTING )
    233              case MT_AF_DATA_REQUEST_SRCRTG:
    234                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2: (+1)
   \   0000003E   0x.... 0x....      BL       MT_AfDataRequestSrcRtg
    235                break;
   \   00000042   0xE00C             B.N      ??MT_AfCommandProcessing_9
    236          #endif
    237          
    238          #if defined INTER_PAN
    239              case MT_AF_INTER_PAN_CTL:
    240                MT_AfInterPanCtl(pBuf);
    241                break;
    242          #endif
    243          
    244              case MT_AF_DATA_RETRIEVE:
    245                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5: (+1)
   \   00000044   0x.... 0x....      BL       MT_AfDataRetrieve
    246                break;
   \   00000048   0xE009             B.N      ??MT_AfCommandProcessing_9
    247          
    248              case MT_AF_DATA_STORE:
    249                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4: (+1)
   \   0000004A   0x.... 0x....      BL       MT_AfDataStore
    250                break;
   \   0000004E   0xE006             B.N      ??MT_AfCommandProcessing_9
    251          
    252              case MT_AF_APSF_CONFIG_SET:
    253                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6: (+1)
   \   00000050   0x.... 0x....      BL       MT_AfAPSF_ConfigSet
    254                break;
   \   00000054   0xE003             B.N      ??MT_AfCommandProcessing_9
    255          
    256              case MT_AF_APSF_CONFIG_GET:
    257                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7: (+1)
   \   00000056   0x.... 0x....      BL       MT_AfAPSF_ConfigGet
    258                break;
   \   0000005A   0xE000             B.N      ??MT_AfCommandProcessing_9
    259          
    260              default:
    261                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8: (+1)
   \   0000005C   0x2402             MOVS     R4,#+2
    262                break;
    263            }
    264          
    265            return status;
   \                     ??MT_AfCommandProcessing_9: (+1)
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    266          }
    267          
    268          /***************************************************************************************************
    269           * @fn      MT_AfRegister
    270           *
    271           * @brief   Process AF Register command
    272           *
    273           * @param   pBuf - pointer to the received buffer
    274           *
    275           * @return  none
    276           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    277          void MT_AfRegister(uint8 *pBuf)
    278          {
   \                     MT_AfRegister: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    279            uint8 cmdId;
    280            uint8 retValue = ZMemError;
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    281            endPointDesc_t *epDesc;
    282          
    283            /* parse header */
    284            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   0000000C   0x78A5             LDRB     R5,[R4, #+2]
    285            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   0000000E   0x1CE4             ADDS     R4,R4,#+3
    286          
    287            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0x.... 0x....      BL       osal_mem_alloc
   \   00000016   0x0006             MOVS     R6,R0
    288            if ( epDesc )
   \   00000018   0x2E00             CMP      R6,#+0
   \   0000001A   0xD018             BEQ.N    ??MT_AfRegister_0
    289            {
    290              epDesc->task_id = &MT_TaskID;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   00000020   0x6070             STR      R0,[R6, #+4]
    291              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       MT_BuildEndpointDesc
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    292              if ( retValue == ZSuccess )
   \   0000002E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD104             BNE.N    ??MT_AfRegister_1
    293              {
    294                retValue = afRegister( epDesc );
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x.... 0x....      BL       afRegister
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    295              }
    296          
    297              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD002             BEQ.N    ??MT_AfRegister_0
    298              {
    299                osal_mem_free( epDesc );
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0x.... 0x....      BL       osal_mem_free
    300              }
    301            }
    302          
    303            /* Build and send back the response */
    304            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0: (+1)
   \   0000004E   0xAB00             ADD      R3,SP,#+0
   \   00000050   0x2201             MOVS     R2,#+1
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x2064             MOVS     R0,#+100
   \   00000058   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    305          }
   \   0000005C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    306          
    307          /***************************************************************************************************
    308           * @fn      MT_AfDelete
    309           *
    310           * @brief   Process AF Delete Endpoint command
    311           *
    312           * @param   pBuf - pointer to the received buffer
    313           *
    314           * @return  none
    315           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    316          void MT_AfDelete(uint8 *pBuf)
    317          {
   \                     MT_AfDelete: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    318            uint8 cmdId;
    319            uint8 retValue = ZMemError;
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0xF88D 0x1000      STRB     R1,[SP, #+0]
    320          
    321            /* parse header */
    322            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   0000000A   0x7884             LDRB     R4,[R0, #+2]
    323            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   0000000C   0x1CC0             ADDS     R0,R0,#+3
    324          
    325            retValue = afDelete( *pBuf );
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x.... 0x....      BL       afDelete
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
    326          
    327            /* Build and send back the response */
    328            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \   00000018   0xAB00             ADD      R3,SP,#+0
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x2064             MOVS     R0,#+100
   \   00000022   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    329          }
   \   00000026   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    330          
    331          /***************************************************************************************************
    332           * @fn      MT_AfDataRequest
    333           *
    334           * @brief   Process AF Register command
    335           *
    336           * @param   pBuf - pointer to the received buffer
    337           *
    338           * @return  none
    339           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    340          void MT_AfDataRequest(uint8 *pBuf)
    341          {
   \                     MT_AfDataRequest: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x4683             MOV      R11,R0
    342            #define MT_AF_REQ_MSG_LEN  10
    343            #define MT_AF_REQ_MSG_EXT  10
    344          
    345            endPointDesc_t *epDesc;
    346            afAddrType_t dstAddr;
    347            cId_t cId;
    348            uint8 transId, txOpts, radius;
    349            uint8 cmd0, cmd1;
    350            uint8 retValue = ZFailure;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    351            uint16 dataLen, tempLen;
    352          
    353            /* Parse header */
    354            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   0000000E   0xF89B 0x4001      LDRB     R4,[R11, #+1]
    355            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   00000012   0xF89B 0x5002      LDRB     R5,[R11, #+2]
    356            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000016   0xF11B 0x0B03      ADDS     R11,R11,#+3
    357          
    358            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x2D02             CMP      R5,#+2
   \   0000001E   0xD12A             BNE.N    ??MT_AfDataRequest_0
    359            {
    360              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   00000020   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000024   0xF88D 0x001C      STRB     R0,[SP, #+28]
   \   00000028   0xF11B 0x0B01      ADDS     R11,R11,#+1
    361          
    362              if (dstAddr.addrMode == afAddr64Bit)
   \   0000002C   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xD105             BNE.N    ??MT_AfDataRequest_1
    363              {
    364                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00000034   0x2208             MOVS     R2,#+8
   \   00000036   0x4659             MOV      R1,R11
   \   00000038   0xA805             ADD      R0,SP,#+20
   \   0000003A   0x.... 0x....      BL       osal_memcpy
   \   0000003E   0xE007             B.N      ??MT_AfDataRequest_2
    365              }
    366              else
    367              {
    368                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_1: (+1)
   \   00000040   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000044   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   00000048   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   0000004C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    369              }
    370              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_AfDataRequest_2: (+1)
   \   00000050   0xF11B 0x0B08      ADDS     R11,R11,#+8
    371          
    372              dstAddr.endPoint = *pBuf++;
   \   00000054   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000058   0xF88D 0x001D      STRB     R0,[SP, #+29]
   \   0000005C   0xF11B 0x0B01      ADDS     R11,R11,#+1
    373              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00000060   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000064   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   00000068   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   0000006C   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    374              pBuf += 2;
   \   00000070   0xF11B 0x0B02      ADDS     R11,R11,#+2
   \   00000074   0xE015             B.N      ??MT_AfDataRequest_3
    375            }
    376            else
    377            {
    378              /* Destination address */
    379              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_0: (+1)
   \   00000076   0x2002             MOVS     R0,#+2
   \   00000078   0xF88D 0x001C      STRB     R0,[SP, #+28]
    380              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000007C   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000080   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   00000084   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   00000088   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    381              pBuf += 2;
   \   0000008C   0xF11B 0x0B02      ADDS     R11,R11,#+2
    382          
    383              /* Destination endpoint */
    384              dstAddr.endPoint = *pBuf++;
   \   00000090   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000094   0xF88D 0x001D      STRB     R0,[SP, #+29]
   \   00000098   0xF11B 0x0B01      ADDS     R11,R11,#+1
    385              dstAddr.panId = 0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    386            }
    387          
    388            /* Source endpoint */
    389            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_3: (+1)
   \   000000A2   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000A6   0x.... 0x....      BL       afFindEndPointDesc
   \   000000AA   0x0006             MOVS     R6,R0
   \   000000AC   0xF11B 0x0B01      ADDS     R11,R11,#+1
    390          
    391            /* ClusterId */
    392            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000000B0   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000B4   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   000000B8   0xEB10 0x2701      ADDS     R7,R0,R1, LSL #+8
    393            pBuf +=2;
   \   000000BC   0xF11B 0x0B02      ADDS     R11,R11,#+2
    394          
    395            /* TransId */
    396            transId = *pBuf++;
   \   000000C0   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000C4   0xF88D 0x0011      STRB     R0,[SP, #+17]
   \   000000C8   0xF11B 0x0B01      ADDS     R11,R11,#+1
    397          
    398            /* TxOption */
    399            txOpts = *pBuf++;
   \   000000CC   0xF89B 0x8000      LDRB     R8,[R11, #+0]
   \   000000D0   0xF11B 0x0B01      ADDS     R11,R11,#+1
    400          
    401            /* Radius */
    402            radius = *pBuf++;
   \   000000D4   0xF89B 0x9000      LDRB     R9,[R11, #+0]
   \   000000D8   0xF11B 0x0B01      ADDS     R11,R11,#+1
    403          
    404            /* Length */
    405            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \   000000DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DE   0x2D02             CMP      R5,#+2
   \   000000E0   0xD10A             BNE.N    ??MT_AfDataRequest_4
    406            {
    407              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000000E2   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000E6   0xF89B 0x1001      LDRB     R1,[R11, #+1]
   \   000000EA   0xEB10 0x2A01      ADDS     R10,R0,R1, LSL #+8
    408              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000000EE   0xF11A 0x0014      ADDS     R0,R10,#+20
    409              pBuf += 2;
   \   000000F2   0xF11B 0x0B02      ADDS     R11,R11,#+2
   \   000000F6   0xE005             B.N      ??MT_AfDataRequest_5
    410            }
    411            else
    412            {
    413              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_4: (+1)
   \   000000F8   0xF89B 0xA000      LDRB     R10,[R11, #+0]
   \   000000FC   0xF11B 0x0B01      ADDS     R11,R11,#+1
    414              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   00000100   0xF11A 0x000A      ADDS     R0,R10,#+10
    415            }
    416          
    417            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_5: (+1)
   \   00000104   0x2E00             CMP      R6,#+0
   \   00000106   0xD103             BNE.N    ??MT_AfDataRequest_6
    418            {
    419              retValue = afStatus_INVALID_PARAMETER;
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   0000010E   0xE079             B.N      ??MT_AfDataRequest_7
    420            }
    421            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfDataRequest_6: (+1)
   \   00000110   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000112   0x28FB             CMP      R0,#+251
   \   00000114   0xDB5F             BLT.N    ??MT_AfDataRequest_8
    422            {
    423              if (pMtAfDataReq != NULL)
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000011A   0x6800             LDR      R0,[R0, #+0]
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD003             BEQ.N    ??MT_AfDataRequest_9
    424              {
    425                retValue = afStatus_INVALID_PARAMETER;
   \   00000120   0x2002             MOVS     R0,#+2
   \   00000122   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000126   0xE06D             B.N      ??MT_AfDataRequest_7
    426              }
    427              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_9: (+1)
   \   00000128   0xF11A 0x001C      ADDS     R0,R10,#+28
   \   0000012C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000012E   0x.... 0x....      BL       osal_mem_alloc
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000136   0x6008             STR      R0,[R1, #+0]
   \   00000138   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD103             BNE.N    ??MT_AfDataRequest_10
    428              {
    429                retValue = afStatus_MEM_FAIL;
   \   00000142   0x2010             MOVS     R0,#+16
   \   00000144   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000148   0xE05C             B.N      ??MT_AfDataRequest_7
    430              }
    431              else
    432              {
    433                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_10: (+1)
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    434          
    435                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   00000150   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0x301C             ADDS     R0,R0,#+28
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   0000015C   0x6809             LDR      R1,[R1, #+0]
   \   0000015E   0x6008             STR      R0,[R1, #+0]
    436                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   00000160   0x220C             MOVS     R2,#+12
   \   00000162   0xA905             ADD      R1,SP,#+20
   \   00000164   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0x1D00             ADDS     R0,R0,#+4
   \   0000016C   0x.... 0x....      BL       osal_memcpy
    437                pMtAfDataReq->epDesc = epDesc;
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0x6106             STR      R6,[R0, #+16]
    438                pMtAfDataReq->cId = cId;
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0x8287             STRH     R7,[R0, #+20]
    439                pMtAfDataReq->dataLen = dataLen;
   \   00000180   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   00000184   0x6800             LDR      R0,[R0, #+0]
   \   00000186   0xF8A0 0xA016      STRH     R10,[R0, #+22]
    440                pMtAfDataReq->transId = transId;
   \   0000018A   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   00000192   0x6809             LDR      R1,[R1, #+0]
   \   00000194   0x7608             STRB     R0,[R1, #+24]
    441                pMtAfDataReq->txOpts = txOpts;
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000019A   0x6800             LDR      R0,[R0, #+0]
   \   0000019C   0xF880 0x8019      STRB     R8,[R0, #+25]
    442                pMtAfDataReq->radius = radius;
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   000001A4   0x6800             LDR      R0,[R0, #+0]
   \   000001A6   0xF880 0x901A      STRB     R9,[R0, #+26]
    443          
    444                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    445                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \   000001AA   0x200F             MOVS     R0,#+15
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable6_1
   \   000001B0   0x6809             LDR      R1,[R1, #+0]
   \   000001B2   0x76C8             STRB     R0,[R1, #+27]
    446                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000001B4   0xF44F 0x727A      MOV      R2,#+1000
   \   000001B8   0x2108             MOVS     R1,#+8
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   000001BE   0x7800             LDRB     R0,[R0, #+0]
   \   000001C0   0x.... 0x....      BL       osal_start_timerEx
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD01D             BEQ.N    ??MT_AfDataRequest_7
    447                {
    448                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000001C8   0x2108             MOVS     R1,#+8
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable6_2
   \   000001CE   0x7800             LDRB     R0,[R0, #+0]
   \   000001D0   0x.... 0x....      BL       osal_set_event
   \   000001D4   0xE016             B.N      ??MT_AfDataRequest_7
    449                }
    450              }
    451            }
    452          #if defined ( MT_GP_FUNC )
    453            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    454                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    455                     && ( dstAddr.panId == 0 )
    456                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    457            {
    458              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    459            }
    460          #endif
    461            else
    462            {
    463              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_8: (+1)
   \   000001D6   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000001DA   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \   000001DE   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001E2   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   000001E6   0xF10D 0x0011      ADD      R0,SP,#+17
   \   000001EA   0x9001             STR      R0,[SP, #+4]
   \   000001EC   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \   000001F0   0x4653             MOV      R3,R10
   \   000001F2   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000001F4   0x003A             MOVS     R2,R7
   \   000001F6   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000001F8   0x0031             MOVS     R1,R6
   \   000001FA   0xA805             ADD      R0,SP,#+20
   \   000001FC   0x.... 0x....      BL       AF_DataRequest
   \   00000200   0xF88D 0x0010      STRB     R0,[SP, #+16]
    464            }
    465          
    466            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_7: (+1)
   \   00000204   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000206   0xF014 0x00E0      ANDS     R0,R4,#0xE0
   \   0000020A   0x2820             CMP      R0,#+32
   \   0000020C   0xD106             BNE.N    ??MT_AfDataRequest_11
    467            {
    468              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0000020E   0xAB04             ADD      R3,SP,#+16
   \   00000210   0x2201             MOVS     R2,#+1
   \   00000212   0x0029             MOVS     R1,R5
   \   00000214   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000216   0x2064             MOVS     R0,#+100
   \   00000218   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    469            }
    470          }
   \                     ??MT_AfDataRequest_11: (+1)
   \   0000021C   0xB009             ADD      SP,SP,#+36
   \   0000021E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    471          
    472          #if defined ( ZIGBEE_SOURCE_ROUTING )
    473          
    474          /***************************************************************************************************
    475           * @fn      MT_AfDataRequestSrcRtg
    476           *
    477           * @brief   Process AF Register command
    478           *
    479           * @param   pBuf - pointer to the received buffer
    480           *
    481           * @return  none
    482           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    483          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
    484          {
   \                     MT_AfDataRequestSrcRtg: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x0005             MOVS     R5,R0
    485            uint8 cmdId, dataLen = 0;
   \   00000008   0x2300             MOVS     R3,#+0
    486            uint8 retValue = ZFailure;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xF88D 0x0018      STRB     R0,[SP, #+24]
    487            endPointDesc_t *epDesc;
    488            byte transId;
    489            afAddrType_t dstAddr;
    490            cId_t cId;
    491            byte txOpts, radius, srcEP, relayCnt;
    492            uint16 *pRelayList;
    493            uint8 i;
    494          
    495            /* parse header */
    496            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000010   0x78AC             LDRB     R4,[R5, #+2]
    497            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000012   0x1CED             ADDS     R5,R5,#+3
    498          
    499            /* Destination address */
    500            /* Initialize the panID field to zero to avoid inter-pan */
    501            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \   00000014   0x220C             MOVS     R2,#+12
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA807             ADD      R0,SP,#+28
   \   0000001A   0x.... 0x....      BL       osal_memset
    502            dstAddr.addrMode = afAddr16Bit;
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xF88D 0x0024      STRB     R0,[SP, #+36]
    503            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x7869             LDRB     R1,[R5, #+1]
   \   00000028   0xEB10 0x2001      ADDS     R0,R0,R1, LSL #+8
   \   0000002C   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    504            pBuf += 2;
   \   00000030   0x1CAD             ADDS     R5,R5,#+2
    505          
    506            /* Destination endpoint */
    507            dstAddr.endPoint = *pBuf++;
   \   00000032   0x7828             LDRB     R0,[R5, #+0]
   \   00000034   0xF88D 0x0025      STRB     R0,[SP, #+37]
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
    508          
    509            /* Source endpoint */
    510            srcEP = *pBuf++;
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
    511            epDesc = afFindEndPointDesc( srcEP );
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0x.... 0x....      BL       afFindEndPointDesc
   \   00000044   0x0007             MOVS     R7,R0
    512          
    513            /* ClusterId */
    514            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00000046   0x7828             LDRB     R0,[R5, #+0]
   \   00000048   0x7869             LDRB     R1,[R5, #+1]
   \   0000004A   0xEB10 0x2801      ADDS     R8,R0,R1, LSL #+8
    515            pBuf +=2;
   \   0000004E   0x1CAD             ADDS     R5,R5,#+2
    516          
    517            /* TransId */
    518            transId = *pBuf++;
   \   00000050   0x7828             LDRB     R0,[R5, #+0]
   \   00000052   0xF88D 0x0019      STRB     R0,[SP, #+25]
   \   00000056   0x1C6D             ADDS     R5,R5,#+1
    519          
    520            /* TxOption */
    521            txOpts = *pBuf++;
   \   00000058   0xF895 0x9000      LDRB     R9,[R5, #+0]
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
    522          
    523            /* Radius */
    524            radius = *pBuf++;
   \   0000005E   0xF895 0xA000      LDRB     R10,[R5, #+0]
   \   00000062   0x1C6D             ADDS     R5,R5,#+1
    525          
    526            /* Source route relay count */
    527            relayCnt = *pBuf++;
   \   00000064   0xF895 0xB000      LDRB     R11,[R5, #+0]
   \   00000068   0x1C6D             ADDS     R5,R5,#+1
    528          
    529            /* Convert the source route relay list */
    530            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \   0000006A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000006E   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000072   0xEA5F 0x004B      LSLS     R0,R11,#+1
   \   00000076   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000078   0x.... 0x....      BL       osal_mem_alloc
   \   0000007C   0x0006             MOVS     R6,R0
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD036             BEQ.N    ??MT_AfDataRequestSrcRtg_0
    531            {
    532              for( i = 0; i < relayCnt; i++ )
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xE008             B.N      ??MT_AfDataRequestSrcRtg_1
    533              {
    534                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_2: (+1)
   \   00000086   0x7829             LDRB     R1,[R5, #+0]
   \   00000088   0x786A             LDRB     R2,[R5, #+1]
   \   0000008A   0xEB11 0x2102      ADDS     R1,R1,R2, LSL #+8
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0xF826 0x1010      STRH     R1,[R6, R0, LSL #+1]
    535                pBuf += 2;
   \   00000094   0x1CAD             ADDS     R5,R5,#+2
    536              }
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \                     ??MT_AfDataRequestSrcRtg_1: (+1)
   \   00000098   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000009E   0x4558             CMP      R0,R11
   \   000000A0   0xD3F1             BCC.N    ??MT_AfDataRequestSrcRtg_2
    537          
    538              /* Data payload Length */
    539              dataLen = *pBuf++;
   \   000000A2   0x782B             LDRB     R3,[R5, #+0]
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
    540          
    541              if ( epDesc == NULL )
   \   000000A6   0x2F00             CMP      R7,#+0
   \   000000A8   0xD103             BNE.N    ??MT_AfDataRequestSrcRtg_3
    542              {
    543                retValue = afStatus_INVALID_PARAMETER;
   \   000000AA   0x2002             MOVS     R0,#+2
   \   000000AC   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   000000B0   0xE01A             B.N      ??MT_AfDataRequestSrcRtg_4
    544              }
    545              else
    546              {
    547                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    548                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_3: (+1)
   \   000000B2   0x9605             STR      R6,[SP, #+20]
   \   000000B4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000B8   0xF8CD 0xB010      STR      R11,[SP, #+16]
   \   000000BC   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000C0   0xF8CD 0xA00C      STR      R10,[SP, #+12]
   \   000000C4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000000C8   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   000000CC   0xF10D 0x0019      ADD      R0,SP,#+25
   \   000000D0   0x9001             STR      R0,[SP, #+4]
   \   000000D2   0x9500             STR      R5,[SP, #+0]
   \   000000D4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000D6   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000D8   0x4642             MOV      R2,R8
   \   000000DA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000DC   0x0039             MOVS     R1,R7
   \   000000DE   0xA807             ADD      R0,SP,#+28
   \   000000E0   0x.... 0x....      BL       AF_DataRequestSrcRtg
   \   000000E4   0xF88D 0x0018      STRB     R0,[SP, #+24]
    549              }
    550          
    551              /* Free the memory allocated */
    552              osal_mem_free( pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_4: (+1)
   \   000000E8   0x0030             MOVS     R0,R6
   \   000000EA   0x.... 0x....      BL       osal_mem_free
   \   000000EE   0xE002             B.N      ??MT_AfDataRequestSrcRtg_5
    553            }
    554            else
    555            {
    556              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_0: (+1)
   \   000000F0   0x2010             MOVS     R0,#+16
   \   000000F2   0xF88D 0x0018      STRB     R0,[SP, #+24]
    557            }
    558          
    559          
    560            /* Build and send back the response */
    561            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_5: (+1)
   \   000000F6   0xAB06             ADD      R3,SP,#+24
   \   000000F8   0x2201             MOVS     R2,#+1
   \   000000FA   0x0021             MOVS     R1,R4
   \   000000FC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000FE   0x2064             MOVS     R0,#+100
   \   00000100   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    562          }
   \   00000104   0xB00B             ADD      SP,SP,#+44
   \   00000106   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    563          #endif
    564          
    565          #if defined INTER_PAN
    566          /***************************************************************************************************
    567           * @fn      MT_AfInterPanCtl
    568           *
    569           * @brief   Process the AF Inter Pan control command.
    570           *
    571           * @param   pBuf - pointer to the received buffer
    572           *
    573           * @return  none
    574           ***************************************************************************************************/
    575          static void MT_AfInterPanCtl(uint8 *pBuf)
    576          {
    577            uint8 cmd, rtrn;
    578            uint16 panId;
    579            endPointDesc_t *pEP;
    580          
    581            cmd = pBuf[MT_RPC_POS_CMD1];
    582            pBuf += MT_RPC_FRAME_HDR_SZ;
    583          
    584            switch (*pBuf++)  // Inter-pan request parameter.
    585            {
    586            case InterPanClr:
    587              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    588              break;
    589          
    590            case InterPanSet:
    591              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    592              break;
    593          
    594            case InterPanReg:
    595              if ((pEP = afFindEndPointDesc(*pBuf)))
    596              {
    597                StubAPS_RegisterApp(pEP);
    598                rtrn = SUCCESS;
    599              }
    600              else
    601              {
    602                rtrn = FAILURE;
    603              }
    604              break;
    605          
    606            case InterPanChk:
    607              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    608              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    609              break;
    610          
    611            default:
    612              rtrn = afStatus_INVALID_PARAMETER;
    613              break;
    614            }
    615          
    616            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    617          }
    618          #endif
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_AfDataConfirm
    622           *
    623           * @brief   Process
    624           *
    625           * @param   pBuf - pointer to the received buffer
    626           *
    627           * @return  none
    628           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    629          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
    630          {
   \                     MT_AfDataConfirm: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    631            uint8 retArray[3];
    632          
    633            retArray[0] = pMsg->hdr.status;
   \   00000002   0x7841             LDRB     R1,[R0, #+1]
   \   00000004   0xF88D 0x1000      STRB     R1,[SP, #+0]
    634            retArray[1] = pMsg->endpoint;
   \   00000008   0x7881             LDRB     R1,[R0, #+2]
   \   0000000A   0xF88D 0x1001      STRB     R1,[SP, #+1]
    635            retArray[2] = pMsg->transID;
   \   0000000E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
    636          
    637            /* Build and send back the response */
    638            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \   00000014   0xAB00             ADD      R3,SP,#+0
   \   00000016   0x2203             MOVS     R2,#+3
   \   00000018   0x2180             MOVS     R1,#+128
   \   0000001A   0x2044             MOVS     R0,#+68
   \   0000001C   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    639          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    640          
    641          /***************************************************************************************************
    642           * @fn      MT_AfReflectError
    643           *
    644           * @brief   Process
    645           *
    646           * @param   pBuf - pointer to the received buffer
    647           *
    648           * @return  none
    649           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    650          void MT_AfReflectError(afReflectError_t *pMsg)
    651          {
   \                     MT_AfReflectError: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    652            uint8 retArray[6];
    653          
    654            retArray[0] = pMsg->hdr.status;
   \   00000004   0x7841             LDRB     R1,[R0, #+1]
   \   00000006   0xF88D 0x1000      STRB     R1,[SP, #+0]
    655            retArray[1] = pMsg->endpoint;
   \   0000000A   0x7881             LDRB     R1,[R0, #+2]
   \   0000000C   0xF88D 0x1001      STRB     R1,[SP, #+1]
    656            retArray[2] = pMsg->transID;
   \   00000010   0x78C1             LDRB     R1,[R0, #+3]
   \   00000012   0xF88D 0x1002      STRB     R1,[SP, #+2]
    657            retArray[3] = pMsg->dstAddrMode;
   \   00000016   0x7901             LDRB     R1,[R0, #+4]
   \   00000018   0xF88D 0x1003      STRB     R1,[SP, #+3]
    658            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   0000001C   0x88C1             LDRH     R1,[R0, #+6]
   \   0000001E   0xF88D 0x1004      STRB     R1,[SP, #+4]
    659            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \   00000022   0x88C0             LDRH     R0,[R0, #+6]
   \   00000024   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000026   0x0A00             LSRS     R0,R0,#+8
   \   00000028   0xF88D 0x0005      STRB     R0,[SP, #+5]
    660          
    661            /* Build and send back the response */
    662            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \   0000002C   0xAB00             ADD      R3,SP,#+0
   \   0000002E   0x2206             MOVS     R2,#+6
   \   00000030   0x2183             MOVS     R1,#+131
   \   00000032   0x2044             MOVS     R0,#+68
   \   00000034   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    663          }
   \   00000038   0xBD07             POP      {R0-R2,PC}       ;; return
    664          
    665          /***************************************************************************************************
    666           * @fn          MT_AfIncomingMsg
    667           *
    668           * @brief       Process the callback subscription for AF Incoming data.
    669           *
    670           * @param       pkt - Incoming AF data.
    671           *
    672           * @return      none
    673           ***************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    674          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
    675          {
   \                     MT_AfIncomingMsg: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
    676            #define MT_AF_INC_MSG_LEN  20
    677            #define MT_AF_INC_MSG_EXT  10
    678          
    679            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   00000006   0xF8B4 0x9026      LDRH     R9,[R4, #+38]
    680            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   0000000A   0xF119 0x0514      ADDS     R5,R9,#+20
    681            uint8 cmd = MT_AF_INCOMING_MSG;
   \   0000000E   0x2681             MOVS     R6,#+129
    682            uint8 *pRsp, *pTmp;
    683            mtAfInMsgList_t *pItem = NULL;
   \   00000010   0xF05F 0x0A00      MOVS     R10,#+0
    684          
    685          #if defined INTER_PAN
    686            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    687            {
    688              cmd = MT_AF_INCOMING_MSG_EXT;
    689            }
    690            else
    691          #endif
    692            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    693                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   00000014   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD002             BEQ.N    ??MT_AfIncomingMsg_0
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x2DF1             CMP      R5,#+241
   \   0000001E   0xDB00             BLT.N    ??MT_AfIncomingMsg_1
    694            {
    695              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0: (+1)
   \   00000020   0x2682             MOVS     R6,#+130
    696            }
    697          
    698            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \                     ??MT_AfIncomingMsg_1: (+1)
   \   00000022   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000024   0x2E82             CMP      R6,#+130
   \   00000026   0xD100             BNE.N    ??MT_AfIncomingMsg_2
    699            {
    700              respLen += MT_AF_INC_MSG_EXT;
   \   00000028   0x350A             ADDS     R5,R5,#+10
    701            }
    702          
    703            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_2: (+1)
   \   0000002A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002C   0x2DFB             CMP      R5,#+251
   \   0000002E   0xDB0F             BLT.N    ??MT_AfIncomingMsg_3
    704            {
    705              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   00000030   0xF119 0x0010      ADDS     R0,R9,#+16
   \   00000034   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000036   0x.... 0x....      BL       osal_mem_alloc
   \   0000003A   0x4682             MOV      R10,R0
   \   0000003C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000040   0xF000 0x8100      BEQ.W    ??MT_AfIncomingMsg_4
    706              {
    707                return;  // If cannot hold a huge message, cannot give indication at all.
    708              }
    709          
    710              pItem->data = (uint8 *)(pItem+1);
   \                     ??MT_AfIncomingMsg_5: (+1)
   \   00000044   0xF11A 0x0010      ADDS     R0,R10,#+16
   \   00000048   0xF8CA 0x0004      STR      R0,[R10, #+4]
    711              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   0000004C   0xEBB5 0x0509      SUBS     R5,R5,R9
    712            }
    713          
    714            // Attempt to allocate memory for the response packet.
    715            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_3: (+1)
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000054   0x.... 0x....      BL       osal_mem_alloc
   \   00000058   0x0007             MOVS     R7,R0
   \   0000005A   0x2F00             CMP      R7,#+0
   \   0000005C   0xD106             BNE.N    ??MT_AfIncomingMsg_6
    716            {
    717              if (pItem != NULL)
   \   0000005E   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000062   0xD002             BEQ.N    ??MT_AfIncomingMsg_7
    718              {
    719                (void)osal_mem_free(pItem);
   \   00000064   0x4650             MOV      R0,R10
   \   00000066   0x.... 0x....      BL       osal_mem_free
    720              }
    721              return;
   \                     ??MT_AfIncomingMsg_7: (+1)
   \   0000006A   0xE0EB             B.N      ??MT_AfIncomingMsg_4
    722            }
    723            pTmp = pRsp;
   \                     ??MT_AfIncomingMsg_6: (+1)
   \   0000006C   0x46B8             MOV      R8,R7
    724          
    725            /* Group ID */
    726            *pTmp++ = LO_UINT16(pMsg->groupId);
   \   0000006E   0x8860             LDRH     R0,[R4, #+2]
   \   00000070   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000074   0xF118 0x0801      ADDS     R8,R8,#+1
    727            *pTmp++ = HI_UINT16(pMsg->groupId);
   \   00000078   0x8860             LDRH     R0,[R4, #+2]
   \   0000007A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007C   0x0A00             LSRS     R0,R0,#+8
   \   0000007E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000082   0xF118 0x0801      ADDS     R8,R8,#+1
    728          
    729            /* Cluster ID */
    730            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   00000086   0x88A0             LDRH     R0,[R4, #+4]
   \   00000088   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000008C   0xF118 0x0801      ADDS     R8,R8,#+1
    731            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \   00000090   0x88A0             LDRH     R0,[R4, #+4]
   \   00000092   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000094   0x0A00             LSRS     R0,R0,#+8
   \   00000096   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000009A   0xF118 0x0801      ADDS     R8,R8,#+1
    732          
    733            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0x2E82             CMP      R6,#+130
   \   000000A2   0xD127             BNE.N    ??MT_AfIncomingMsg_8
    734            {
    735              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000000A4   0x7BA0             LDRB     R0,[R4, #+14]
   \   000000A6   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000AA   0xF118 0x0801      ADDS     R8,R8,#+1
    736          
    737              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   000000AE   0x7BA0             LDRB     R0,[R4, #+14]
   \   000000B0   0x2803             CMP      R0,#+3
   \   000000B2   0xD105             BNE.N    ??MT_AfIncomingMsg_9
    738              {
    739                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000000B4   0x2208             MOVS     R2,#+8
   \   000000B6   0x1DA1             ADDS     R1,R4,#+6
   \   000000B8   0x4640             MOV      R0,R8
   \   000000BA   0x.... 0x....      BL       osal_memcpy
   \   000000BE   0xE007             B.N      ??MT_AfIncomingMsg_10
    740              }
    741              else
    742              {
    743                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_9: (+1)
   \   000000C0   0x88E0             LDRH     R0,[R4, #+6]
   \   000000C2   0xF888 0x0000      STRB     R0,[R8, #+0]
    744                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000000C6   0x88E0             LDRH     R0,[R4, #+6]
   \   000000C8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CA   0x0A00             LSRS     R0,R0,#+8
   \   000000CC   0xF888 0x0001      STRB     R0,[R8, #+1]
    745              }
    746              pTmp += Z_EXTADDR_LEN;
   \                     ??MT_AfIncomingMsg_10: (+1)
   \   000000D0   0xF118 0x0808      ADDS     R8,R8,#+8
    747          
    748              *pTmp++ = pMsg->srcAddr.endPoint;
   \   000000D4   0x7BE0             LDRB     R0,[R4, #+15]
   \   000000D6   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000DA   0xF118 0x0801      ADDS     R8,R8,#+1
    749          #if defined INTER_PAN
    750              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    751              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    752          #else
    753              *pTmp++ = 0;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000E4   0xF118 0x0801      ADDS     R8,R8,#+1
    754              *pTmp++ = 0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000EE   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000F2   0xE010             B.N      ??MT_AfIncomingMsg_11
    755          #endif
    756            }
    757            else
    758            {
    759              /* Source Address */
    760              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_8: (+1)
   \   000000F4   0x88E0             LDRH     R0,[R4, #+6]
   \   000000F6   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   000000FA   0xF118 0x0801      ADDS     R8,R8,#+1
    761              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000000FE   0x88E0             LDRH     R0,[R4, #+6]
   \   00000100   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000102   0x0A00             LSRS     R0,R0,#+8
   \   00000104   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000108   0xF118 0x0801      ADDS     R8,R8,#+1
    762          
    763              /* Source EP */
    764              *pTmp++ = pMsg->srcAddr.endPoint;
   \   0000010C   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000010E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000112   0xF118 0x0801      ADDS     R8,R8,#+1
    765            }
    766          
    767            /* Destination EP */
    768            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_11: (+1)
   \   00000116   0x7D20             LDRB     R0,[R4, #+20]
   \   00000118   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000011C   0xF118 0x0801      ADDS     R8,R8,#+1
    769          
    770            /* WasBroadCast */
    771            *pTmp++ = pMsg->wasBroadcast;
   \   00000120   0x7D60             LDRB     R0,[R4, #+21]
   \   00000122   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000126   0xF118 0x0801      ADDS     R8,R8,#+1
    772          
    773            /* LinkQuality */
    774            *pTmp++ = pMsg->LinkQuality;
   \   0000012A   0x7DA0             LDRB     R0,[R4, #+22]
   \   0000012C   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000130   0xF118 0x0801      ADDS     R8,R8,#+1
    775          
    776            /* SecurityUse */
    777            *pTmp++ = pMsg->SecurityUse;
   \   00000134   0x7E60             LDRB     R0,[R4, #+25]
   \   00000136   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000013A   0xF118 0x0801      ADDS     R8,R8,#+1
    778          
    779            /* Timestamp */
    780            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \   0000013E   0x69E0             LDR      R0,[R4, #+28]
   \   00000140   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000144   0xF118 0x0801      ADDS     R8,R8,#+1
    781            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \   00000148   0x69E0             LDR      R0,[R4, #+28]
   \   0000014A   0x0A00             LSRS     R0,R0,#+8
   \   0000014C   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000150   0xF118 0x0801      ADDS     R8,R8,#+1
    782            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \   00000154   0x69E0             LDR      R0,[R4, #+28]
   \   00000156   0x0C00             LSRS     R0,R0,#+16
   \   00000158   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000015C   0xF118 0x0801      ADDS     R8,R8,#+1
    783            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \   00000160   0x69E0             LDR      R0,[R4, #+28]
   \   00000162   0x0E00             LSRS     R0,R0,#+24
   \   00000164   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000168   0xF118 0x0801      ADDS     R8,R8,#+1
    784          
    785          
    786            /* Data Length */
    787            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000016C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000016E   0x2E82             CMP      R6,#+130
   \   00000170   0xD111             BNE.N    ??MT_AfIncomingMsg_12
    788            {
    789              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    790               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    791               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    792               */
    793              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000178   0xF118 0x0801      ADDS     R8,R8,#+1
    794              *pTmp++ = LO_UINT16(dataLen);
   \   0000017C   0xF888 0x9000      STRB     R9,[R8, #+0]
   \   00000180   0xF118 0x0801      ADDS     R8,R8,#+1
    795              *pTmp++ = HI_UINT16(dataLen);
   \   00000184   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000188   0xEA5F 0x2019      LSRS     R0,R9,#+8
   \   0000018C   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000190   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000194   0xE009             B.N      ??MT_AfIncomingMsg_13
    796            }
    797            else
    798            {
    799              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_12: (+1)
   \   00000196   0xF894 0x0024      LDRB     R0,[R4, #+36]
   \   0000019A   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000019E   0xF118 0x0801      ADDS     R8,R8,#+1
    800              *pTmp++ = dataLen;
   \   000001A2   0xF888 0x9000      STRB     R9,[R8, #+0]
   \   000001A6   0xF118 0x0801      ADDS     R8,R8,#+1
    801            }
    802          
    803            /* Data */
    804            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_13: (+1)
   \   000001AA   0xF1BA 0x0F00      CMP      R10,#+0
   \   000001AE   0xD023             BEQ.N    ??MT_AfIncomingMsg_14
    805            {
    806              // Enqueue the new huge incoming item.
    807              pItem->next = pMtAfInMsgList;
   \   000001B0   0x....             LDR.N    R0,??DataTable6
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0xF8CA 0x0000      STR      R0,[R10, #+0]
    808              pMtAfInMsgList = pItem;
   \   000001B8   0x....             LDR.N    R0,??DataTable6
   \   000001BA   0xF8C0 0xA000      STR      R10,[R0, #+0]
    809          
    810              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    811              pItem->tick = MT_AF_EXEC_CNT;
   \   000001BE   0x200F             MOVS     R0,#+15
   \   000001C0   0xF88A 0x000C      STRB     R0,[R10, #+12]
    812              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000001C4   0xF44F 0x727A      MOV      R2,#+1000
   \   000001C8   0x2108             MOVS     R1,#+8
   \   000001CA   0x....             LDR.N    R0,??DataTable6_2
   \   000001CC   0x7800             LDRB     R0,[R0, #+0]
   \   000001CE   0x.... 0x....      BL       osal_start_timerEx
   \   000001D2   0x2800             CMP      R0,#+0
   \   000001D4   0xD004             BEQ.N    ??MT_AfIncomingMsg_15
    813              {
    814                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000001D6   0x2108             MOVS     R1,#+8
   \   000001D8   0x....             LDR.N    R0,??DataTable6_2
   \   000001DA   0x7800             LDRB     R0,[R0, #+0]
   \   000001DC   0x.... 0x....      BL       osal_set_event
    815              }
    816          
    817              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_15: (+1)
   \   000001E0   0x69E0             LDR      R0,[R4, #+28]
   \   000001E2   0xF8CA 0x0008      STR      R0,[R10, #+8]
    818              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000001E6   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000001EA   0x464A             MOV      R2,R9
   \   000001EC   0x6AA1             LDR      R1,[R4, #+40]
   \   000001EE   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \   000001F2   0x.... 0x....      BL       osal_memcpy
   \   000001F6   0xE00A             B.N      ??MT_AfIncomingMsg_16
    819            }
    820            else
    821            {
    822              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_14: (+1)
   \   000001F8   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000001FC   0x464A             MOV      R2,R9
   \   000001FE   0x6AA1             LDR      R1,[R4, #+40]
   \   00000200   0x4640             MOV      R0,R8
   \   00000202   0x.... 0x....      BL       osal_memcpy
    823              pTmp += dataLen;
   \   00000206   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000020A   0xEB19 0x0808      ADDS     R8,R9,R8
    824            }
    825          
    826            // MAC Source address
    827            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_16: (+1)
   \   0000020E   0x8DA0             LDRH     R0,[R4, #+44]
   \   00000210   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000214   0xF118 0x0801      ADDS     R8,R8,#+1
    828            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
   \   00000218   0x8DA0             LDRH     R0,[R4, #+44]
   \   0000021A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000021C   0x0A00             LSRS     R0,R0,#+8
   \   0000021E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000222   0xF118 0x0801      ADDS     R8,R8,#+1
    829          
    830            // messages result radius
    831            *pTmp = pMsg->radius;
   \   00000226   0xF894 0x002E      LDRB     R0,[R4, #+46]
   \   0000022A   0xF888 0x0000      STRB     R0,[R8, #+0]
    832          
    833            /* Build and send back the response */
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   0000022E   0x003B             MOVS     R3,R7
   \   00000230   0x002A             MOVS     R2,R5
   \   00000232   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000234   0x0031             MOVS     R1,R6
   \   00000236   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000238   0x2044             MOVS     R0,#+68
   \   0000023A   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    835          
    836            (void)osal_mem_free(pRsp);
   \   0000023E   0x0038             MOVS     R0,R7
   \   00000240   0x.... 0x....      BL       osal_mem_free
    837          }
   \                     ??MT_AfIncomingMsg_4: (+1)
   \   00000244   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    838          
    839          /**************************************************************************************************
    840           * @fn          MT_AfDataRetrieve
    841           *
    842           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    843           *          incoming AF message.
    844           *
    845           * input parameters
    846           *
    847           * @param pBuf - pointer to the received buffer
    848           *
    849           * output parameters
    850           *
    851           * @param rtrn - AF-Status of the operation.
    852           *
    853           * @return      None.
    854           **************************************************************************************************
    855           */

   \                                 In section .text, align 2, keep-with-next
    856          void MT_AfDataRetrieve(uint8 *pBuf)
    857          {
   \                     MT_AfDataRetrieve: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    858            #define MT_AF_RTV_HDR_SZ  2
    859          
    860            uint32 timestamp;
    861            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   00000006   0x....             LDR.N    R1,??DataTable6
   \   00000008   0x680D             LDR      R5,[R1, #+0]
    862            uint8 rtrn = afStatus_FAILED;
   \   0000000A   0x2201             MOVS     R2,#+1
    863            uint8 len = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   0000000E   0x1CE4             ADDS     R4,R4,#+3
    866            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \   00000010   0x7821             LDRB     R1,[R4, #+0]
   \   00000012   0x7863             LDRB     R3,[R4, #+1]
   \   00000014   0xEB11 0x2103      ADDS     R1,R1,R3, LSL #+8
   \   00000018   0x78A3             LDRB     R3,[R4, #+2]
   \   0000001A   0xEB11 0x4103      ADDS     R1,R1,R3, LSL #+16
   \   0000001E   0x78E3             LDRB     R3,[R4, #+3]
   \   00000020   0xEB11 0x6103      ADDS     R1,R1,R3, LSL #+24
   \   00000024   0xE000             B.N      ??MT_AfDataRetrieve_0
    867          
    868            while (pItem != NULL)
    869            {
    870              pPrev = pItem;
    871              if (pItem->timestamp == timestamp)
    872              {
    873                break;
    874              }
    875              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_1: (+1)
   \   00000026   0x682D             LDR      R5,[R5, #+0]
   \                     ??MT_AfDataRetrieve_0: (+1)
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD003             BEQ.N    ??MT_AfDataRetrieve_2
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x68AB             LDR      R3,[R5, #+8]
   \   00000030   0x428B             CMP      R3,R1
   \   00000032   0xD1F8             BNE.N    ??MT_AfDataRetrieve_1
    876            }
    877          
    878            if (pItem != NULL)
   \                     ??MT_AfDataRetrieve_2: (+1)
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD016             BEQ.N    ??MT_AfDataRetrieve_3
    879            {
    880              uint16 idx;
    881              uint8 *pRsp;
    882          
    883              pBuf += 4;
   \   00000038   0x1D24             ADDS     R4,R4,#+4
    884              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000003A   0x7821             LDRB     R1,[R4, #+0]
   \   0000003C   0x7862             LDRB     R2,[R4, #+1]
   \   0000003E   0xEB11 0x2702      ADDS     R7,R1,R2, LSL #+8
    885              len = pBuf[2];
   \   00000042   0x78A6             LDRB     R6,[R4, #+2]
    886          
    887              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   00000044   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000046   0x2E00             CMP      R6,#+0
   \   00000048   0xD117             BNE.N    ??MT_AfDataRetrieve_4
    888              {
    889                if (pMtAfInMsgList == pItem)
   \   0000004A   0x....             LDR.N    R1,??DataTable6
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0x42A9             CMP      R1,R5
   \   00000050   0xD103             BNE.N    ??MT_AfDataRetrieve_5
    890                {
    891                  pMtAfInMsgList = pItem->next;
   \   00000052   0x6828             LDR      R0,[R5, #+0]
   \   00000054   0x....             LDR.N    R1,??DataTable6
   \   00000056   0x6008             STR      R0,[R1, #+0]
   \   00000058   0xE001             B.N      ??MT_AfDataRetrieve_6
    892                }
    893                else
    894                {
    895                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_5: (+1)
   \   0000005A   0x6829             LDR      R1,[R5, #+0]
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    896                }
    897                (void)osal_mem_free(pItem);
   \                     ??MT_AfDataRetrieve_6: (+1)
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       osal_mem_free
    898                rtrn = afStatus_SUCCESS;
   \   00000064   0x2200             MOVS     R2,#+0
    899              }
    900              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    901              {
    902                rtrn = afStatus_MEM_FAIL;
    903                len = 0;
    904              }
    905              else
    906              {
    907                pRsp[0] = ZSuccess;
    908                pRsp[1] = len;
    909                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    910                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    911                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    912                (void)osal_mem_free(pRsp);
    913                return;
    914              }
    915            }
    916          
    917            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3: (+1)
   \   00000066   0x7022             STRB     R2,[R4, #+0]
    918            pBuf[1] = len;
   \   00000068   0x7066             STRB     R6,[R4, #+1]
    919            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    920                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000006A   0x0023             MOVS     R3,R4
   \   0000006C   0x2202             MOVS     R2,#+2
   \   0000006E   0x2112             MOVS     R1,#+18
   \   00000070   0x2064             MOVS     R0,#+100
   \   00000072   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    921          }
   \                     ??MT_AfDataRetrieve_7: (+1)
   \   00000076   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??MT_AfDataRetrieve_4: (+1)
   \   0000007A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000007C   0x1CB0             ADDS     R0,R6,#+2
   \   0000007E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000080   0x.... 0x....      BL       osal_mem_alloc
   \   00000084   0x4680             MOV      R8,R0
   \   00000086   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000008A   0xD102             BNE.N    ??MT_AfDataRetrieve_8
   \   0000008C   0x2210             MOVS     R2,#+16
   \   0000008E   0x2600             MOVS     R6,#+0
   \   00000090   0xE7E9             B.N      ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_8: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000098   0xF888 0x6001      STRB     R6,[R8, #+1]
   \   0000009C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000009E   0x0032             MOVS     R2,R6
   \   000000A0   0x6868             LDR      R0,[R5, #+4]
   \   000000A2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000A4   0x1839             ADDS     R1,R7,R0
   \   000000A6   0xF118 0x0002      ADDS     R0,R8,#+2
   \   000000AA   0x.... 0x....      BL       osal_memcpy
   \   000000AE   0x4643             MOV      R3,R8
   \   000000B0   0x1CB2             ADDS     R2,R6,#+2
   \   000000B2   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B4   0x2112             MOVS     R1,#+18
   \   000000B6   0x2064             MOVS     R0,#+100
   \   000000B8   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
   \   000000BC   0x4640             MOV      R0,R8
   \   000000BE   0x.... 0x....      BL       osal_mem_free
   \   000000C2   0xE7D8             B.N      ??MT_AfDataRetrieve_7
    922          
    923          /**************************************************************************************************
    924           * @fn          MT_AfDataStore
    925           *
    926           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    927           *          outgoing AF message.
    928           *
    929           * input parameters
    930           *
    931           * @param pBuf - pointer to the received buffer
    932           *
    933           * output parameters
    934           *
    935           * @param rtrn - AF-Status of the operation.
    936           *
    937           * @return      None.
    938           **************************************************************************************************
    939           */

   \                                 In section .text, align 2, keep-with-next
    940          void MT_AfDataStore(uint8 *pBuf)
    941          {
   \                     MT_AfDataStore: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    942            uint16 idx;
    943            uint8 len, rtrn = afStatus_FAILED;
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0xF88D 0x1010      STRB     R1,[SP, #+16]
    944          
    945            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   0000000A   0x1CC0             ADDS     R0,R0,#+3
    946            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x7842             LDRB     R2,[R0, #+1]
   \   00000010   0xEB11 0x2302      ADDS     R3,R1,R2, LSL #+8
    947            len = pBuf[2];
   \   00000014   0x7882             LDRB     R2,[R0, #+2]
    948            pBuf += 3;
   \   00000016   0x1CC0             ADDS     R0,R0,#+3
    949          
    950            if (pMtAfDataReq == NULL)
   \   00000018   0x....             LDR.N    R1,??DataTable6_1
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD103             BNE.N    ??MT_AfDataStore_0
    951            {
    952              rtrn = afStatus_MEM_FAIL;
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000026   0xE036             B.N      ??MT_AfDataStore_1
    953            }
    954            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_0: (+1)
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0x2A00             CMP      R2,#+0
   \   0000002C   0xD127             BNE.N    ??MT_AfDataStore_2
    955            {
    956              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    957                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    958                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   0000002E   0x....             LDR.N    R0,??DataTable6_1
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x7E80             LDRB     R0,[R0, #+26]
   \   00000034   0x9003             STR      R0,[SP, #+12]
   \   00000036   0x....             LDR.N    R0,??DataTable6_1
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x7E40             LDRB     R0,[R0, #+25]
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   \   0000003E   0x....             LDR.N    R0,??DataTable6_1
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x3018             ADDS     R0,R0,#+24
   \   00000044   0x9001             STR      R0,[SP, #+4]
   \   00000046   0x....             LDR.N    R0,??DataTable6_1
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x....             LDR.N    R0,??DataTable6_1
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x8AC3             LDRH     R3,[R0, #+22]
   \   00000054   0x....             LDR.N    R0,??DataTable6_1
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x8A82             LDRH     R2,[R0, #+20]
   \   0000005A   0x....             LDR.N    R0,??DataTable6_1
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x6901             LDR      R1,[R0, #+16]
   \   00000060   0x....             LDR.N    R0,??DataTable6_1
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x1D00             ADDS     R0,R0,#+4
   \   00000066   0x.... 0x....      BL       AF_DataRequest
   \   0000006A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    959              (void)osal_mem_free(pMtAfDataReq);
   \   0000006E   0x....             LDR.N    R0,??DataTable6_1
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x.... 0x....      BL       osal_mem_free
    960              pMtAfDataReq = NULL;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x....             LDR.N    R1,??DataTable6_1
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   \   0000007C   0xE00B             B.N      ??MT_AfDataStore_1
    961            }
    962            else
    963            {
    964              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_2: (+1)
   \   0000007E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000080   0x0001             MOVS     R1,R0
   \   00000082   0x....             LDR.N    R0,??DataTable6_1
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000008A   0x1818             ADDS     R0,R3,R0
   \   0000008C   0x.... 0x....      BL       osal_memcpy
    965              rtrn = afStatus_SUCCESS;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF88D 0x0010      STRB     R0,[SP, #+16]
    966            }
    967          
    968            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    969                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??MT_AfDataStore_1: (+1)
   \   00000096   0xAB04             ADD      R3,SP,#+16
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x2111             MOVS     R1,#+17
   \   0000009C   0x2064             MOVS     R0,#+100
   \   0000009E   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    970          }
   \   000000A2   0xB005             ADD      SP,SP,#+20
   \   000000A4   0xBD00             POP      {PC}             ;; return
    971          
    972          /**************************************************************************************************
    973           * @fn          MT_AfAPSF_ConfigSet
    974           *
    975           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    976           *
    977           * input parameters
    978           *
    979           * @param       pBuf - Pointer to the received buffer.
    980           *
    981           * output parameters
    982           *
    983           * None.
    984           *
    985           * @return      None.
    986           */

   \                                 In section .text, align 2, keep-with-next
    987          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    988          {
   \                     MT_AfAPSF_ConfigSet: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    989            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
   \   00000004   0x7901             LDRB     R1,[R0, #+4]
   \   00000006   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   0000000A   0x7941             LDRB     R1,[R0, #+5]
   \   0000000C   0xF88D 0x1001      STRB     R1,[SP, #+1]
    990            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x78C0             LDRB     R0,[R0, #+3]
   \   00000014   0x.... 0x....      BL       afAPSF_ConfigSet
   \   00000018   0xF88D 0x0004      STRB     R0,[SP, #+4]
    991          
    992            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    993                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
   \   0000001C   0xAB01             ADD      R3,SP,#+4
   \   0000001E   0x2201             MOVS     R2,#+1
   \   00000020   0x2113             MOVS     R1,#+19
   \   00000022   0x2064             MOVS     R0,#+100
   \   00000024   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
    994          }
   \   00000028   0xBD07             POP      {R0-R2,PC}       ;; return
    995          
    996          /**************************************************************************************************
    997           * @fn          MT_AfAPSF_ConfigGet
    998           *
    999           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
   1000           *
   1001           * input parameters
   1002           *
   1003           * @param       pBuf - Pointer to the received buffer.
   1004           *
   1005           * output parameters
   1006           *
   1007           * None.
   1008           *
   1009           * @return      None.
   1010           */

   \                                 In section .text, align 2, keep-with-next
   1011          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1012          {
   \                     MT_AfAPSF_ConfigGet: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1013            afAPSF_Config_t cfg = { 0, 0 };
   \   00000004   0x....             LDR.N    R1,??DataTable6_3
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x9100             STR      R1,[SP, #+0]
   1014            uint8 buf[2];
   1015          
   1016            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000000E   0x.... 0x....      BL       afAPSF_ConfigGet
   1017          
   1018            buf[0] = cfg.frameDelay;
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1019            buf[1] = cfg.windowSize;
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1020          
   1021            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1022                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   \   00000022   0xAB01             ADD      R3,SP,#+4
   \   00000024   0x2203             MOVS     R2,#+3
   \   00000026   0x2114             MOVS     R1,#+20
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0x.... 0x....      BL       MT_BuildAndSendZToolResponse
   1023          }
   \   0000002E   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     pMtAfInMsgList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     pMtAfDataReq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     MT_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   1024          
   1025          /***************************************************************************************************
   1026          ***************************************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MT_AfAPSF_ConfigGet
        16   -> MT_BuildAndSendZToolResponse
        16   -> afAPSF_ConfigGet
      16   MT_AfAPSF_ConfigSet
        16   -> MT_BuildAndSendZToolResponse
        16   -> afAPSF_ConfigSet
       8   MT_AfCommandProcessing
         8   -> MT_AfAPSF_ConfigGet
         8   -> MT_AfAPSF_ConfigSet
         8   -> MT_AfDataRequest
         8   -> MT_AfDataRequestSrcRtg
         8   -> MT_AfDataRetrieve
         8   -> MT_AfDataStore
         8   -> MT_AfDelete
         8   -> MT_AfRegister
       8   MT_AfDataConfirm
         8   -> MT_BuildAndSendZToolResponse
      72   MT_AfDataRequest
        72   -> AF_DataRequest
        72   -> MT_BuildAndSendZToolResponse
        72   -> afFindEndPointDesc
        72   -> osal_mem_alloc
        72   -> osal_memcpy
        72   -> osal_set_event
        72   -> osal_start_timerEx
      80   MT_AfDataRequestSrcRtg
        80   -> AF_DataRequestSrcRtg
        80   -> MT_BuildAndSendZToolResponse
        80   -> afFindEndPointDesc
        80   -> osal_mem_alloc
        80   -> osal_mem_free
        80   -> osal_memset
      24   MT_AfDataRetrieve
        24   -> MT_BuildAndSendZToolResponse
        24   -> osal_mem_alloc
        24   -> osal_mem_free
        24   -> osal_memcpy
      24   MT_AfDataStore
        24   -> AF_DataRequest
        24   -> MT_BuildAndSendZToolResponse
        24   -> osal_mem_free
        24   -> osal_memcpy
      16   MT_AfDelete
        16   -> MT_BuildAndSendZToolResponse
        16   -> afDelete
       8   MT_AfExec
         8   -> osal_mem_free
         8   -> osal_set_event
         8   -> osal_start_timerEx
      32   MT_AfIncomingMsg
        32   -> MT_BuildAndSendZToolResponse
        32   -> osal_mem_alloc
        32   -> osal_mem_free
        32   -> osal_memcpy
        32   -> osal_set_event
        32   -> osal_start_timerEx
      16   MT_AfReflectError
        16   -> MT_BuildAndSendZToolResponse
      24   MT_AfRegister
        24   -> MT_BuildAndSendZToolResponse
        24   -> MT_BuildEndpointDesc
        24   -> afRegister
        24   -> osal_mem_alloc
        24   -> osal_mem_free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ?_0
      48  MT_AfAPSF_ConfigGet
      42  MT_AfAPSF_ConfigSet
     100  MT_AfCommandProcessing
      34  MT_AfDataConfirm
     546  MT_AfDataRequest
     266  MT_AfDataRequestSrcRtg
     196  MT_AfDataRetrieve
     166  MT_AfDataStore
      40  MT_AfDelete
     184  MT_AfExec
     584  MT_AfIncomingMsg
      58  MT_AfReflectError
      94  MT_AfRegister
       4  pMtAfDataReq
       4  pMtAfInMsgList

 
     8 bytes in section .bss
     4 bytes in section .rodata
 2 374 bytes in section .text
 
 2 374 bytes of CODE  memory
     4 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: none
