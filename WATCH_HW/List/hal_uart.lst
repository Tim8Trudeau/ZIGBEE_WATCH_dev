###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        26/Jul/2015  16:36:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\hal_uart.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\hal_uart.c" -D EVERWRIST -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=TRUE -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1
#        --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\..\Source\ -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2538DB\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -I
#        "C:\Texas
#        Instruments\cc2538_foundation_firmware_1_0_1_0\driverlib\cc2538\source\"
#        -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\hal_uart.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\hal_uart.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\hal\target\CC2538\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2013-05-17 11:25:11 -0700 (Fri, 17 May 2013) $
      4            Revision:       $Revision: 34355 $
      5          
      6            Description:    This file contains the interface to the UART.
      7          
      8          
      9            Copyright 2012-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          #if HAL_UART_USB
     46          #include "_hal_uart_usb.c"
     47          #else
     48          #include "_hal_uart_isr.c"

   \                                 In section .rodata, align 4
   \   __absolute unsigned long const UBRRTable[5]
   \                     UBRRTable:
   \   00000000   0x00002580         DC32 9600, 19200, 38400, 57600, 115200
   \              0x00004B00   
   \              0x00009600   
   \              0x0000E100   
   \              0x0001C200   

   \                                 In section .bss, align 4
   \   static __absolute halUARTCfg_t uartRecord
   \                     uartRecord:
   \   00000000                      DS8 44

   \                                 In section .bss, align 1
   \   static __absolute bool txMT
   \                     txMT:
   \   00000000                      DS8 1

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void HalUARTInitIsr(void)
   \                     HalUARTInitIsr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xF240 0x2001      MOVW     R0,#+513
   \   00000006   0x.... 0x....      BL       SysCtrlPeripheralEnable
   \   0000000A   0x2202             MOVS     R2,#+2
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x400d9000
   \   00000012   0x.... 0x....      BL       IOCPinConfigPeriphOutput
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable11_1  ;; 0x400d4108
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x400d9000
   \   00000020   0x.... 0x....      BL       IOCPinConfigPeriphInput
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x400d9000
   \   0000002A   0x.... 0x....      BL       GPIOPinTypeUARTInput
   \   0000002E   0x2102             MOVS     R1,#+2
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable11  ;; 0x400d9000
   \   00000034   0x.... 0x....      BL       GPIOPinTypeUARTOutput
   \   00000038   0x.... 0x....      BL       recRst
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp uint8 HalUARTOpenIsr(uint8, halUARTCfg_t *)
   \                     HalUARTOpenIsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000008   0x7809             LDRB     R1,[R1, #+0]
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD002             BEQ.N    ??HalUARTOpenIsr_0
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       HalUARTClose
   \                     ??HalUARTOpenIsr_0: (+1)
   \   00000014   0x7860             LDRB     R0,[R4, #+1]
   \   00000016   0x2805             CMP      R0,#+5
   \   00000018   0xDB01             BLT.N    ??HalUARTOpenIsr_1
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0xE0A3             B.N      ??HalUARTOpenIsr_2
   \                     ??HalUARTOpenIsr_1: (+1)
   \   0000001E   0x89A0             LDRH     R0,[R4, #+12]
   \   00000020   0x.... 0x....      BL       osal_mem_alloc
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000028   0x6108             STR      R0,[R1, #+16]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000002E   0x6900             LDR      R0,[R0, #+16]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00A             BEQ.N    ??HalUARTOpenIsr_3
   \   00000034   0x8B20             LDRH     R0,[R4, #+24]
   \   00000036   0x.... 0x....      BL       osal_mem_alloc
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000003E   0x61C8             STR      R0,[R1, #+28]
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000044   0x69C0             LDR      R0,[R0, #+28]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD10F             BNE.N    ??HalUARTOpenIsr_4
   \                     ??HalUARTOpenIsr_3: (+1)
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   0000004E   0x6900             LDR      R0,[R0, #+16]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD008             BEQ.N    ??HalUARTOpenIsr_5
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable11_2
   \   00000058   0x6900             LDR      R0,[R0, #+16]
   \   0000005A   0x.... 0x....      BL       osal_mem_free
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000064   0x6108             STR      R0,[R1, #+16]
   \                     ??HalUARTOpenIsr_5: (+1)
   \   00000066   0x2003             MOVS     R0,#+3
   \   00000068   0xE07D             B.N      ??HalUARTOpenIsr_2
   \                     ??HalUARTOpenIsr_4: (+1)
   \   0000006A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD016             BEQ.N    ??HalUARTOpenIsr_6
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0x2108             MOVS     R1,#+8
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable11_3  ;; 0x400dc000
   \   00000078   0x.... 0x....      BL       IOCPinConfigPeriphOutput
   \   0000007C   0x2108             MOVS     R1,#+8
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable11_3  ;; 0x400dc000
   \   00000082   0x.... 0x....      BL       GPIOPinTypeUARTOutput
   \   00000086   0x.... 0x....      LDR.W    R2,??DataTable11_4  ;; 0x400d4104
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable11_5  ;; 0x400da000
   \   00000090   0x.... 0x....      BL       IOCPinConfigPeriphInput
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable11_5  ;; 0x400da000
   \   0000009A   0x.... 0x....      BL       GPIOPinTypeUARTInput
   \                     ??HalUARTOpenIsr_6: (+1)
   \   0000009E   0x2016             MOVS     R0,#+22
   \   000000A0   0x.... 0x....      BL       IntEnable
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000AA   0x7008             STRB     R0,[R1, #+0]
   \   000000AC   0x7860             LDRB     R0,[R4, #+1]
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000B2   0x7048             STRB     R0,[R1, #+1]
   \   000000B4   0x78A0             LDRB     R0,[R4, #+2]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000BA   0x7088             STRB     R0,[R1, #+2]
   \   000000BC   0x89A0             LDRH     R0,[R4, #+12]
   \   000000BE   0x88A1             LDRH     R1,[R4, #+4]
   \   000000C0   0x4288             CMP      R0,R1
   \   000000C2   0xD204             BCS.N    ??HalUARTOpenIsr_7
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000CA   0x8088             STRH     R0,[R1, #+4]
   \   000000CC   0xE003             B.N      ??HalUARTOpenIsr_8
   \                     ??HalUARTOpenIsr_7: (+1)
   \   000000CE   0x88A0             LDRH     R0,[R4, #+4]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000D4   0x8088             STRH     R0,[R1, #+4]
   \                     ??HalUARTOpenIsr_8: (+1)
   \   000000D6   0x79A0             LDRB     R0,[R4, #+6]
   \   000000D8   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000DC   0x7188             STRB     R0,[R1, #+6]
   \   000000DE   0x89A0             LDRH     R0,[R4, #+12]
   \   000000E0   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000E4   0x8188             STRH     R0,[R1, #+12]
   \   000000E6   0x8B20             LDRH     R0,[R4, #+24]
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000EC   0x8308             STRH     R0,[R1, #+24]
   \   000000EE   0xF894 0x0020      LDRB     R0,[R4, #+32]
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   000000F6   0xF881 0x0020      STRB     R0,[R1, #+32]
   \   000000FA   0x6AA0             LDR      R0,[R4, #+40]
   \   000000FC   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   00000100   0x6288             STR      R0,[R1, #+40]
   \   00000102   0x.... 0x....      BL       SysCtrlClockGet
   \   00000106   0x0001             MOVS     R1,R0
   \   00000108   0x2360             MOVS     R3,#+96
   \   0000010A   0x.... 0x....      LDR.W    R0,??DataTable11_6
   \   0000010E   0x.... 0x....      LDR.W    R2,??DataTable11_2
   \   00000112   0x7852             LDRB     R2,[R2, #+1]
   \   00000114   0xF850 0x2022      LDR      R2,[R0, R2, LSL #+2]
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x4000d000
   \   0000011C   0x.... 0x....      BL       UARTConfigSetExpClk
   \   00000120   0x2200             MOVS     R2,#+0
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x4000d000
   \   00000128   0x.... 0x....      BL       UARTFIFOLevelSet
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x4000d000
   \   00000130   0x.... 0x....      BL       UARTFIFOEnable
   \   00000134   0x2172             MOVS     R1,#+114
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x4000d000
   \   0000013A   0x.... 0x....      BL       UARTIntClear
   \   0000013E   0x2172             MOVS     R1,#+114
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable11_7  ;; 0x4000d000
   \   00000144   0x.... 0x....      BL       UARTIntEnable
   \   00000148   0x78A0             LDRB     R0,[R4, #+2]
   \   0000014A   0x2800             CMP      R0,#+0
   \   0000014C   0xD007             BEQ.N    ??HalUARTOpenIsr_9
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable11_8  ;; 0x4000d030
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0xF450 0x4040      ORRS     R0,R0,#0xC000
   \   00000158   0x.... 0x....      LDR.W    R1,??DataTable11_8  ;; 0x4000d030
   \   0000015C   0x6008             STR      R0,[R1, #+0]
   \                     ??HalUARTOpenIsr_9: (+1)
   \   0000015E   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   00000160   0x.... 0x....      BL       UARTEnable
   \   00000164   0x2000             MOVS     R0,#+0
   \                     ??HalUARTOpenIsr_2: (+1)
   \   00000166   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void HalUARTPollIsr(void)
   \                     HalUARTPollIsr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable11_2
   \   00000004   0x8A84             LDRH     R4,[R0, #+20]
   \   00000006   0x....             LDR.N    R0,??DataTable11_2
   \   00000008   0x8AC5             LDRH     R5,[R0, #+22]
   \   0000000A   0x....             LDR.N    R0,??DataTable11_2
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD052             BEQ.N    ??HalUARTPollIsr_0
   \                     ??HalUARTPollIsr_1: (+1)
   \   00000012   0x.... 0x....      BL       IntMasterDisable
   \   00000016   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001A   0xF090 0x0601      EORS     R6,R0,#0x1
   \   0000001E   0x.... 0x....      BL       procRx
   \   00000022   0x.... 0x....      BL       procTx
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD001             BEQ.N    ??HalUARTPollIsr_2
   \   0000002C   0x.... 0x....      BL       IntMasterEnable
   \                     ??HalUARTPollIsr_2: (+1)
   \   00000030   0x2600             MOVS     R6,#+0
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       Hal_UART_RxBufLen
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable11_2
   \   0000003E   0x8989             LDRH     R1,[R1, #+12]
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xDB00             BLT.N    ??HalUARTPollIsr_3
   \   00000044   0x2601             MOVS     R6,#+1
   \                     ??HalUARTPollIsr_3: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable11_2
   \   00000048   0x6A40             LDR      R0,[R0, #+36]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD00D             BEQ.N    ??HalUARTPollIsr_4
   \   0000004E   0x.... 0x....      BL       osal_GetSystemClock
   \   00000052   0x....             LDR.N    R1,??DataTable11_2
   \   00000054   0x7989             LDRB     R1,[R1, #+6]
   \   00000056   0x....             LDR.N    R2,??DataTable11_2
   \   00000058   0x6A52             LDR      R2,[R2, #+36]
   \   0000005A   0x1A80             SUBS     R0,R0,R2
   \   0000005C   0x4281             CMP      R1,R0
   \   0000005E   0xD204             BCS.N    ??HalUARTPollIsr_4
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR.N    R1,??DataTable11_2
   \   00000064   0x6248             STR      R0,[R1, #+36]
   \   00000066   0xF056 0x0604      ORRS     R6,R6,#0x4
   \                     ??HalUARTPollIsr_4: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       Hal_UART_RxBufLen
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0x....             LDR.N    R1,??DataTable11_2
   \   00000074   0x8989             LDRH     R1,[R1, #+12]
   \   00000076   0x....             LDR.N    R2,??DataTable11_2
   \   00000078   0x8892             LDRH     R2,[R2, #+4]
   \   0000007A   0x1A89             SUBS     R1,R1,R2
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xDB01             BLT.N    ??HalUARTPollIsr_5
   \   00000080   0xF056 0x0602      ORRS     R6,R6,#0x2
   \                     ??HalUARTPollIsr_5: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable11_9
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD108             BNE.N    ??HalUARTPollIsr_6
   \   0000008C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000008E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000090   0x42AC             CMP      R4,R5
   \   00000092   0xD104             BNE.N    ??HalUARTPollIsr_6
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x....             LDR.N    R1,??DataTable11_9
   \   00000098   0x7008             STRB     R0,[R1, #+0]
   \   0000009A   0xF056 0x0610      ORRS     R6,R6,#0x10
   \                     ??HalUARTPollIsr_6: (+1)
   \   0000009E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000A0   0x2E00             CMP      R6,#+0
   \   000000A2   0xD009             BEQ.N    ??HalUARTPollIsr_7
   \   000000A4   0x....             LDR.N    R0,??DataTable11_2
   \   000000A6   0x6A80             LDR      R0,[R0, #+40]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD005             BEQ.N    ??HalUARTPollIsr_7
   \   000000AC   0x0031             MOVS     R1,R6
   \   000000AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x....             LDR.N    R2,??DataTable11_2
   \   000000B4   0x6A92             LDR      R2,[R2, #+40]
   \   000000B6   0x4790             BLX      R2
   \                     ??HalUARTPollIsr_7: (+1)
   \                     ??HalUARTPollIsr_0: (+1)
   \   000000B8   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void HalUARTCloseIsr(uint8)
   \                     HalUARTCloseIsr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   00000004   0x.... 0x....      BL       UARTDisable
   \   00000008   0x....             LDR.N    R0,??DataTable11_2
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD009             BEQ.N    ??HalUARTCloseIsr_0
   \   00000010   0x....             LDR.N    R0,??DataTable11_2
   \   00000012   0x6900             LDR      R0,[R0, #+16]
   \   00000014   0x.... 0x....      BL       osal_mem_free
   \   00000018   0x....             LDR.N    R0,??DataTable11_2
   \   0000001A   0x69C0             LDR      R0,[R0, #+28]
   \   0000001C   0x.... 0x....      BL       osal_mem_free
   \   00000020   0x.... 0x....      BL       recRst
   \                     ??HalUARTCloseIsr_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp uint16 HalUARTReadIsr(uint8, unsigned char *, uint16)
   \                     HalUARTReadIsr: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x....             LDR.N    R0,??DataTable11_2
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??HalUARTReadIsr_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE021             B.N      ??HalUARTReadIsr_1
   \                     ??HalUARTReadIsr_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       Hal_UART_RxBufLen
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x42A8             CMP      R0,R5
   \   0000001E   0xD200             BCS.N    ??HalUARTReadIsr_2
   \   00000020   0x0005             MOVS     R5,R0
   \                     ??HalUARTReadIsr_2: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable11_2
   \   00000024   0x8901             LDRH     R1,[R0, #+8]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE00D             B.N      ??HalUARTReadIsr_3
   \                     ??HalUARTReadIsr_4: (+1)
   \   0000002A   0x....             LDR.N    R2,??DataTable11_2
   \   0000002C   0x6912             LDR      R2,[R2, #+16]
   \   0000002E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000030   0x5C8A             LDRB     R2,[R1, R2]
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0x5502             STRB     R2,[R0, R4]
   \   00000036   0x1C49             ADDS     R1,R1,#+1
   \   00000038   0x....             LDR.N    R2,??DataTable11_2
   \   0000003A   0x8992             LDRH     R2,[R2, #+12]
   \   0000003C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000003E   0x4291             CMP      R1,R2
   \   00000040   0xD300             BCC.N    ??HalUARTReadIsr_5
   \   00000042   0x2100             MOVS     R1,#+0
   \                     ??HalUARTReadIsr_5: (+1)
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \                     ??HalUARTReadIsr_3: (+1)
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   0x42A8             CMP      R0,R5
   \   0000004C   0xD3ED             BCC.N    ??HalUARTReadIsr_4
   \   0000004E   0x....             LDR.N    R0,??DataTable11_2
   \   00000050   0x8101             STRH     R1,[R0, #+8]
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??HalUARTReadIsr_1: (+1)
   \   00000056   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp uint16 HalUARTWriteIsr(uint8, unsigned char *, uint16)
   \                     HalUARTWriteIsr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x....             LDR.N    R0,??DataTable11_2
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??HalUARTWriteIsr_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE044             B.N      ??HalUARTWriteIsr_1
   \                     ??HalUARTWriteIsr_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable11_2
   \   00000012   0x8A85             LDRH     R5,[R0, #+20]
   \   00000014   0x....             LDR.N    R0,??DataTable11_2
   \   00000016   0x8AC0             LDRH     R0,[R0, #+22]
   \   00000018   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001C   0x42A8             CMP      R0,R5
   \   0000001E   0xD102             BNE.N    ??HalUARTWriteIsr_2
   \   00000020   0x....             LDR.N    R0,??DataTable11_2
   \   00000022   0x8B00             LDRH     R0,[R0, #+24]
   \   00000024   0xE009             B.N      ??HalUARTWriteIsr_3
   \                     ??HalUARTWriteIsr_2: (+1)
   \   00000026   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x4285             CMP      R5,R0
   \   0000002C   0xD204             BCS.N    ??HalUARTWriteIsr_4
   \   0000002E   0x....             LDR.N    R2,??DataTable11_2
   \   00000030   0x8B12             LDRH     R2,[R2, #+24]
   \   00000032   0x1A10             SUBS     R0,R2,R0
   \   00000034   0x1828             ADDS     R0,R5,R0
   \   00000036   0xE000             B.N      ??HalUARTWriteIsr_3
   \                     ??HalUARTWriteIsr_4: (+1)
   \   00000038   0x1A28             SUBS     R0,R5,R0
   \                     ??HalUARTWriteIsr_3: (+1)
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003E   0x42A0             CMP      R0,R4
   \   00000040   0xD201             BCS.N    ??HalUARTWriteIsr_5
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE029             B.N      ??HalUARTWriteIsr_1
   \                     ??HalUARTWriteIsr_5: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR.N    R2,??DataTable11_9
   \   0000004A   0x7010             STRB     R0,[R2, #+0]
   \   0000004C   0x....             LDR.N    R0,??DataTable11_2
   \   0000004E   0x8AC5             LDRH     R5,[R0, #+22]
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xE00D             B.N      ??HalUARTWriteIsr_6
   \                     ??HalUARTWriteIsr_7: (+1)
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x5C42             LDRB     R2,[R0, R1]
   \   00000058   0x....             LDR.N    R3,??DataTable11_2
   \   0000005A   0x69DB             LDR      R3,[R3, #+28]
   \   0000005C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000005E   0x54EA             STRB     R2,[R5, R3]
   \   00000060   0x1C6D             ADDS     R5,R5,#+1
   \   00000062   0x....             LDR.N    R2,??DataTable11_2
   \   00000064   0x8B12             LDRH     R2,[R2, #+24]
   \   00000066   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000068   0x4295             CMP      R5,R2
   \   0000006A   0xD300             BCC.N    ??HalUARTWriteIsr_8
   \   0000006C   0x2500             MOVS     R5,#+0
   \                     ??HalUARTWriteIsr_8: (+1)
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \                     ??HalUARTWriteIsr_6: (+1)
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000074   0x42A0             CMP      R0,R4
   \   00000076   0xD3ED             BCC.N    ??HalUARTWriteIsr_7
   \   00000078   0x.... 0x....      BL       IntMasterDisable
   \   0000007C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000080   0xF090 0x0601      EORS     R6,R0,#0x1
   \   00000084   0x....             LDR.N    R0,??DataTable11_2
   \   00000086   0x82C5             STRH     R5,[R0, #+22]
   \   00000088   0x.... 0x....      BL       procTx
   \   0000008C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008E   0x2E00             CMP      R6,#+0
   \   00000090   0xD001             BEQ.N    ??HalUARTWriteIsr_9
   \   00000092   0x.... 0x....      BL       IntMasterEnable
   \                     ??HalUARTWriteIsr_9: (+1)
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??HalUARTWriteIsr_1: (+1)
   \   0000009A   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp uint16 Hal_UART_RxBufLenIsr(uint8)
   \                     Hal_UART_RxBufLenIsr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_2
   \   00000002   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   00000006   0x....             LDR.N    R1,??DataTable11_2
   \   00000008   0xF9B1 0x1008      LDRSH    R1,[R1, #+8]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD503             BPL.N    ??Hal_UART_RxBufLenIsr_0
   \   00000014   0x....             LDR.N    R1,??DataTable11_2
   \   00000016   0xF9B1 0x100C      LDRSH    R1,[R1, #+12]
   \   0000001A   0x1808             ADDS     R0,R1,R0
   \                     ??Hal_UART_RxBufLenIsr_0: (+1)
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp uint16 Hal_UART_TxBufLen(uint8)
   \                     Hal_UART_TxBufLen: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable11_2
   \   00000002   0xF9B0 0x0016      LDRSH    R0,[R0, #+22]
   \   00000006   0x....             LDR.N    R1,??DataTable11_2
   \   00000008   0xF9B1 0x1014      LDRSH    R1,[R1, #+20]
   \   0000000C   0x1A40             SUBS     R0,R0,R1
   \   0000000E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD503             BPL.N    ??Hal_UART_TxBufLen_0
   \   00000014   0x....             LDR.N    R1,??DataTable11_2
   \   00000016   0xF9B1 0x1018      LDRSH    R1,[R1, #+24]
   \   0000001A   0x1808             ADDS     R0,R1,R0
   \                     ??Hal_UART_TxBufLen_0: (+1)
   \   0000001C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void recRst(void)
   \                     recRst: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable11_2
   \   00000004   0x7008             STRB     R0,[R1, #+0]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable11_2
   \   0000000A   0x8108             STRH     R0,[R1, #+8]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable11_2
   \   00000010   0x8148             STRH     R0,[R1, #+10]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable11_2
   \   00000016   0x6108             STR      R0,[R1, #+16]
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable11_2
   \   0000001C   0x8288             STRH     R0,[R1, #+20]
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable11_2
   \   00000022   0x82C8             STRH     R0,[R1, #+22]
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable11_2
   \   00000028   0x61C8             STR      R0,[R1, #+28]
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable11_2
   \   0000002E   0x6248             STR      R0,[R1, #+36]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable11_2
   \   00000034   0xF881 0x0020      STRB     R0,[R1, #+32]
   \   00000038   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void procRx(void)
   \                     procRx: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable11_2
   \   00000004   0x8944             LDRH     R4,[R0, #+10]
   \   00000006   0xE00D             B.N      ??procRx_0
   \                     ??procRx_1: (+1)
   \   00000008   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   0000000A   0x.... 0x....      BL       UARTCharGetNonBlocking
   \   0000000E   0x....             LDR.N    R1,??DataTable11_2
   \   00000010   0x6909             LDR      R1,[R1, #+16]
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x5460             STRB     R0,[R4, R1]
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \   00000018   0x....             LDR.N    R0,??DataTable11_2
   \   0000001A   0x8980             LDRH     R0,[R0, #+12]
   \   0000001C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001E   0x4284             CMP      R4,R0
   \   00000020   0xD300             BCC.N    ??procRx_0
   \   00000022   0x2400             MOVS     R4,#+0
   \                     ??procRx_0: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   00000026   0x.... 0x....      BL       UARTCharsAvail
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD1EC             BNE.N    ??procRx_1
   \   0000002E   0x....             LDR.N    R0,??DataTable11_2
   \   00000030   0x8940             LDRH     R0,[R0, #+10]
   \   00000032   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000034   0x42A0             CMP      R0,R4
   \   00000036   0xD005             BEQ.N    ??procRx_2
   \   00000038   0x....             LDR.N    R0,??DataTable11_2
   \   0000003A   0x8144             STRH     R4,[R0, #+10]
   \   0000003C   0x.... 0x....      BL       osal_GetSystemClock
   \   00000040   0x....             LDR.N    R1,??DataTable11_2
   \   00000042   0x6248             STR      R0,[R1, #+36]
   \                     ??procRx_2: (+1)
   \   00000044   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void procTx(void)
   \                     procTx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x....             LDR.N    R0,??DataTable11_2
   \   00000004   0x8A84             LDRH     R4,[R0, #+20]
   \   00000006   0x....             LDR.N    R0,??DataTable11_2
   \   00000008   0x8AC5             LDRH     R5,[R0, #+22]
   \   0000000A   0xE006             B.N      ??procTx_0
   \                     ??procTx_1: (+1)
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
   \   0000000E   0x....             LDR.N    R0,??DataTable11_2
   \   00000010   0x8B00             LDRH     R0,[R0, #+24]
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD300             BCC.N    ??procTx_0
   \   00000018   0x2400             MOVS     R4,#+0
   \                     ??procTx_0: (+1)
   \   0000001A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000001E   0x42AC             CMP      R4,R5
   \   00000020   0xD008             BEQ.N    ??procTx_2
   \   00000022   0x....             LDR.N    R0,??DataTable11_2
   \   00000024   0x69C0             LDR      R0,[R0, #+28]
   \   00000026   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000028   0x5C21             LDRB     R1,[R4, R0]
   \   0000002A   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   0000002C   0x.... 0x....      BL       UARTCharPutNonBlocking
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD1EB             BNE.N    ??procTx_1
   \                     ??procTx_2: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable11_2
   \   00000036   0x8284             STRH     R4,[R0, #+20]
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void interrupt_uart1(void)
   \                     interrupt_uart1: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2150             MOVS     R1,#+80
   \   00000004   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   00000006   0x.... 0x....      BL       UARTIntClear
   \   0000000A   0x.... 0x....      BL       procRx
   \   0000000E   0x2122             MOVS     R1,#+34
   \   00000010   0x....             LDR.N    R0,??DataTable11_7  ;; 0x4000d000
   \   00000012   0x.... 0x....      BL       UARTIntClear
   \   00000016   0x.... 0x....      BL       procTx
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     49          #endif
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Global Functions
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          
     56          /*************************************************************************************************
     57           * @fn      HalUARTInit()
     58           *
     59           * @brief   Initialize the UART
     60           *
     61           * @param   none
     62           *
     63           * @return  none
     64           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void HalUARTInit(void)
     66          {
   \                     HalUARTInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     67          #if HAL_UART_USB
     68            HalUARTInitUSB();
     69          #else
     70            HalUARTInitIsr();
   \   00000002   0x.... 0x....      BL       HalUARTInitIsr
     71          #endif
     72          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     73          
     74          /*************************************************************************************************
     75           * @fn      HalUARTOpen()
     76           *
     77           * @brief   Open a port based on the configuration
     78           *
     79           * @param   port   - UART port
     80           *          config - contains configuration information
     81           *          cBack  - Call back function where events will be reported back
     82           *
     83           * @return  Status of the function call
     84           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     85          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
     86          {
   \                     HalUARTOpen: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     87          #if HAL_UART_USB
     88            (void)port;
     89            HalUARTOpenUSB(config);
     90            return HAL_UART_SUCCESS;
     91          #else
     92            return(HalUARTOpenIsr(port, config));
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       HalUARTOpenIsr
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
     93          #endif
     94          }
     95          
     96          /*************************************************************************************************
     97           * @fn      Hal_UARTPoll
     98           *
     99           * @brief   This routine simulate polling and has to be called by the main loop
    100           *
    101           * @param   void
    102           *
    103           * @return  void
    104           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    105          void HalUARTPoll(void)
    106          {
   \                     HalUARTPoll: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    107          #ifdef HAL_UART_USB
    108            HalUARTPollUSB();
    109          #else
    110            HalUARTPollIsr();
   \   00000002   0x.... 0x....      BL       HalUARTPollIsr
    111          #endif
    112          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    113          
    114          /*************************************************************************************************
    115           * @fn      HalUARTClose()
    116           *
    117           * @brief   Close the UART
    118           *
    119           * @param   port - UART port (not used.)
    120           *
    121           * @return  none
    122           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    123          void HalUARTClose(uint8 port)
    124          {
   \                     HalUARTClose: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    125          #ifdef HAL_UART_USB
    126            
    127          #else   
    128           HalUARTCloseIsr(port);
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       HalUARTCloseIsr
    129          #endif
    130          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    131          
    132          /*************************************************************************************************
    133           * @fn      HalUARTRead()
    134           *
    135           * @brief   Read a buffer from the UART
    136           *
    137           * @param   port - UART port (not used.)
    138           *          ppBuffer - pointer to a pointer that points to the data that will be read
    139           *          length - length of the requested buffer
    140           *
    141           * @return  length of buffer that was read
    142           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          uint16 HalUARTRead ( uint8 port, uint8 *pBuffer, uint16 length )
    144          {
   \                     HalUARTRead: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145          #if HAL_UART_USB
    146            return HalUARTRx(pBuffer, length);
    147          #else
    148            return (HalUARTReadIsr( port, pBuffer, length ));
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x.... 0x....      BL       HalUARTReadIsr
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    149          #endif
    150          }
    151          
    152          /*************************************************************************************************
    153           * @fn      HalUARTWrite()
    154           *
    155           * @brief   Write a buffer to the UART
    156           *
    157           * @param   port    - UART port (not used.)
    158           *          pBuffer - pointer to the buffer that will be written
    159           *          length  - length of
    160           *
    161           * @return  length of the buffer that was sent
    162           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    163          uint16 HalUARTWrite(uint8 port, uint8 *pBuffer, uint16 length)
    164          {
   \                     HalUARTWrite: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    165          #if HAL_UART_USB
    166            return HalUARTTx(pBuffer, length);
    167          #else
    168            return (HalUARTWriteIsr( port, pBuffer, length ));
   \   00000002   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x.... 0x....      BL       HalUARTWriteIsr
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    169          #endif
    170          }
    171          
    172          /*************************************************************************************************
    173           * @fn      Hal_UART_RxBufLen()
    174           *
    175           * @brief   Calculate Rx Buffer length of a port
    176           *
    177           * @param   port - UART port (not used.)
    178           *
    179           * @return  length of current Rx Buffer
    180           *************************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          uint16 Hal_UART_RxBufLen (uint8 port)
    182          {
   \                     Hal_UART_RxBufLen: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    183          #if HAL_UART_USB
    184            return HalUARTRxAvailUSB();
    185          #else
    186            return (Hal_UART_RxBufLenIsr(port));
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x.... 0x....      BL       Hal_UART_RxBufLenIsr
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    187          #endif
    188          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x400D9000         DC32     0x400d9000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x400D4108         DC32     0x400d4108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     uartRecord

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x400DC000         DC32     0x400dc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x400D4104         DC32     0x400d4104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x400DA000         DC32     0x400da000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     UBRRTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x4000D030         DC32     0x4000d030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     txMT
    189          
    190          /**************************************************************************************************
    191          */
    192          
    193          
    194          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HalUARTClose
         8   -> HalUARTCloseIsr
       8   HalUARTCloseIsr
         8   -> UARTDisable
         8   -> osal_mem_free
         8   -> recRst
       8   HalUARTInit
         8   -> HalUARTInitIsr
       8   HalUARTInitIsr
         8   -> GPIOPinTypeUARTInput
         8   -> GPIOPinTypeUARTOutput
         8   -> IOCPinConfigPeriphInput
         8   -> IOCPinConfigPeriphOutput
         8   -> SysCtrlPeripheralEnable
         8   -> recRst
       8   HalUARTOpen
         8   -> HalUARTOpenIsr
       8   HalUARTOpenIsr
         8   -> GPIOPinTypeUARTInput
         8   -> GPIOPinTypeUARTOutput
         8   -> HalUARTClose
         8   -> IOCPinConfigPeriphInput
         8   -> IOCPinConfigPeriphOutput
         8   -> IntEnable
         8   -> SysCtrlClockGet
         8   -> UARTConfigSetExpClk
         8   -> UARTEnable
         8   -> UARTFIFOEnable
         8   -> UARTFIFOLevelSet
         8   -> UARTIntClear
         8   -> UARTIntEnable
         8   -> osal_mem_alloc
         8   -> osal_mem_free
       8   HalUARTPoll
         8   -> HalUARTPollIsr
      16   HalUARTPollIsr
        16   -- Indirect call
        16   -> Hal_UART_RxBufLen
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> osal_GetSystemClock
        16   -> procRx
        16   -> procTx
       8   HalUARTRead
         8   -> HalUARTReadIsr
      16   HalUARTReadIsr
        16   -> Hal_UART_RxBufLen
       8   HalUARTWrite
         8   -> HalUARTWriteIsr
      16   HalUARTWriteIsr
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> procTx
       8   Hal_UART_RxBufLen
         8   -> Hal_UART_RxBufLenIsr
       0   Hal_UART_RxBufLenIsr
       0   Hal_UART_TxBufLen
       8   interrupt_uart1
         8   -> UARTIntClear
         8   -> procRx
         8   -> procTx
       8   procRx
         8   -> UARTCharGetNonBlocking
         8   -> UARTCharsAvail
         8   -> osal_GetSystemClock
      16   procTx
        16   -> UARTCharPutNonBlocking
       0   recRst


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
      10  HalUARTClose
      38  HalUARTCloseIsr
       8  HalUARTInit
      62  HalUARTInitIsr
      10  HalUARTOpen
     360  HalUARTOpenIsr
       8  HalUARTPoll
     186  HalUARTPollIsr
      12  HalUARTRead
      88  HalUARTReadIsr
      12  HalUARTWrite
     156  HalUARTWriteIsr
      10  Hal_UART_RxBufLen
      32  Hal_UART_RxBufLenIsr
      32  Hal_UART_TxBufLen
      20  UBRRTable
      28  interrupt_uart1
      70  procRx
      58  procTx
      58  recRst
       1  txMT
      44  uartRecord

 
    45 bytes in section .bss
    20 bytes in section .rodata
 1 278 bytes in section .text
 
 1 278 bytes of CODE  memory
    20 bytes of CONST memory
    45 bytes of DATA  memory

Errors: none
Warnings: none
