###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        06/Aug/2015  22:29:19
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Timers.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Timers.c" -D EVERWRIST -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=TRUE -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1
#        --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\ -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2538DB\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\" -I "C:\Texas Instruments\Z-Stack
#        Mesh 1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -I
#        "C:\Texas
#        Instruments\cc2538_foundation_firmware_1_0_1_0\driverlib\cc2538\source\"
#        -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\OSAL_Timers.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\OSAL_Timers.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2012-11-28 00:37:02 -0800 (Wed, 28 Nov 2012) $
      4            Revision:       $Revision: 32329 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef union {
     63            uint32 time32;
     64            uint16 time16[2];
     65            uint8 time8[4];
     66          } osalTime_t;
     67          
     68          typedef struct
     69          {
     70            void   *next;
     71            osalTime_t timeout;
     72            uint16 event_flag;
     73            uint8  task_id;
     74            uint32 reloadTimeout;
     75          } osalTimerRec_t;
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          

   \                                 In section .bss, align 4
     81          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   00000000                      DS8 4
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          // Milliseconds since last reboot

   \                                 In section .bss, align 4
     95          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   00000000                      DS8 4
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTION PROTOTYPES
     99           */
    100          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
    101          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
    102          void osalDeleteTimer( osalTimerRec_t *rmTimer );
    103          
    104          /*********************************************************************
    105           * FUNCTIONS
    106           *********************************************************************/
    107          
    108          /*********************************************************************
    109           * @fn      osalTimerInit
    110           *
    111           * @brief   Initialization for the OSAL Timer System.
    112           *
    113           * @param   none
    114           *
    115           * @return
    116           */

   \                                 In section .text, align 2, keep-with-next
    117          void osalTimerInit( void )
    118          {
    119            osal_systemClock = 0;
   \                     osalTimerInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable5
   \   00000004   0x6008             STR      R0,[R1, #+0]
    120          }
   \   00000006   0x4770             BX       LR               ;; return
    121          
    122          /*********************************************************************
    123           * @fn      osalAddTimer
    124           *
    125           * @brief   Add a timer to the timer list.
    126           *          Ints must be disabled.
    127           *
    128           * @param   task_id
    129           * @param   event_flag
    130           * @param   timeout
    131           *
    132           * @return  osalTimerRec_t * - pointer to newly created timer
    133           */

   \                                 In section .text, align 2, keep-with-next
    134          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
    135          {
   \                     osalAddTimer: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    136            osalTimerRec_t *newTimer;
    137            osalTimerRec_t *srchTimer;
    138          
    139            // Look for an existing timer first
    140            newTimer = osalFindTimer( task_id, event_flag );
   \   00000008   0x0029             MOVS     R1,R5
   \   0000000A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       osalFindTimer
    141            if ( newTimer )
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD001             BEQ.N    ??osalAddTimer_0
    142            {
    143              // Timer is found - update it.
    144              newTimer->timeout.time32 = timeout;
   \   00000018   0x6046             STR      R6,[R0, #+4]
    145          
    146              return ( newTimer );
   \   0000001A   0xE01C             B.N      ??osalAddTimer_1
    147            }
    148            else
    149            {
    150              // New Timer
    151              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_0: (+1)
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x.... 0x....      BL       osal_mem_alloc
    152          
    153              if ( newTimer )
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD016             BEQ.N    ??osalAddTimer_2
    154              {
    155                // Fill in new timer
    156                newTimer->task_id = task_id;
   \   00000026   0x7284             STRB     R4,[R0, #+10]
    157                newTimer->event_flag = event_flag;
   \   00000028   0x8105             STRH     R5,[R0, #+8]
    158                newTimer->timeout.time32 = timeout;
   \   0000002A   0x6046             STR      R6,[R0, #+4]
    159                newTimer->next = (void *)NULL;
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    160                newTimer->reloadTimeout = 0;
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x60C1             STR      R1,[R0, #+12]
    161          
    162                // Does the timer list already exist
    163                if ( timerHead == NULL )
   \   00000034   0x....             LDR.N    R1,??DataTable5_1
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD102             BNE.N    ??osalAddTimer_3
    164                {
    165                  // Start task list
    166                  timerHead = newTimer;
   \   0000003C   0x....             LDR.N    R1,??DataTable5_1
   \   0000003E   0x6008             STR      R0,[R1, #+0]
   \   00000040   0xE007             B.N      ??osalAddTimer_4
    167                }
    168                else
    169                {
    170                  // Add it to the end of the timer list
    171                  srchTimer = timerHead;
   \                     ??osalAddTimer_3: (+1)
   \   00000042   0x....             LDR.N    R1,??DataTable5_1
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0xE000             B.N      ??osalAddTimer_5
    172          
    173                  // Stop at the last record
    174                  while ( srchTimer->next )
    175                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_6: (+1)
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \                     ??osalAddTimer_5: (+1)
   \   0000004A   0x680A             LDR      R2,[R1, #+0]
   \   0000004C   0x2A00             CMP      R2,#+0
   \   0000004E   0xD1FB             BNE.N    ??osalAddTimer_6
    176          
    177                  // Add to the list
    178                  srchTimer->next = newTimer;
   \   00000050   0x6008             STR      R0,[R1, #+0]
    179                }
    180          
    181                return ( newTimer );
   \                     ??osalAddTimer_4: (+1)
   \   00000052   0xE000             B.N      ??osalAddTimer_1
    182              }
    183              else
    184              {
    185                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_2: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \                     ??osalAddTimer_1: (+1)
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    186              }
    187            }
    188          }
    189          
    190          /*********************************************************************
    191           * @fn      osalFindTimer
    192           *
    193           * @brief   Find a timer in a timer list.
    194           *          Ints must be disabled.
    195           *
    196           * @param   task_id
    197           * @param   event_flag
    198           *
    199           * @return  osalTimerRec_t *
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
    202          {
    203            osalTimerRec_t *srchTimer;
    204          
    205            // Head of the timer list
    206            srchTimer = timerHead;
   \                     osalFindTimer: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable5_1
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xE000             B.N      ??osalFindTimer_0
    207          
    208            // Stop when found or at the end
    209            while ( srchTimer )
    210            {
    211              if ( srchTimer->event_flag == event_flag &&
    212                   srchTimer->task_id == task_id )
    213              {
    214                break;
    215              }
    216          
    217              // Not this one, check another
    218              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1: (+1)
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \                     ??osalFindTimer_0: (+1)
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD007             BEQ.N    ??osalFindTimer_2
   \   0000000C   0x8913             LDRH     R3,[R2, #+8]
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD1F8             BNE.N    ??osalFindTimer_1
   \   00000014   0x7A93             LDRB     R3,[R2, #+10]
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x4283             CMP      R3,R0
   \   0000001A   0xD1F4             BNE.N    ??osalFindTimer_1
    219            }
    220          
    221            return ( srchTimer );
   \                     ??osalFindTimer_2: (+1)
   \   0000001C   0x0010             MOVS     R0,R2
   \   0000001E   0x4770             BX       LR               ;; return
    222          }
    223          
    224          /*********************************************************************
    225           * @fn      osalDeleteTimer
    226           *
    227           * @brief   Delete a timer from a timer list.
    228           *
    229           * @param   table
    230           * @param   rmTimer
    231           *
    232           * @return  none
    233           */

   \                                 In section .text, align 2, keep-with-next
    234          void osalDeleteTimer( osalTimerRec_t *rmTimer )
    235          {
    236            // Does the timer list really exist
    237            if ( rmTimer )
   \                     osalDeleteTimer: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ.N    ??osalDeleteTimer_0
    238            {
    239              // Clear the event flag and osalTimerUpdate() will delete
    240              // the timer from the list.
    241              rmTimer->event_flag = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x8101             STRH     R1,[R0, #+8]
    242            }
    243          }
   \                     ??osalDeleteTimer_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return
    244          
    245          /*********************************************************************
    246           * @fn      osal_start_timerEx
    247           *
    248           * @brief
    249           *
    250           *   This function is called to start a timer to expire in n mSecs.
    251           *   When the timer expires, the calling task will get the specified event.
    252           *
    253           * @param   uint8 taskID - task id to set timer for
    254           * @param   uint16 event_id - event to be notified with
    255           * @param   uint32 timeout_value - in milliseconds.
    256           *
    257           * @return  SUCCESS, or NO_TIMER_AVAIL.
    258           */

   \                                 In section .text, align 2, keep-with-next
    259          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
    260          {
   \                     osal_start_timerEx: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    261            halIntState_t intState;
    262            osalTimerRec_t *newTimer;
    263          
    264            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000008   0x.... 0x....      BL       IntMasterDisable
   \   0000000C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000010   0xF090 0x0701      EORS     R7,R0,#0x1
    265          
    266            // Add timer
    267            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       osalAddTimer
   \   00000022   0x0004             MOVS     R4,R0
    268          
    269            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00000024   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000026   0x2F00             CMP      R7,#+0
   \   00000028   0xD001             BEQ.N    ??osal_start_timerEx_0
   \   0000002A   0x.... 0x....      BL       IntMasterEnable
    270          
    271            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \                     ??osal_start_timerEx_0: (+1)
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD001             BEQ.N    ??osal_start_timerEx_1
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??osal_start_timerEx_2
   \                     ??osal_start_timerEx_1: (+1)
   \   00000036   0x2008             MOVS     R0,#+8
   \                     ??osal_start_timerEx_2: (+1)
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    272          }
    273          
    274          /*********************************************************************
    275           * @fn      osal_start_reload_timer
    276           *
    277           * @brief
    278           *
    279           *   This function is called to start a timer to expire in n mSecs.
    280           *   When the timer expires, the calling task will get the specified event
    281           *   and the timer will be reloaded with the timeout value.
    282           *
    283           * @param   uint8 taskID - task id to set timer for
    284           * @param   uint16 event_id - event to be notified with
    285           * @param   UNINT16 timeout_value - in milliseconds.
    286           *
    287           * @return  SUCCESS, or NO_TIMER_AVAIL.
    288           */

   \                                 In section .text, align 2, keep-with-next
    289          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
    290          {
   \                     osal_start_reload_timer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    291            halIntState_t intState;
    292            osalTimerRec_t *newTimer;
    293          
    294            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000008   0x.... 0x....      BL       IntMasterDisable
   \   0000000C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000010   0xF090 0x0701      EORS     R7,R0,#0x1
    295          
    296            // Add timer
    297            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0x.... 0x....      BL       osalAddTimer
   \   00000022   0x0004             MOVS     R4,R0
    298            if ( newTimer )
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD000             BEQ.N    ??osal_start_reload_timer_0
    299            {
    300              // Load the reload timeout value
    301              newTimer->reloadTimeout = timeout_value;
   \   00000028   0x60E6             STR      R6,[R4, #+12]
    302            }
    303          
    304            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0: (+1)
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0x2F00             CMP      R7,#+0
   \   0000002E   0xD001             BEQ.N    ??osal_start_reload_timer_1
   \   00000030   0x.... 0x....      BL       IntMasterEnable
    305          
    306            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \                     ??osal_start_reload_timer_1: (+1)
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD001             BEQ.N    ??osal_start_reload_timer_2
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE000             B.N      ??osal_start_reload_timer_3
   \                     ??osal_start_reload_timer_2: (+1)
   \   0000003C   0x2008             MOVS     R0,#+8
   \                     ??osal_start_reload_timer_3: (+1)
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    307          }
    308          
    309          /*********************************************************************
    310           * @fn      osal_stop_timerEx
    311           *
    312           * @brief
    313           *
    314           *   This function is called to stop a timer that has already been started.
    315           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    316           *   associated with the timer from being set for the calling task.
    317           *
    318           * @param   uint8 task_id - task id of timer to stop
    319           * @param   uint16 event_id - identifier of the timer that is to be stopped
    320           *
    321           * @return  SUCCESS or INVALID_EVENT_ID
    322           */

   \                                 In section .text, align 2, keep-with-next
    323          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
    324          {
   \                     osal_stop_timerEx: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    325            halIntState_t intState;
    326            osalTimerRec_t *foundTimer;
    327          
    328            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000006   0x.... 0x....      BL       IntMasterDisable
   \   0000000A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000E   0xF090 0x0601      EORS     R6,R0,#0x1
    329          
    330            // Find the timer to stop
    331            foundTimer = osalFindTimer( task_id, event_id );
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x.... 0x....      BL       osalFindTimer
   \   0000001E   0x0004             MOVS     R4,R0
    332            if ( foundTimer )
   \   00000020   0x2C00             CMP      R4,#+0
   \   00000022   0xD002             BEQ.N    ??osal_stop_timerEx_0
    333            {
    334              osalDeleteTimer( foundTimer );
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       osalDeleteTimer
    335            }
    336          
    337            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0: (+1)
   \   0000002A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD001             BEQ.N    ??osal_stop_timerEx_1
   \   00000030   0x.... 0x....      BL       IntMasterEnable
    338          
    339            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \                     ??osal_stop_timerEx_1: (+1)
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD001             BEQ.N    ??osal_stop_timerEx_2
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE000             B.N      ??osal_stop_timerEx_3
   \                     ??osal_stop_timerEx_2: (+1)
   \   0000003C   0x2006             MOVS     R0,#+6
   \                     ??osal_stop_timerEx_3: (+1)
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    340          }
    341          
    342          /*********************************************************************
    343           * @fn      osal_get_timeoutEx
    344           *
    345           * @brief
    346           *
    347           * @param   uint8 task_id - task id of timer to check
    348           * @param   uint16 event_id - identifier of timer to be checked
    349           *
    350           * @return  Return the timer's tick count if found, zero otherwise.
    351           */

   \                                 In section .text, align 2, keep-with-next
    352          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
    353          {
   \                     osal_get_timeoutEx: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    354            halIntState_t intState;
    355            uint32 rtrn = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    356            osalTimerRec_t *tmr;
    357          
    358            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000008   0x.... 0x....      BL       IntMasterDisable
   \   0000000C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000010   0xF090 0x0601      EORS     R6,R0,#0x1
    359          
    360            tmr = osalFindTimer( task_id, event_id );
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       osalFindTimer
    361          
    362            if ( tmr )
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD000             BEQ.N    ??osal_get_timeoutEx_0
    363            {
    364              rtrn = tmr->timeout.time32;
   \   00000024   0x6847             LDR      R7,[R0, #+4]
    365            }
    366          
    367            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0: (+1)
   \   00000026   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD001             BEQ.N    ??osal_get_timeoutEx_1
   \   0000002C   0x.... 0x....      BL       IntMasterEnable
    368          
    369            return rtrn;
   \                     ??osal_get_timeoutEx_1: (+1)
   \   00000030   0x0038             MOVS     R0,R7
   \   00000032   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      osal_timer_num_active
    374           *
    375           * @brief
    376           *
    377           *   This function counts the number of active timers.
    378           *
    379           * @return  uint8 - number of timers
    380           */

   \                                 In section .text, align 2, keep-with-next
    381          uint8 osal_timer_num_active( void )
    382          {
   \                     osal_timer_num_active: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    383            halIntState_t intState;
    384            uint8 num_timers = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    385            osalTimerRec_t *srchTimer;
    386          
    387            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000004   0x.... 0x....      BL       IntMasterDisable
   \   00000008   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000C   0xF090 0x0001      EORS     R0,R0,#0x1
    388          
    389            // Head of the timer list
    390            srchTimer = timerHead;
   \   00000010   0x....             LDR.N    R1,??DataTable5_1
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xE001             B.N      ??osal_timer_num_active_0
    391          
    392            // Count timers in the list
    393            while ( srchTimer != NULL )
    394            {
    395              num_timers++;
   \                     ??osal_timer_num_active_1: (+1)
   \   00000016   0x1C64             ADDS     R4,R4,#+1
    396              srchTimer = srchTimer->next;
   \   00000018   0x6809             LDR      R1,[R1, #+0]
    397            }
   \                     ??osal_timer_num_active_0: (+1)
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1FB             BNE.N    ??osal_timer_num_active_1
    398          
    399            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD001             BEQ.N    ??osal_timer_num_active_2
   \   00000024   0x.... 0x....      BL       IntMasterEnable
    400          
    401            return num_timers;
   \                     ??osal_timer_num_active_2: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    402          }
    403          
    404          /*********************************************************************
    405           * @fn      osalTimerUpdate
    406           *
    407           * @brief   Update the timer structures for a timer tick.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           *********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    413          void osalTimerUpdate( uint32 updateTime )
    414          {
   \                     osalTimerUpdate: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
    415            halIntState_t intState;
    416            osalTimerRec_t *srchTimer;
    417            osalTimerRec_t *prevTimer;
    418          
    419            osalTime_t timeUnion;
    420            timeUnion.time32 = updateTime;
   \   00000004   0x9500             STR      R5,[SP, #+0]
    421          
    422            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00000006   0x.... 0x....      BL       IntMasterDisable
   \   0000000A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000E   0xF090 0x0401      EORS     R4,R0,#0x1
    423            // Update the system time
    424            osal_systemClock += updateTime;
   \   00000012   0x....             LDR.N    R0,??DataTable5
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1828             ADDS     R0,R5,R0
   \   00000018   0x....             LDR.N    R1,??DataTable5
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    425            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xD001             BEQ.N    ??osalTimerUpdate_0
   \   00000022   0x.... 0x....      BL       IntMasterEnable
    426          
    427            // Look for open timer slot
    428            if ( timerHead != NULL )
   \                     ??osalTimerUpdate_0: (+1)
   \   00000026   0x....             LDR.N    R0,??DataTable5_1
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD072             BEQ.N    ??osalTimerUpdate_1
    429            {
    430              // Add it to the end of the timer list
    431              srchTimer = timerHead;
   \   0000002E   0x....             LDR.N    R0,??DataTable5_1
   \   00000030   0x6806             LDR      R6,[R0, #+0]
    432              prevTimer = (void *)NULL;
   \   00000032   0x2500             MOVS     R5,#+0
   \   00000034   0xE015             B.N      ??osalTimerUpdate_2
    433          
    434              // Look for open timer slot
    435              while ( srchTimer )
    436              {
    437                osalTimerRec_t *freeTimer = NULL;
    438          
    439                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    440          
    441                // To minimize time in this critical section, avoid 32-bit math
    442                if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
    443                {
    444                  // If upper 24 bits are zero, check lower 8 bits for roll over
    445                  if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
    446                  {
    447                    // 8-bit math
    448                    srchTimer->timeout.time8[0] -= timeUnion.time8[0];
    449                  }
    450                  else
    451                  {
    452                    // 32-bit math
    453                    if (srchTimer->timeout.time32 > timeUnion.time32)
    454                    {
    455                      srchTimer->timeout.time32 -= timeUnion.time32;
    456                    }
    457                    else
    458                    {
    459                      srchTimer->timeout.time32 = 0;
    460                    }
    461                  }
    462                }
    463                else
    464                {
    465                    // 32-bit math
    466                  if (srchTimer->timeout.time32 > timeUnion.time32)
    467                  {
    468                    srchTimer->timeout.time32 -= timeUnion.time32;
    469                  }
    470                  else
    471                  {
    472                    srchTimer->timeout.time32 = 0;
    473                  }
    474                }
    475          
    476                // Check for reloading
    477                if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
    478                     (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
    479                {
    480                  // Notify the task of a timeout
    481                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    482          
    483                  // Reload the timer timeout value
    484                  srchTimer->timeout.time32 = srchTimer->reloadTimeout;
    485                }
    486          
    487                // When timeout or delete (event_flag == 0)
    488                if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
    489                      (srchTimer->event_flag == 0) )
    490                {
    491                  // Take out of list
    492                  if ( prevTimer == NULL )
    493                  {
    494                    timerHead = srchTimer->next;
    495                  }
    496                  else
    497                  {
    498                    prevTimer->next = srchTimer->next;
    499                  }
    500          
    501                  // Setup to free memory
    502                  freeTimer = srchTimer;
    503          
    504                  // Next
    505                  srchTimer = srchTimer->next;
    506                }
    507                else
    508                {
    509                  // Get next
    510                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_3: (+1)
   \   00000036   0x0035             MOVS     R5,R6
    511                  srchTimer = srchTimer->next;
   \   00000038   0x6836             LDR      R6,[R6, #+0]
    512                }
    513          
    514                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osalTimerUpdate_4: (+1)
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x2C00             CMP      R4,#+0
   \   0000003E   0xD001             BEQ.N    ??osalTimerUpdate_5
   \   00000040   0x.... 0x....      BL       IntMasterEnable
    515          
    516                if ( freeTimer )
   \                     ??osalTimerUpdate_5: (+1)
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xD00C             BEQ.N    ??osalTimerUpdate_2
    517                {
    518                  if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
   \   00000048   0x88B8             LDRH     R0,[R7, #+4]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD106             BNE.N    ??osalTimerUpdate_6
   \   0000004E   0x88F8             LDRH     R0,[R7, #+6]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD103             BNE.N    ??osalTimerUpdate_6
    519                  {
    520                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   00000054   0x8939             LDRH     R1,[R7, #+8]
   \   00000056   0x7AB8             LDRB     R0,[R7, #+10]
   \   00000058   0x.... 0x....      BL       osal_set_event
    521                  }
    522                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_6: (+1)
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       osal_mem_free
    523                }
   \                     ??osalTimerUpdate_2: (+1)
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD056             BEQ.N    ??osalTimerUpdate_1
   \   00000066   0x2700             MOVS     R7,#+0
   \   00000068   0x.... 0x....      BL       IntMasterDisable
   \   0000006C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000070   0xF090 0x0401      EORS     R4,R0,#0x1
   \   00000074   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD11A             BNE.N    ??osalTimerUpdate_7
   \   0000007C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD116             BNE.N    ??osalTimerUpdate_7
   \   00000084   0x7930             LDRB     R0,[R6, #+4]
   \   00000086   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD305             BCC.N    ??osalTimerUpdate_8
   \   0000008E   0x7930             LDRB     R0,[R6, #+4]
   \   00000090   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0x7130             STRB     R0,[R6, #+4]
   \   00000098   0xE016             B.N      ??osalTimerUpdate_9
   \                     ??osalTimerUpdate_8: (+1)
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x6871             LDR      R1,[R6, #+4]
   \   0000009E   0x4288             CMP      R0,R1
   \   000000A0   0xD204             BCS.N    ??osalTimerUpdate_10
   \   000000A2   0x6870             LDR      R0,[R6, #+4]
   \   000000A4   0x9900             LDR      R1,[SP, #+0]
   \   000000A6   0x1A40             SUBS     R0,R0,R1
   \   000000A8   0x6070             STR      R0,[R6, #+4]
   \   000000AA   0xE00D             B.N      ??osalTimerUpdate_9
   \                     ??osalTimerUpdate_10: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x6070             STR      R0,[R6, #+4]
   \   000000B0   0xE00A             B.N      ??osalTimerUpdate_9
   \                     ??osalTimerUpdate_7: (+1)
   \   000000B2   0x9800             LDR      R0,[SP, #+0]
   \   000000B4   0x6871             LDR      R1,[R6, #+4]
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xD204             BCS.N    ??osalTimerUpdate_11
   \   000000BA   0x6870             LDR      R0,[R6, #+4]
   \   000000BC   0x9900             LDR      R1,[SP, #+0]
   \   000000BE   0x1A40             SUBS     R0,R0,R1
   \   000000C0   0x6070             STR      R0,[R6, #+4]
   \   000000C2   0xE001             B.N      ??osalTimerUpdate_9
   \                     ??osalTimerUpdate_11: (+1)
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x6070             STR      R0,[R6, #+4]
   \                     ??osalTimerUpdate_9: (+1)
   \   000000C8   0x88B0             LDRH     R0,[R6, #+4]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD10E             BNE.N    ??osalTimerUpdate_12
   \   000000CE   0x88F0             LDRH     R0,[R6, #+6]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD10B             BNE.N    ??osalTimerUpdate_12
   \   000000D4   0x68F0             LDR      R0,[R6, #+12]
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD008             BEQ.N    ??osalTimerUpdate_12
   \   000000DA   0x8930             LDRH     R0,[R6, #+8]
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD005             BEQ.N    ??osalTimerUpdate_12
   \   000000E0   0x8931             LDRH     R1,[R6, #+8]
   \   000000E2   0x7AB0             LDRB     R0,[R6, #+10]
   \   000000E4   0x.... 0x....      BL       osal_set_event
   \   000000E8   0x68F0             LDR      R0,[R6, #+12]
   \   000000EA   0x6070             STR      R0,[R6, #+4]
   \                     ??osalTimerUpdate_12: (+1)
   \   000000EC   0x88B0             LDRH     R0,[R6, #+4]
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD102             BNE.N    ??osalTimerUpdate_13
   \   000000F2   0x88F0             LDRH     R0,[R6, #+6]
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD002             BEQ.N    ??osalTimerUpdate_14
   \                     ??osalTimerUpdate_13: (+1)
   \   000000F8   0x8930             LDRH     R0,[R6, #+8]
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD19B             BNE.N    ??osalTimerUpdate_3
   \                     ??osalTimerUpdate_14: (+1)
   \   000000FE   0x2D00             CMP      R5,#+0
   \   00000100   0xD103             BNE.N    ??osalTimerUpdate_15
   \   00000102   0x6830             LDR      R0,[R6, #+0]
   \   00000104   0x....             LDR.N    R1,??DataTable5_1
   \   00000106   0x6008             STR      R0,[R1, #+0]
   \   00000108   0xE001             B.N      ??osalTimerUpdate_16
   \                     ??osalTimerUpdate_15: (+1)
   \   0000010A   0x6830             LDR      R0,[R6, #+0]
   \   0000010C   0x6028             STR      R0,[R5, #+0]
   \                     ??osalTimerUpdate_16: (+1)
   \   0000010E   0x0037             MOVS     R7,R6
   \   00000110   0x6836             LDR      R6,[R6, #+0]
   \   00000112   0xE792             B.N      ??osalTimerUpdate_4
    524              }
    525            }
    526          }
   \                     ??osalTimerUpdate_1: (+1)
   \   00000114   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    527          
    528          #ifdef POWER_SAVING
    529          /*********************************************************************
    530           * @fn      osal_adjust_timers
    531           *
    532           * @brief   Update the timer structures for elapsed ticks.
    533           *
    534           * @param   none
    535           *
    536           * @return  none
    537           *********************************************************************/
    538          void osal_adjust_timers( void )
    539          {
    540            uint32 eTime;
    541          
    542            if ( timerHead != NULL )
    543            {
    544              // Compute elapsed time (msec)
    545              eTime = TimerElapsed() / TICK_COUNT;
    546          
    547              if ( eTime )
    548              {
    549                osalTimerUpdate( eTime );
    550              }
    551            }
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      osal_next_timeout
    556           *
    557           * @brief
    558           *
    559           *   Search timer table to return the lowest timeout value. If the
    560           *   timer list is empty, then the returned timeout will be zero.
    561           *
    562           * @param   none
    563           *
    564           * @return  none
    565           *********************************************************************/
    566          uint32 osal_next_timeout( void )
    567          {
    568            uint32 nextTimeout;
    569            osalTimerRec_t *srchTimer;
    570          
    571            if ( timerHead != NULL )
    572            {
    573              // Head of the timer list
    574              srchTimer = timerHead;
    575              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    576          
    577              // Look for the next timeout timer
    578              while ( srchTimer != NULL )
    579              {
    580                if (srchTimer->timeout.time32 < nextTimeout)
    581                {
    582                  nextTimeout = srchTimer->timeout.time32;
    583                }
    584                // Check next timer
    585                srchTimer = srchTimer->next;
    586              }
    587            }
    588            else
    589            {
    590              // No timers
    591              nextTimeout = 0;
    592            }
    593          
    594            return ( nextTimeout );
    595          }
    596          #endif // POWER_SAVING
    597          
    598          /*********************************************************************
    599           * @fn      osal_GetSystemClock()
    600           *
    601           * @brief   Read the local system clock.
    602           *
    603           * @param   none
    604           *
    605           * @return  local clock in milliseconds
    606           */

   \                                 In section .text, align 2, keep-with-next
    607          uint32 osal_GetSystemClock( void )
    608          {
    609            return ( osal_systemClock );
   \                     osal_GetSystemClock: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    610          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     osal_systemClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     timerHead
    611          
    612          /*********************************************************************
    613          *********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   osalAddTimer
        16   -> osalFindTimer
        16   -> osal_mem_alloc
       0   osalDeleteTimer
       0   osalFindTimer
       0   osalTimerInit
      24   osalTimerUpdate
        24   -> IntMasterDisable
        24   -> IntMasterEnable
        24   -> osal_mem_free
        24   -> osal_set_event
       0   osal_GetSystemClock
      24   osal_get_timeoutEx
        24   -> IntMasterDisable
        24   -> IntMasterEnable
        24   -> osalFindTimer
      24   osal_start_reload_timer
        24   -> IntMasterDisable
        24   -> IntMasterEnable
        24   -> osalAddTimer
      24   osal_start_timerEx
        24   -> IntMasterDisable
        24   -> IntMasterEnable
        24   -> osalAddTimer
      16   osal_stop_timerEx
        16   -> IntMasterDisable
        16   -> IntMasterEnable
        16   -> osalDeleteTimer
        16   -> osalFindTimer
       8   osal_timer_num_active
         8   -> IntMasterDisable
         8   -> IntMasterEnable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
      88  osalAddTimer
      10  osalDeleteTimer
      32  osalFindTimer
       8  osalTimerInit
     278  osalTimerUpdate
       6  osal_GetSystemClock
      52  osal_get_timeoutEx
      66  osal_start_reload_timer
      60  osal_start_timerEx
      66  osal_stop_timerEx
       4  osal_systemClock
      46  osal_timer_num_active
       4  timerHead

 
   8 bytes in section .bss
 720 bytes in section .text
 
 720 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
