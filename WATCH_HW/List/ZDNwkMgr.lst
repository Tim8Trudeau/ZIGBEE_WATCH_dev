###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.1.8447/W32 for ARM        06/Aug/2015  22:29:20
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDNwkMgr.c
#    Command line =  
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDNwkMgr.c" -D EVERWRIST -D
#        FEATURE_RESET_MACRO -D ewarm -D NWK_AUTO_POLL -D xPOWER_SAVING -D
#        ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=TRUE -D CC2538_USE_ALTERNATE_INTERRUPT_MAP=1
#        --preprocess=cl
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lC
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ -lB
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\
#        --diag_suppress Pa082 -o
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=5000 -DQUEUED_POLL_RATE=100
#        -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440) -f
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\f8wEndev.cfg
#        (-DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\ -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2538DB\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\hal\include\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2538\" -I "C:\Texas Instruments\Z-Stack
#        Mesh 1.0.0\Components\driverlib\cc2538\inc\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\driverlib\cc2538\source\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\bsp\srf06eb_cc2538\drivers\source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\high_level\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf05\single_chip\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf05\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\mt\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\osal\include\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Components\services\sdata\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sapi\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\zmac\f8w\" -I
#        "C:\Texas
#        Instruments\cc2538_foundation_firmware_1_0_1_0\driverlib\cc2538\source\"
#        -Ol
#    List file    =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\List\ZDNwkMgr.lst
#    Object file  =  
#        C:\Users\TimT\Documents\SandBox\ZIGBEE_WATCH_dev\WATCH_HW\Obj\ZDNwkMgr.o
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDNwkMgr.c
      1          /**************************************************************************************************
      2            Filename:       ZDNwkMgr.c
      3            Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
      4            Revision:       $Revision: 15716 $
      5          
      6            Description:    The ZigBee Network Manager.
      7          
      8          
      9            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "nwk_util.h"
     50          #include "ZDApp.h"
     51          #include "ZDObject.h"
     52          #include "ZGlobals.h"
     53          #include "ZDNwkMgr.h"
     54          
     55          #if defined( MT_ZDO_FUNC )
     56            #include "MT_ZDO.h"
     57          #endif
     58            
     59          #if defined ( LCD_SUPPORTED )
     60            #include "OnBoard.h"
     61          #endif
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65            
     66          /******************************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
     71          
     72          #if defined ( LCD_SUPPORTED )

   \                                 In section .rodata, align 4
     73            const char NwkMgrStr_1[]     = "NM-fail not hi";
   \                     NwkMgrStr_1:
   \   00000000   0x4E 0x4D          DC8 "NM-fail not hi"
   \              0x2D 0x66    
   \              0x61 0x69    
   \              0x6C 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x68 0x69    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
     74            const char NwkMgrStr_2[]     = "NM-cur<last fail";
   \                     NwkMgrStr_2:
   \   00000000   0x4E 0x4D          DC8 "NM-cur<last fail"
   \              0x2D 0x63    
   \              0x75 0x72    
   \              0x3C 0x6C    
   \              0x61 0x73    
   \              0x74 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
     75            const char NwkMgrStr_3[]     = "NM-energy too hi";
   \                     NwkMgrStr_3:
   \   00000000   0x4E 0x4D          DC8 "NM-energy too hi"
   \              0x2D 0x65    
   \              0x6E 0x65    
   \              0x72 0x67    
   \              0x79 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x68 0x69    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
     76            const char NwkMgrStr_4[]     = "NM-energy not up";
   \                     NwkMgrStr_4:
   \   00000000   0x4E 0x4D          DC8 "NM-energy not up"
   \              0x2D 0x65    
   \              0x6E 0x65    
   \              0x72 0x67    
   \              0x79 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     77          #endif
     78            
     79          /******************************************************************************
     80           * TYPEDEFS
     81           */
     82          
     83          /*********************************************************************
     84           * GLOBAL VARIABLES
     85           */
     86            
     87          // Task ID for internal task/event processing. This variable will be
     88          // received when ZDNwkMgr_Init() is called.

   \                                 In section .bss, align 1
     89          uint8 ZDNwkMgr_TaskID = 0;
   \                     ZDNwkMgr_TaskID:
   \   00000000                      DS8 1
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          
     95          // Frequency Agility variables

   \                                 In section .bss, align 1
     96          uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     97          zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
   \                     ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
   \   00000000                      DS8 12

   \                                 In section .bss, align 2
     98          uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
   \                     ZDNwkMgr_UpdateNotifyTimer:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     99          uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ZDNwkMgr_NumUpdateNotifySent:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    100          uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \                     ZDNwkMgr_WaitingForNotifyConfirm:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
    101          uint16 ZDNwkMgr_TotalTransmissions;
   \                     ZDNwkMgr_TotalTransmissions:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    102          uint16 ZDNwkMgr_TxFailures;
   \                     ZDNwkMgr_TxFailures:
   \   00000000                      DS8 2
    103          

   \                                 In section .bss, align 4
    104          ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
   \                     ZDNwkMgr_MgmtNwkUpdateReq:
   \   00000000                      DS8 12
    105            
    106          #if defined ( NWK_MANAGER )
    107          uint16 ZDNwkMgr_UpdateRequestTimer = 0;
    108          uint8  ZDNwkMgr_LastChannelEnergy = 0;
    109          uint16 ZDNwkMgr_LastChannelFailureRate = 0;
    110          #endif // NWK_MANAGER
    111          

   \                                 In section .bss, align 1
    112          uint8 ZDNwkMgr_NewChannel;
   \                     ZDNwkMgr_NewChannel:
   \   00000000                      DS8 1
    113          
    114          // PAN ID Conflict variables
    115          #if defined ( NWK_MANAGER )
    116          uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
    117          #endif // NWK_MANAGER
    118          
    119          /*********************************************************************
    120           * GLOBAL FUNCTIONS
    121           */
    122          // Freguency Agility functions

   \                                 In section .bss, align 4
    123          void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
   \                     pZDNwkMgr_ReportChannelInterference:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    124          void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
   \                     pZDNwkMgr_ProcessDataConfirm:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    125          void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
   \                     pZDNwkMgr_EDScanConfirmCB:
   \   00000000                      DS8 4
    126          
    127          // PAN ID Conflict functions

   \                                 In section .bss, align 4
    128          void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
   \                     pZDNwkMgr_NetworkReportCB:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    129          void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
   \                     pZDNwkMgr_NetworkUpdateCB:
   \   00000000                      DS8 4
    130          
    131          /******************************************************************************
    132           * LOCAL FUNCTIONS
    133           */
    134          
    135          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
    136          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
    137          
    138          // Frequency Agility functions
    139          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    140          
    141          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
    142          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
    143          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    144          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
    145          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    146                                                         uint16 totalTransmissions, uint16 txFailures,
    147                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
    148          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
    149          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
    150          void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
    151          
    152          #if defined ( NWK_MANAGER )
    153          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
    154          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
    155          #endif // NWK_MANAGER
    156          
    157          // PAN ID Conflict functions
    158          #if defined ( NWK_MANAGER )
    159          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
    160          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
    161          
    162          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
    163          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
    164          #endif // NWK_MANAGER
    165          
    166          /*********************************************************************
    167           * @fn      ZDNwkMgr_Init
    168           *
    169           * @brief   Initialization function for the Network Manager Task.
    170           *          This is called during initialization and should contain
    171           *          any application specific initialization (ie. hardware
    172           *          initialization/setup, table initialization, power up
    173           *          notificaiton ... ).
    174           *
    175           * @param   task_id - the ID assigned by OSAL.  This ID should be
    176           *                    used to send messages and set timers.
    177           *
    178           * @return  none
    179           */

   \                                 In section .text, align 2, keep-with-next
    180          void ZDNwkMgr_Init( byte task_id )
    181          {
   \                     ZDNwkMgr_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    182            // Save the task ID
    183            ZDNwkMgr_TaskID = task_id;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable9_1
   \   00000006   0x7008             STRB     R0,[R1, #+0]
    184          
    185            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
   \   00000008   0xF248 0x0115      MOVW     R1,#+32789
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       ZDO_RegisterForZDOMsg
    186          
    187            // Frequecy Agility initialization
    188            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
   \   00000016   0x2138             MOVS     R1,#+56
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       ZDO_RegisterForZDOMsg
    189          #if defined ( NWK_MANAGER )
    190            ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
    191          #endif // NWK_MANAGER
    192          
    193            pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
   \   00000022   0x.... 0x....      ADR.W    R0,ZDNwkMgr_EDScanConfirmCB
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable9_2
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    194            pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
   \   0000002C   0x.... 0x....      ADR.W    R0,ZDNwkMgr_ProcessDataConfirm
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable9_3
   \   00000034   0x6008             STR      R0,[R1, #+0]
    195            pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
   \   00000036   0x.... 0x....      ADR.W    R0,ZDNwkMgr_ReportChannelInterference
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable9_4
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    196            
    197            // PAN ID Conflict initialization
    198          #if defined ( NWK_MANAGER )
    199            pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
    200            pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
    201          #endif // NWK_MANAGER
    202            
    203            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000046   0x7208             STRB     R0,[R1, #+8]
    204            ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   00000048   0xF64F 0x70FE      MOVW     R0,#+65534
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000050   0x8008             STRH     R0,[R1, #+0]
    205          }
   \   00000052   0xBD01             POP      {R0,PC}          ;; return
    206          
    207          /*********************************************************************
    208           * @fn      ZDNwkMgr_event_loop
    209           *
    210           * @brief   Main event loop for the Network Manager task. This function
    211           *          is called to process all events for the task.  Events
    212           *          include timers, messages and any other user defined events.
    213           *
    214           * @param   task_id  - The OSAL assigned task ID.
    215           * @param   events - events to process.  This is a bit map and can
    216           *                   contain more than one event.
    217           *
    218           * @return  none
    219           */

   \                                 In section .text, align 2, keep-with-next
    220          UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
    221          {
   \                     ZDNwkMgr_event_loop: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
    222            osal_event_hdr_t *msgPtr;
    223            (void)task_id;  // Intentionally unreferenced parameter
    224          
    225            if ( events & SYS_EVENT_MSG )
   \   00000004   0x0420             LSLS     R0,R4,#+16
   \   00000006   0xD528             BPL.N    ??ZDNwkMgr_event_loop_0
    226            {
    227              msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       osal_msg_receive
   \   00000012   0x0005             MOVS     R5,R0
   \   00000014   0xE008             B.N      ??ZDNwkMgr_event_loop_1
    228              while ( msgPtr )
    229              {
    230                switch ( msgPtr->event )
    231                {
    232                  case ZDO_CB_MSG:
    233                    // ZDO sends the message that we registered for
    234                    ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
    235                    break;
    236                   
    237                  case NM_CHANNEL_INTERFERE:
    238                    // NWK layer sends the message when it detectes Channel Interference
    239                    ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
    240                    break;
    241             
    242                  case NM_ED_SCAN_CONFIRM:
    243                    // NWK layer sends the message when it receives an ED scan confirmation
    244                    ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
    245                    break;
    246          #if defined ( NWK_MANAGER )
    247                  case ZDO_NETWORK_REPORT:
    248                    // NWK layer sends this message when it receives a Network Report message
    249                    ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
    250                    break;
    251                 
    252                  case ZDO_NETWORK_UPDATE:
    253                    // NKW layer sends this message when it receives a Network Update message
    254                    ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
    255                    break;
    256          #endif // NWK_MANAGER         
    257                  default:
    258                    break;
    259                }
    260          
    261                // Release the memory
    262                osal_msg_deallocate( (uint8 *)msgPtr );
   \                     ??ZDNwkMgr_event_loop_2: (+1)
   \                     ??ZDNwkMgr_event_loop_3: (+1)
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       osal_msg_deallocate
    263          
    264                // Next
    265                msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       osal_msg_receive
   \   00000026   0x0005             MOVS     R5,R0
   \                     ??ZDNwkMgr_event_loop_1: (+1)
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD012             BEQ.N    ??ZDNwkMgr_event_loop_4
   \   0000002C   0x7828             LDRB     R0,[R5, #+0]
   \   0000002E   0x2831             CMP      R0,#+49
   \   00000030   0xD007             BEQ.N    ??ZDNwkMgr_event_loop_5
   \   00000032   0x2832             CMP      R0,#+50
   \   00000034   0xD009             BEQ.N    ??ZDNwkMgr_event_loop_6
   \   00000036   0x28D3             CMP      R0,#+211
   \   00000038   0xD1ED             BNE.N    ??ZDNwkMgr_event_loop_2
   \                     ??ZDNwkMgr_event_loop_7: (+1)
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x.... 0x....      BL       ZDNwkMgr_ProcessMsgCBs
   \   00000040   0xE7E9             B.N      ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_5: (+1)
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       ZDNwkMgr_ProcessChannelInterference
   \   00000048   0xE7E5             B.N      ??ZDNwkMgr_event_loop_3
   \                     ??ZDNwkMgr_event_loop_6: (+1)
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x.... 0x....      BL       ZDNwkMgr_ProcessEDScanConfirm
   \   00000050   0xE7E1             B.N      ??ZDNwkMgr_event_loop_3
    266              }
    267              
    268              // Return unprocessed events
    269              return (events ^ SYS_EVENT_MSG);
   \                     ??ZDNwkMgr_event_loop_4: (+1)
   \   00000052   0xF494 0x4000      EORS     R0,R4,#0x8000
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0xE056             B.N      ??ZDNwkMgr_event_loop_8
    270            }
    271          
    272            if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
   \                     ??ZDNwkMgr_event_loop_0: (+1)
   \   0000005A   0x07E0             LSLS     R0,R4,#+31
   \   0000005C   0xD518             BPL.N    ??ZDNwkMgr_event_loop_9
    273            {       
    274              // Switch channel
    275              _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable9_6
   \   00000062   0x7800             LDRB     R0,[R0, #+0]
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   00000068   0x7608             STRB     R0,[R1, #+24]
    276              ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   0000006E   0x20E1             MOVS     R0,#+225
   \   00000070   0x.... 0x....      BL       ZMacSetReq
    277           
    278              // Our Channel has been changed -- notify to save info into NV
    279              ZDApp_NwkStateUpdateCB();
   \   00000074   0x.... 0x....      BL       ZDApp_NwkStateUpdateCB
    280              
    281              // Reset the total transmit count and the transmit failure counters
    282              _NIB.nwkTotalTransmissions = 0;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   0000007E   0xF8A1 0x0070      STRH     R0,[R1, #+112]
    283              nwkTransmissionFailures( TRUE );
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       nwkTransmissionFailures
    284              
    285              return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
   \   00000088   0xF094 0x0001      EORS     R0,R4,#0x1
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0xE03B             B.N      ??ZDNwkMgr_event_loop_8
    286            }
    287          
    288            if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
   \                     ??ZDNwkMgr_event_loop_9: (+1)
   \   00000090   0x07A0             LSLS     R0,R4,#+30
   \   00000092   0xD51C             BPL.N    ??ZDNwkMgr_event_loop_10
    289            {
    290              // Update the Update Notify timer
    291              if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable9_8
   \   00000098   0x8800             LDRH     R0,[R0, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD00F             BEQ.N    ??ZDNwkMgr_event_loop_11
    292              {
    293                ZDNwkMgr_UpdateNotifyTimer--;
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable9_8
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0x1E40             SUBS     R0,R0,#+1
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable9_8
   \   000000AA   0x8008             STRH     R0,[R1, #+0]
    294                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   000000AC   0xF64E 0x2260      MOVW     R2,#+60000
   \   000000B0   0x2102             MOVS     R1,#+2
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable9_1
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x.... 0x....      BL       osal_start_timerEx
   \   000000BC   0xE003             B.N      ??ZDNwkMgr_event_loop_12
    295              }
    296              else
    297              {
    298                ZDNwkMgr_NumUpdateNotifySent = 0;
   \                     ??ZDNwkMgr_event_loop_11: (+1)
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable9_9
   \   000000C4   0x7008             STRB     R0,[R1, #+0]
    299              }
    300              
    301              return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
   \                     ??ZDNwkMgr_event_loop_12: (+1)
   \   000000C6   0xF094 0x0002      EORS     R0,R4,#0x2
   \   000000CA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000CC   0xE01C             B.N      ??ZDNwkMgr_event_loop_8
    302            }
    303            
    304          #if defined ( NWK_MANAGER )
    305            if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
    306            {
    307              // Update the Update Request timer
    308              if ( ZDNwkMgr_UpdateRequestTimer > 0 )
    309              {
    310                ZDNwkMgr_UpdateRequestTimer--;
    311                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    312              }
    313              
    314              return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
    315            }
    316          #endif // NWK_MANAGER
    317            
    318            if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
   \                     ??ZDNwkMgr_event_loop_10: (+1)
   \   000000CE   0x0720             LSLS     R0,R4,#+28
   \   000000D0   0xD519             BPL.N    ??ZDNwkMgr_event_loop_13
    319            {  
    320              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   000000D6   0x7940             LDRB     R0,[R0, #+5]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD010             BEQ.N    ??ZDNwkMgr_event_loop_14
    321              {
    322                if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
    323                                          ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   000000E0   0x7901             LDRB     R1,[R0, #+4]
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x.... 0x....      BL       NLME_EDScanRequest
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD106             BNE.N    ??ZDNwkMgr_event_loop_14
    324                {
    325                  ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   000000F4   0x7940             LDRB     R0,[R0, #+5]
   \   000000F6   0x1E40             SUBS     R0,R0,#+1
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable9_10
   \   000000FC   0x7148             STRB     R0,[R1, #+5]
    326                }
    327              }
    328                
    329              return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
   \                     ??ZDNwkMgr_event_loop_14: (+1)
   \   000000FE   0xF094 0x0008      EORS     R0,R4,#0x8
   \   00000102   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000104   0xE000             B.N      ??ZDNwkMgr_event_loop_8
    330            }
    331            
    332            // Discard or make more handlers
    333            return 0;
   \                     ??ZDNwkMgr_event_loop_13: (+1)
   \   00000106   0x2000             MOVS     R0,#+0
   \                     ??ZDNwkMgr_event_loop_8: (+1)
   \   00000108   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    334          }
    335          
    336          /*********************************************************************
    337           * @fn      ZDNwkMgr_ProcessMsgCBs
    338           *
    339           * @brief   Process the incoming messages.
    340           *
    341           * @param   msgPtr - message to process
    342           *
    343           * @return  TRUE if message to be freed. FALSE otherwise.
    344           */

   \                                 In section .text, align 2, keep-with-next
    345          static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
    346          {
   \                     ZDNwkMgr_ProcessMsgCBs: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    347            switch ( inMsg->clusterID )
   \   00000002   0x89C1             LDRH     R1,[R0, #+14]
   \   00000004   0x2938             CMP      R1,#+56
   \   00000006   0xD004             BEQ.N    ??ZDNwkMgr_ProcessMsgCBs_0
   \   00000008   0xF248 0x0215      MOVW     R2,#+32789
   \   0000000C   0x4291             CMP      R1,R2
   \   0000000E   0xD003             BEQ.N    ??ZDNwkMgr_ProcessMsgCBs_1
   \   00000010   0xE005             B.N      ??ZDNwkMgr_ProcessMsgCBs_2
    348            {   
    349              case Mgmt_NWK_Update_req:
    350                ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
   \                     ??ZDNwkMgr_ProcessMsgCBs_0: (+1)
   \   00000012   0x.... 0x....      BL       ZDNwkMgr_ProcessMgmtNwkUpdateReq
    351                break;    
   \   00000016   0xE002             B.N      ??ZDNwkMgr_ProcessMsgCBs_3
    352          #if defined ( NWK_MANAGER )  
    353              case Mgmt_NWK_Update_notify:
    354                ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
    355                break;
    356          #endif // NWK_MANAGER
    357              case Server_Discovery_rsp:
    358                ZDNwkMgr_ProcessServerDiscRsp( inMsg );
   \                     ??ZDNwkMgr_ProcessMsgCBs_1: (+1)
   \   00000018   0x.... 0x....      BL       ZDNwkMgr_ProcessServerDiscRsp
    359                break;
   \   0000001C   0xE7FF             B.N      ??ZDNwkMgr_ProcessMsgCBs_3
    360                
    361              default:
    362                // Unknown message
    363                break;
    364            }
    365          }
   \                     ??ZDNwkMgr_ProcessMsgCBs_2: (+1)
   \                     ??ZDNwkMgr_ProcessMsgCBs_3: (+1)
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    366          
    367          /*********************************************************************
    368           * Frequency Agility Routines
    369           */
    370          #if defined ( NWK_MANAGER )
    371          /*********************************************************************
    372           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
    373           *
    374           * @brief       This function processes the incoming Management
    375           *              Network Update notify.
    376           *
    377           * @param       pUpdateNotify - notify message
    378           *
    379           * @return      TRUE if message to be freed. FALSE otherwise.
    380           */
    381          static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
    382          {
    383            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    384            {
    385              ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
    386              if ( pNotify )
    387              {
    388                ZDNwkMgr_CheckForChannelChange( pNotify );
    389          
    390                osal_mem_free( pNotify );
    391              }
    392            }
    393          }
    394          
    395          /*********************************************************************
    396           * @fn          ZDNwkMgr_CheckForChannelChange
    397           *
    398           * @brief       This function processes the incoming Management Network
    399           *              Update notify and starts an Update Request if a channel
    400           *              change is needed.
    401           *
    402           * @param       pUpdateNotify - notify message
    403           *
    404           * @return      none
    405           */
    406          static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
    407          {
    408            uint8  i;
    409            uint16 failureRate;
    410            uint8  lowestEnergyIndex;
    411            uint8  lowestEnergyValue = 0xFF;
    412                
    413            // If any device has more than 50% transmission failures, a channel
    414            // change should be considered
    415            failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
    416            if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
    417            {
    418          #if defined ( LCD_SUPPORTED )
    419              HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
    420              HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
    421          #endif
    422              return;
    423            }
    424          
    425            // If the current failure rate is higher than the last failure rate,
    426            // a channel change should be considered
    427            if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
    428            {
    429          #if defined ( LCD_SUPPORTED )
    430              HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
    431              HalLcdWriteStringValueValue( ": ", failureRate, 10, 
    432                                           ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
    433          #endif
    434              return;
    435            }
    436            
    437            // Select a single channel based on the Mgmt_NWK_Update_notify based on
    438            // the lowest energy. This is the proposed new channel. 
    439            for ( i = 0; i < pNotify->listCount; i++ )
    440            {
    441              if ( pNotify->energyValues[i] < lowestEnergyValue )
    442              {
    443                lowestEnergyIndex = i;
    444                lowestEnergyValue = pNotify->energyValues[i];
    445              }
    446            }
    447                
    448            // If this new channel does not have an energy level below an acceptable
    449            // threshold, a channel change should not be done.
    450            if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
    451            {
    452          #if defined ( LCD_SUPPORTED )
    453              HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
    454              HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
    455                                           ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
    456          #endif
    457              return;
    458            }
    459          
    460            // Channel change should be done -- find out the new active channel
    461            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
    462            {
    463              if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
    464              {
    465                if ( lowestEnergyIndex == 0 )
    466                  break;
    467                lowestEnergyIndex--;
    468              }
    469            }
    470            
    471            if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
    472            {
    473              uint32 channelMask;
    474              zAddrType_t dstAddr;
    475              
    476              // The new channel
    477              ZDNwkMgr_NewChannel = i;
    478                  
    479              // Prior to changing channels, the network manager should store the 
    480              // energy scan value as the last energy scan value and the failure 
    481              // rate from the existing channel as the last failure rate.  These 
    482              // values are useful to allow comparison of the failure rate and energy
    483              // level on the previous channel to evaluate if the network is causing
    484              // its own interference.
    485              ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
    486              ZDNwkMgr_LastChannelFailureRate = failureRate;
    487                 
    488              // The network manager should broadcast a Mgmt_NWK_Update_req notifying
    489              // devices of the new channel.  The broadcast shall be to all routers 
    490              // and coordinator.
    491              dstAddr.addrMode = AddrBroadcast;
    492              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    493              channelMask = (uint32)1 << i;
    494                  
    495              // Increment the nwkUpdateId parameter and set the updateID in the beacon
    496              NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
    497              
    498              ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
    499                  
    500              // The network manager shall set a timer based on the value of 
    501              // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
    502              // channels and shall not issue another such command until this 
    503              // timer expires.  
    504              ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
    505              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
    506                            
    507              // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    508              // the local network manager shall set a timer equal to the 
    509              // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    510              // expiration of this timer.  NOTE: since we won't recevied our own
    511              // broadcasted Update Request, we start the channel change timer here.  
    512              osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    513                                  ZDNWKMGR_BCAST_DELIVERY_TIME );
    514            }
    515          }
    516          #endif  // NWK_MANAGER
    517          
    518          /*********************************************************************
    519           * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
    520           *
    521           * @brief       This function processes the incoming Management
    522           *              Network Update request and starts the request (if needed).
    523           *
    524           * @param       Request message
    525           *
    526           * @return      none
    527           */

   \                                 In section .text, align 2, keep-with-next
    528          static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
    529          {
   \                     ZDNwkMgr_ProcessMgmtNwkUpdateReq: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
    530            ZDO_MgmtNwkUpdateReq_t Req;
    531            
    532            ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
   \   00000006   0xA906             ADD      R1,SP,#+24
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ZDO_ParseMgmtNwkUpdateReq
    533             
    534            if ( Req.scanDuration <= 0x05 )
   \   0000000E   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000012   0x2806             CMP      R0,#+6
   \   00000014   0xDA2A             BGE.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
    535            {
    536              // Request is to scan over channelMask. The result will be reported by Confirm   
    537              if ( ( !inMsg->wasBroadcast )                     && 
    538                   ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
    539                   ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
   \   00000016   0x7B20             LDRB     R0,[R4, #+12]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF040 0x8091      BNE.W    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
   \   0000001E   0xF89D 0x001D      LDRB     R0,[SP, #+29]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xF000 0x808C      BEQ.W    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
   \   00000028   0xF89D 0x001D      LDRB     R0,[SP, #+29]
   \   0000002C   0x2806             CMP      R0,#+6
   \   0000002E   0xF280 0x8087      BGE.W    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    540              {
    541                if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
   \   00000032   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   00000036   0x9806             LDR      R0,[SP, #+24]
   \   00000038   0x.... 0x....      BL       NLME_EDScanRequest
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xF040 0x807F      BNE.W    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    542                {
    543                  // Save off the information to be used for the notify
    544                  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
   \   00000042   0x7C60             LDRB     R0,[R4, #+17]
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable9_11
   \   00000048   0x7008             STRB     R0,[R1, #+0]
    545                  ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   0000004A   0x8860             LDRH     R0,[R4, #+2]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable9_5
   \   00000050   0x8008             STRH     R0,[R1, #+0]
    546                  
    547                  Req.scanCount--;
   \   00000052   0xF89D 0x001D      LDRB     R0,[SP, #+29]
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0xF88D 0x001D      STRB     R0,[SP, #+29]
    548                  
    549                  // Save off scan info for the subsequent scans
    550                  ZDNwkMgr_MgmtNwkUpdateReq = Req;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable9_10
   \   00000060   0xA906             ADD      R1,SP,#+24
   \   00000062   0xC91C             LDM      R1!,{R2-R4}
   \   00000064   0xC01C             STM      R0!,{R2-R4}
   \   00000066   0x390C             SUBS     R1,R1,#+12
   \   00000068   0x380C             SUBS     R0,R0,#+12
   \   0000006A   0xE069             B.N      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    551                }
    552              }
    553            }
    554            else if ( Req.scanDuration == 0xFE )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0: (+1)
   \   0000006C   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000070   0x28FE             CMP      R0,#+254
   \   00000072   0xD12B             BNE.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
    555            {
    556              // Request is to change Channel. The command provide a new active
    557              // channel as a single channel in the channelMask.
    558              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable9_7
   \   00000078   0xF890 0x0072      LDRB     R0,[R0, #+114]
   \   0000007C   0xF89D 0x101E      LDRB     R1,[SP, #+30]
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xD25D             BCS.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    559              {
    560                uint8 i;
    561                
    562                // Set update ID in the Beacon
    563                NLME_SetUpdateID(Req.nwkUpdateId); 
   \   00000084   0xF89D 0x001E      LDRB     R0,[SP, #+30]
   \   00000088   0x.... 0x....      BL       NLME_SetUpdateID
    564                
    565                // Find out the new active channel
    566                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xE000             B.N      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4: (+1)
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3: (+1)
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x281B             CMP      R0,#+27
   \   00000096   0xDA04             BGE.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
    567                {
    568                  if ( ( (uint32)1 << i ) & Req.channelMask )
   \   00000098   0x9906             LDR      R1,[SP, #+24]
   \   0000009A   0x000A             MOVS     R2,R1
   \   0000009C   0x40C2             LSRS     R2,R2,R0
   \   0000009E   0x07D1             LSLS     R1,R2,#+31
   \   000000A0   0xD5F6             BPL.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
    569                  {
    570                    break;
    571                  }
    572                }
    573          
    574                if ( _NIB.nwkLogicalChannel != i )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5: (+1)
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable9_7
   \   000000A6   0x7E09             LDRB     R1,[R1, #+24]
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x4281             CMP      R1,R0
   \   000000AC   0xD048             BEQ.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    575                {
    576                  ZDNwkMgr_NewChannel = i;
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable9_6
   \   000000B2   0x7008             STRB     R0,[R1, #+0]
    577                    
    578                  // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
    579                  // the local network manager shall set a timer equal to the 
    580                  // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
    581                  // expiration of this timer.  Each node shall also increment the 
    582                  // nwkUpdateId parameter and also reset the total transmit count 
    583                  // and the transmit failure counters.  
    584                  osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
    585                                      ZDNWKMGR_BCAST_DELIVERY_TIME );
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable9_7
   \   000000B8   0x79C0             LDRB     R0,[R0, #+7]
   \   000000BA   0x2164             MOVS     R1,#+100
   \   000000BC   0xFB01 0xF200      MUL      R2,R1,R0
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x....             LDR.N    R0,??DataTable9_1
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x.... 0x....      BL       osal_start_timerEx
   \   000000CA   0xE039             B.N      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    586                }
    587              }
    588            }
    589            else if ( Req.scanDuration == 0xFF )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2: (+1)
   \   000000CC   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   000000D0   0x28FF             CMP      R0,#+255
   \   000000D2   0xD11D             BNE.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
    590            {
    591              // Request is to change apsChannelMask and nwkManagerAddr
    592              if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
   \   000000D4   0x....             LDR.N    R0,??DataTable9_7
   \   000000D6   0xF890 0x0072      LDRB     R0,[R0, #+114]
   \   000000DA   0xF89D 0x101E      LDRB     R1,[SP, #+30]
   \   000000DE   0x4288             CMP      R0,R1
   \   000000E0   0xD22E             BCS.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    593              {
    594                NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
   \   000000E2   0xF89D 0x001E      LDRB     R0,[SP, #+30]
   \   000000E6   0x.... 0x....      BL       NLME_SetUpdateID
    595                 
    596                if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
   \   000000EA   0x9806             LDR      R0,[SP, #+24]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD009             BEQ.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_7
   \   000000F0   0x....             LDR.N    R0,??DataTable9_7
   \   000000F2   0x6A80             LDR      R0,[R0, #+40]
   \   000000F4   0x9906             LDR      R1,[SP, #+24]
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xD004             BEQ.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_7
    597                {
    598                  _NIB.channelList = Req.channelMask;
   \   000000FA   0x9806             LDR      R0,[SP, #+24]
   \   000000FC   0x....             LDR.N    R1,??DataTable9_7
   \   000000FE   0x6288             STR      R0,[R1, #+40]
    599                
    600                  // Our Channel List has been changed -- notify to save info into NV
    601                  ZDApp_NwkStateUpdateCB();
   \   00000100   0x.... 0x....      BL       ZDApp_NwkStateUpdateCB
    602                }
    603              
    604                ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_7: (+1)
   \   00000104   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \   00000108   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000010A   0x.... 0x....      BL       ZDNwkMgr_SetNwkManagerAddr
   \   0000010E   0xE017             B.N      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    605              }
    606            }
    607            else // 0x06-0xFD
    608            {
    609              // Request is invalid
    610              if ( !inMsg->wasBroadcast )
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6: (+1)
   \   00000110   0x7B20             LDRB     R0,[R4, #+12]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD114             BNE.N    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
    611              {
    612                ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   00000116   0x8860             LDRH     R0,[R4, #+2]
   \   00000118   0x....             LDR.N    R1,??DataTable9_5
   \   0000011A   0x8008             STRH     R0,[R1, #+0]
    613                ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
    614                                         ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x9005             STR      R0,[SP, #+20]
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x9004             STR      R0,[SP, #+16]
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x9003             STR      R0,[SP, #+12]
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x9002             STR      R0,[SP, #+8]
   \   0000012C   0x2000             MOVS     R0,#+0
   \   0000012E   0x9001             STR      R0,[SP, #+4]
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0x2300             MOVS     R3,#+0
   \   00000136   0x2280             MOVS     R2,#+128
   \   00000138   0x....             LDR.N    R1,??DataTable9_5
   \   0000013A   0x7C60             LDRB     R0,[R4, #+17]
   \   0000013C   0x.... 0x....      BL       ZDP_MgmtNwkUpdateNotify
    615              }
    616            }
    617          }
   \                     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1: (+1)
   \   00000140   0xB00A             ADD      SP,SP,#+40
   \   00000142   0xBD10             POP      {R4,PC}          ;; return
    618          
    619          /*********************************************************************
    620           * @fn      ZDNwkMgr_ProcessServerDiscRsp
    621           *
    622           * @brief   Process the incoming System Server Discovery Response
    623           *
    624           * @param   pRsp - Structure containing Server Discovery response
    625           *
    626           * @return  none
    627           */

   \                                 In section .text, align 2, keep-with-next
    628          void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
    629          {
   \                     ZDNwkMgr_ProcessServerDiscRsp: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    630            ZDO_ServerDiscRsp_t Rsp;
    631            
    632            ZDO_ParseServerDiscRsp( inMsg, &Rsp );
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       ZDO_ParseServerDiscRsp
    633            
    634            if ( Rsp.status == ZSuccess )
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD106             BNE.N    ??ZDNwkMgr_ProcessServerDiscRsp_0
    635            {
    636              // Is the Network Manager bit set in the response?
    637              if ( Rsp.serverMask & NETWORK_MANAGER )
   \   00000016   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000001A   0x0640             LSLS     R0,R0,#+25
   \   0000001C   0xD502             BPL.N    ??ZDNwkMgr_ProcessServerDiscRsp_0
    638              {
    639                // Set the Remote Device's NWK Address as the Network Manager Address
    640                ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
   \   0000001E   0x8860             LDRH     R0,[R4, #+2]
   \   00000020   0x.... 0x....      BL       ZDNwkMgr_SetNwkManagerAddr
    641              }
    642            }
    643          }
   \                     ??ZDNwkMgr_ProcessServerDiscRsp_0: (+1)
   \   00000024   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    644          
    645          /*********************************************************************
    646           * @fn          ZDNwkMgr_ProcessChannelInterference
    647           *
    648           * @brief       This function processes the incoming Channel Interference
    649           *              detection message and sends out a notify (if needed).
    650           *
    651           * @param       pChannelInterference - interference message
    652           *
    653           * @return      none
    654           */

   \                                 In section .text, align 2, keep-with-next
    655          static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
    656          {
   \                     ZDNwkMgr_ProcessChannelInterference: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    657            // To avoid a device with communication problems from constantly 
    658            // sending reports to the network manager, the device should not 
    659            // send a Mgmt_NWK_Update_notify more than 4 times per hour.
    660            if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
   \   00000004   0x....             LDR.N    R0,??DataTable9_9
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2804             CMP      R0,#+4
   \   0000000A   0xDA10             BGE.N    ??ZDNwkMgr_ProcessChannelInterference_0
    661            {
    662              // Conduct an energy scan on all channels.
    663              if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
   \   0000000C   0x....             LDR.N    R0,??DataTable9_7
   \   0000000E   0xF890 0x102E      LDRB     R1,[R0, #+46]
   \   00000012   0x....             LDR.N    R0,??DataTable9_12  ;; 0x7fff800
   \   00000014   0x.... 0x....      BL       NLME_EDScanRequest
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD108             BNE.N    ??ZDNwkMgr_ProcessChannelInterference_0
    664              {
    665                // Save the counters for the Update Notify message to be sent
    666                ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
   \   0000001C   0x8860             LDRH     R0,[R4, #+2]
   \   0000001E   0x....             LDR.N    R1,??DataTable9_13
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    667                ZDNwkMgr_TxFailures = pChanInterference->txFailures;
   \   00000022   0x88A0             LDRH     R0,[R4, #+4]
   \   00000024   0x....             LDR.N    R1,??DataTable9_14
   \   00000026   0x8008             STRH     R0,[R1, #+0]
    668          
    669                // Mark scan as channel inetrference check
    670                ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
   \   00000028   0x20FF             MOVS     R0,#+255
   \   0000002A   0x....             LDR.N    R1,??DataTable9_10
   \   0000002C   0x7148             STRB     R0,[R1, #+5]
    671              }
    672            }
    673          }
   \                     ??ZDNwkMgr_ProcessChannelInterference_0: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    674          
    675          /*********************************************************************
    676           * @fn          ZDNwkMgr_ProcessEDScanConfirm
    677           *
    678           * @brief       This function processes the incoming ED Scan Confirm
    679           *              message and sends out a notify (if needed).
    680           *
    681           * @param       pEDScanConfirm - SD Scan Confirmation message
    682           *
    683           * @return      none
    684           */

   \                                 In section .text, align 2, keep-with-next
    685          static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
    686          { 
   \                     ZDNwkMgr_ProcessEDScanConfirm: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    687            if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
   \   00000004   0x....             LDR.N    R0,??DataTable9_10
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0xD106             BNE.N    ??ZDNwkMgr_ProcessEDScanConfirm_0
    688            {
    689              // Confirm to scan all channels for channel interference check
    690              ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       ZDNwkMgr_CheckForChannelInterference
    691              
    692              ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable9_10
   \   00000016   0x7148             STRB     R0,[R1, #+5]
   \   00000018   0xE019             B.N      ??ZDNwkMgr_ProcessEDScanConfirm_1
    693            }
    694            else
    695            {
    696              // Confirm to the requested scan
    697              uint16 txFailures = nwkTransmissionFailures( FALSE );
   \                     ??ZDNwkMgr_ProcessEDScanConfirm_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       nwkTransmissionFailures
    698              
    699              ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
    700                                                 &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    701                                                 _NIB.nwkTotalTransmissions, txFailures, 
    702                                                 pEDScanConfirm, AF_TX_OPTIONS_NONE );
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x9101             STR      R1,[SP, #+4]
   \   00000024   0x9400             STR      R4,[SP, #+0]
   \   00000026   0x0003             MOVS     R3,R0
   \   00000028   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002A   0x....             LDR.N    R0,??DataTable9_7
   \   0000002C   0xF8B0 0x2070      LDRH     R2,[R0, #+112]
   \   00000030   0x....             LDR.N    R1,??DataTable9_5
   \   00000032   0x....             LDR.N    R0,??DataTable9_11
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x.... 0x....      BL       ZDNwkMgr_BuildAndSendUpdateNotify
    703              // More scans needed?
    704              if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
   \   0000003A   0x....             LDR.N    R0,??DataTable9_10
   \   0000003C   0x7940             LDRB     R0,[R0, #+5]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD005             BEQ.N    ??ZDNwkMgr_ProcessEDScanConfirm_1
    705              {
    706                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
   \   00000042   0x2232             MOVS     R2,#+50
   \   00000044   0x2108             MOVS     R1,#+8
   \   00000046   0x....             LDR.N    R0,??DataTable9_1
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x.... 0x....      BL       osal_start_timerEx
    707              }
    708            }
    709          }
   \                     ??ZDNwkMgr_ProcessEDScanConfirm_1: (+1)
   \   0000004E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    710          
    711          /*********************************************************************
    712           * @fn          ZDNwkMgr_CheckForChannelInterference
    713           *
    714           * @brief       This function processes the incoming ED Scan Confirm
    715           *              message and sends out an Update Notify (if needed).
    716           *
    717           * @param       pEDScanConfirm - SD Scan Confirmation message
    718           *
    719           * @return      none
    720           */

   \                                 In section .text, align 2, keep-with-next
    721          static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
    722          {
   \                     ZDNwkMgr_CheckForChannelInterference: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    723            uint8 i;
    724            uint8 channelEnergy = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    725            uint8 energyIncreased = FALSE;
   \   00000006   0x2100             MOVS     R1,#+0
    726              
    727            // Get the current channel energy
    728            if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
   \   00000008   0x6842             LDR      R2,[R0, #+4]
   \   0000000A   0x....             LDR.N    R3,??DataTable9_7
   \   0000000C   0x7E1B             LDRB     R3,[R3, #+24]
   \   0000000E   0x0015             MOVS     R5,R2
   \   00000010   0x40DD             LSRS     R5,R5,R3
   \   00000012   0x07EA             LSLS     R2,R5,#+31
   \   00000014   0xD503             BPL.N    ??ZDNwkMgr_CheckForChannelInterference_0
    729            {
    730              channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
   \   00000016   0x....             LDR.N    R2,??DataTable9_7
   \   00000018   0x7E12             LDRB     R2,[R2, #+24]
   \   0000001A   0x1812             ADDS     R2,R2,R0
   \   0000001C   0x7A14             LDRB     R4,[R2, #+8]
    731            }
    732              
    733            // If this energy scan does not indicate higher energy on the current 
    734            // channel then other channels, no action is taken. The device should 
    735            // continue to operate as normal and the message counters are not reset.
    736            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \                     ??ZDNwkMgr_CheckForChannelInterference_0: (+1)
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0xE000             B.N      ??ZDNwkMgr_CheckForChannelInterference_1
   \                     ??ZDNwkMgr_CheckForChannelInterference_2: (+1)
   \   00000022   0x1C52             ADDS     R2,R2,#+1
   \                     ??ZDNwkMgr_CheckForChannelInterference_1: (+1)
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0x2A1B             CMP      R2,#+27
   \   00000028   0xDA0B             BGE.N    ??ZDNwkMgr_CheckForChannelInterference_3
    737            {
    738              if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
    739                   ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
   \   0000002A   0x6843             LDR      R3,[R0, #+4]
   \   0000002C   0x001D             MOVS     R5,R3
   \   0000002E   0x40D5             LSRS     R5,R5,R2
   \   00000030   0x07EB             LSLS     R3,R5,#+31
   \   00000032   0xD5F6             BPL.N    ??ZDNwkMgr_CheckForChannelInterference_2
   \   00000034   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000036   0x1813             ADDS     R3,R2,R0
   \   00000038   0x7A1B             LDRB     R3,[R3, #+8]
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0x42A3             CMP      R3,R4
   \   0000003E   0xD2F0             BCS.N    ??ZDNwkMgr_CheckForChannelInterference_2
    740              {
    741                energyIncreased = TRUE;
   \   00000040   0x2101             MOVS     R1,#+1
    742                break;
    743              }
    744            }
    745              
    746            // If the energy scan does indicate increased energy on the channel
    747            // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
    748            // Manager to indicate interference is present.
    749            if ( energyIncreased )
   \                     ??ZDNwkMgr_CheckForChannelInterference_3: (+1)
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x2900             CMP      R1,#+0
   \   00000046   0xD026             BEQ.N    ??ZDNwkMgr_CheckForChannelInterference_4
    750            {
    751              // Send a Management Network Update notify to the Network Manager
    752              ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
   \   00000048   0x....             LDR.N    R1,??DataTable9_7
   \   0000004A   0xF8B1 0x106E      LDRH     R1,[R1, #+110]
   \   0000004E   0x....             LDR.N    R2,??DataTable9_5
   \   00000050   0x8011             STRH     R1,[R2, #+0]
    753              ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
    754                                                 ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
    755                                                 pEDScanConfirm, AF_MSG_ACK_REQUEST );
   \   00000052   0x2110             MOVS     R1,#+16
   \   00000054   0x9101             STR      R1,[SP, #+4]
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x....             LDR.N    R0,??DataTable9_14
   \   0000005A   0x8803             LDRH     R3,[R0, #+0]
   \   0000005C   0x....             LDR.N    R0,??DataTable9_13
   \   0000005E   0x8802             LDRH     R2,[R0, #+0]
   \   00000060   0x....             LDR.N    R1,??DataTable9_5
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      BL       ZDNwkMgr_BuildAndSendUpdateNotify
    756              ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x....             LDR.N    R1,??DataTable9_15
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
    757                
    758              if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
   \   0000006E   0x....             LDR.N    R0,??DataTable9_9
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD109             BNE.N    ??ZDNwkMgr_CheckForChannelInterference_5
    759              {
    760                // First notify message sent within this hour. Start the Update Notify timer.
    761                ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
   \   00000076   0x203C             MOVS     R0,#+60
   \   00000078   0x....             LDR.N    R1,??DataTable9_8
   \   0000007A   0x8008             STRH     R0,[R1, #+0]
    762                osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
   \   0000007C   0xF64E 0x2260      MOVW     R2,#+60000
   \   00000080   0x2102             MOVS     R1,#+2
   \   00000082   0x....             LDR.N    R0,??DataTable9_1
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x.... 0x....      BL       osal_start_timerEx
    763              }
    764              
    765              ZDNwkMgr_NumUpdateNotifySent++;
   \                     ??ZDNwkMgr_CheckForChannelInterference_5: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable9_9
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x....             LDR.N    R1,??DataTable9_9
   \   00000092   0x7008             STRB     R0,[R1, #+0]
   \   00000094   0xE011             B.N      ??ZDNwkMgr_CheckForChannelInterference_6
    766            }
    767          #if defined ( LCD_SUPPORTED )
    768            else
    769            {
    770              HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
   \                     ??ZDNwkMgr_CheckForChannelInterference_4: (+1)
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0x....             LDR.N    R0,??DataTable9_16
   \   0000009A   0x.... 0x....      BL       HalLcdWriteString
    771              HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0x9001             STR      R0,[SP, #+4]
   \   000000A2   0x200A             MOVS     R0,#+10
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A8   0x0023             MOVS     R3,R4
   \   000000AA   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000AC   0x220A             MOVS     R2,#+10
   \   000000AE   0x....             LDR.N    R0,??DataTable9_7
   \   000000B0   0x7E01             LDRB     R1,[R0, #+24]
   \   000000B2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000B4   0x....             ADR.N    R0,??DataTable9  ;; 0x3A, 0x20, 0x00, 0x00
   \   000000B6   0x.... 0x....      BL       HalLcdWriteStringValueValue
    772            }
    773          #endif
    774          }
   \                     ??ZDNwkMgr_CheckForChannelInterference_6: (+1)
   \   000000BA   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    775          
    776          /*********************************************************************
    777           * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
    778           *
    779           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
    780           *              function sends a unicast message.
    781           *
    782           * @param       TransSeq - transaction sequence number
    783           * @param       dstAddr - destination address of the message
    784           * @param       pEDScanConfirm - update notify info
    785           *
    786           * @return      afStatus_t
    787           */

   \                                 In section .text, align 2, keep-with-next
    788          static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
    789                                                         uint16 totalTransmissions, uint16 txFailures,
    790                                                         ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
    791                                                         uint8 txOptions )
    792          {
   \                     ZDNwkMgr_BuildAndSendUpdateNotify: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    793            uint8 i;
    794            uint8 listCount = 0;
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    795            uint8 *energyValues = NULL;
   \   00000012   0xF05F 0x0900      MOVS     R9,#+0
    796            
    797            // Count number of energy detects
    798            for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8DD 0xA038      LDR      R10,[SP, #+56]
   \   0000001C   0xE008             B.N      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
    799            {
    800              if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_1: (+1)
   \   0000001E   0xF8DA 0x1004      LDR      R1,[R10, #+4]
   \   00000022   0x000A             MOVS     R2,R1
   \   00000024   0x40C2             LSRS     R2,R2,R0
   \   00000026   0x07D1             LSLS     R1,R2,#+31
   \   00000028   0xD501             BPL.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_2
    801                listCount++;
   \   0000002A   0xF118 0x0801      ADDS     R8,R8,#+1
    802            }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_2: (+1)
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_0: (+1)
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x281B             CMP      R0,#+27
   \   00000034   0xDBF3             BLT.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_1
    803            
    804            if ( listCount > 0 )
   \   00000036   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000003A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000003E   0xD01E             BEQ.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    805            {
    806              energyValues = (uint8 *)osal_mem_alloc( listCount );
   \   00000040   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000044   0x4640             MOV      R0,R8
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0x.... 0x....      BL       osal_mem_alloc
   \   0000004C   0x4681             MOV      R9,R0
    807              if ( energyValues )
   \   0000004E   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000052   0xD014             BEQ.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_3
    808              {
    809                uint8 j = 0;
   \   00000054   0x2100             MOVS     R1,#+0
    810          
    811                for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE00E             B.N      ??ZDNwkMgr_BuildAndSendUpdateNotify_4
    812                {
    813                  if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_5: (+1)
   \   0000005A   0xF8DA 0x2004      LDR      R2,[R10, #+4]
   \   0000005E   0x0013             MOVS     R3,R2
   \   00000060   0x40C3             LSRS     R3,R3,R0
   \   00000062   0x07DA             LSLS     R2,R3,#+31
   \   00000064   0xD507             BPL.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_6
    814                    energyValues[j++] = pEDScanConfirm->energyDetectList[i];
   \   00000066   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000068   0xEB10 0x020A      ADDS     R2,R0,R10
   \   0000006C   0x7A12             LDRB     R2,[R2, #+8]
   \   0000006E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000070   0xF801 0x2009      STRB     R2,[R1, R9]
   \   00000074   0x1C49             ADDS     R1,R1,#+1
    815                }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_6: (+1)
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_4: (+1)
   \   00000078   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007A   0x281B             CMP      R0,#+27
   \   0000007C   0xDBED             BLT.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_5
    816              }
    817            }
    818              
    819            // Send a Management Network Update notify back
    820            ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
    821                                     pEDScanConfirm->scannedChannels,
    822                                     totalTransmissions, txFailures,
    823                                     listCount, energyValues, txOptions, false );
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_3: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9005             STR      R0,[SP, #+20]
   \   00000082   0x980F             LDR      R0,[SP, #+60]
   \   00000084   0x9004             STR      R0,[SP, #+16]
   \   00000086   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \   0000008A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000008E   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   00000092   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000094   0x9701             STR      R7,[SP, #+4]
   \   00000096   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000098   0x9600             STR      R6,[SP, #+0]
   \   0000009A   0xF8DA 0x3004      LDR      R3,[R10, #+4]
   \   0000009E   0xF89A 0x2002      LDRB     R2,[R10, #+2]
   \   000000A2   0x0029             MOVS     R1,R5
   \   000000A4   0x0020             MOVS     R0,R4
   \   000000A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A8   0x.... 0x....      BL       ZDP_MgmtNwkUpdateNotify
    824            if ( energyValues )
   \   000000AC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000B0   0xD002             BEQ.N    ??ZDNwkMgr_BuildAndSendUpdateNotify_7
    825              osal_mem_free( energyValues );
   \   000000B2   0x4648             MOV      R0,R9
   \   000000B4   0x.... 0x....      BL       osal_mem_free
    826          }
   \                     ??ZDNwkMgr_BuildAndSendUpdateNotify_7: (+1)
   \   000000B8   0xB006             ADD      SP,SP,#+24
   \   000000BA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    827          
    828          #if defined ( NWK_MANAGER )
    829          /*********************************************************************
    830           * @fn      NwkMgr_SetNwkManager
    831           *
    832           * @brief   Set the local device as the Network Manager
    833           *
    834           * @param   none
    835           *
    836           * @return  none
    837           */
    838          void NwkMgr_SetNwkManager( void )
    839          {
    840            if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
    841            {
    842              // We're the Network Manager. Set our address as the Network Manager Address
    843              ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
    844              
    845              // Set the Network Manager bit of the Server Mask
    846              ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
    847            }
    848          }
    849          #endif // NWK_MANAGER
    850          
    851          /*********************************************************************
    852           * @fn      ZDApp_SetNwkManagerAddr()
    853           *
    854           * @brief   Sets the nwkManagerAddr in NIB.
    855           *
    856           * @param   nwkManagerAddr
    857           *
    858           * @return  none
    859           */

   \                                 In section .text, align 2, keep-with-next
    860          void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
    861          {
   \                     ZDNwkMgr_SetNwkManagerAddr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    862            if ( _NIB.nwkManagerAddr != nwkManagerAddr )
   \   00000002   0x....             LDR.N    R1,??DataTable9_7
   \   00000004   0xF8B1 0x106E      LDRH     R1,[R1, #+110]
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xD004             BEQ.N    ??ZDNwkMgr_SetNwkManagerAddr_0
    863            {
    864              // Update the Network Manager Address
    865              _NIB.nwkManagerAddr = nwkManagerAddr;
   \   0000000E   0x....             LDR.N    R1,??DataTable9_7
   \   00000010   0xF8A1 0x006E      STRH     R0,[R1, #+110]
    866            
    867              // Our Network Manger Address has been changed -- notify to save info into NV
    868              ZDApp_NwkStateUpdateCB();
   \   00000014   0x.... 0x....      BL       ZDApp_NwkStateUpdateCB
    869            }
    870          }
   \                     ??ZDNwkMgr_SetNwkManagerAddr_0: (+1)
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    871          
    872          /*********************************************************************
    873           * @fn          ZDNwkMgr_ReportChannelInterference
    874           *
    875           * @brief       This function builds a Channel Interference detection
    876           *              message and then forwards it to the Network Manager.
    877           *
    878           * @param       chanInterference
    879           *
    880           * @return      none
    881           */

   \                                 In section .text, align 4, keep-with-next
    882          void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
    883          {
   \                     ZDNwkMgr_ReportChannelInterference: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    884            ZDNwkMgr_ChanInterference_t *pChanInterference;
    885          
    886            // Send Channel Interference message to the Network Manager task
    887            pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       osal_msg_allocate
    888            if ( pChanInterference )
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD00A             BEQ.N    ??ZDNwkMgr_ReportChannelInterference_0
    889            {
    890              pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
   \   0000000E   0x2131             MOVS     R1,#+49
   \   00000010   0x7001             STRB     R1,[R0, #+0]
    891                
    892              // Build the structure
    893              pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
   \   00000012   0x8821             LDRH     R1,[R4, #+0]
   \   00000014   0x8041             STRH     R1,[R0, #+2]
    894              pChanInterference->txFailures = chanInterference->txFailures;
   \   00000016   0x8861             LDRH     R1,[R4, #+2]
   \   00000018   0x8081             STRH     R1,[R0, #+4]
    895                        
    896              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0x....             LDR.N    R0,??DataTable9_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       osal_msg_send
    897            }
    898          }
   \                     ??ZDNwkMgr_ReportChannelInterference_0: (+1)
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    899          
    900          /*********************************************************************
    901           * @fn          ZDNwkMgr_EDScanConfirmCB
    902           *
    903           * @brief       Handle Energy Scan confirm callback
    904           *
    905           * @param       scannedChannels  - scanned channels
    906           * @param       energyDetectList - measured energy for channels
    907           *
    908           * @return      none
    909           */

   \                                 In section .text, align 4, keep-with-next
    910          void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
    911          {
   \                     ZDNwkMgr_EDScanConfirmCB: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    912            ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
    913          
    914            // Send ED Confirm to the Network Manager task
    915            pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
   \   00000004   0x2024             MOVS     R0,#+36
   \   00000006   0x.... 0x....      BL       osal_msg_allocate
   \   0000000A   0x0005             MOVS     R5,R0
    916            if ( pEDScanConfirm )
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD010             BEQ.N    ??ZDNwkMgr_EDScanConfirmCB_0
    917            {
    918              pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
   \   00000010   0x2032             MOVS     R0,#+50
   \   00000012   0x7028             STRB     R0,[R5, #+0]
    919                
    920              // Build the structure
    921              pEDScanConfirm->status = EDScanConfirm->status;
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x70A8             STRB     R0,[R5, #+2]
    922              pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x6068             STR      R0,[R5, #+4]
    923              osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
   \   0000001C   0x221B             MOVS     R2,#+27
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0xF115 0x0008      ADDS     R0,R5,#+8
   \   00000024   0x.... 0x....      BL       osal_memcpy
    924                
    925              osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x....             LDR.N    R0,??DataTable9_1
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       osal_msg_send
    926            }
    927          }
   \                     ??ZDNwkMgr_EDScanConfirmCB_0: (+1)
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    928          
    929          /*********************************************************************
    930           * @fn      ZDNwkMgr_ProcessDataConfirm
    931           *
    932           * @brief   Process received Confirmation for Mgmt NWK Update Notify message
    933           *
    934           * @param   none
    935           *
    936           * @return  none
    937           */

   \                                 In section .text, align 4, keep-with-next
    938          void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
    939          {
   \                     ZDNwkMgr_ProcessDataConfirm: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    940            if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
    941                 ( afDataConfirm->transID == 0 )     && 
    942                 ( afDataConfirm->hdr.status == ZSuccess ) )
   \   00000002   0x....             LDR.N    R1,??DataTable9_15
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD00F             BEQ.N    ??ZDNwkMgr_ProcessDataConfirm_0
   \   0000000A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD10C             BNE.N    ??ZDNwkMgr_ProcessDataConfirm_0
   \   00000010   0x7840             LDRB     R0,[R0, #+1]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD109             BNE.N    ??ZDNwkMgr_ProcessDataConfirm_0
    943            {
    944              // The Mgmt NWK Update Notify was sent as an APS Unicast with  
    945              // acknowledgement and once the acknowledgment is received the 
    946              // total transmit and transmit failure counters are reset to zero.  
    947              _NIB.nwkTotalTransmissions = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable9_7
   \   0000001A   0xF8A1 0x0070      STRH     R0,[R1, #+112]
    948              nwkTransmissionFailures( TRUE );
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       nwkTransmissionFailures
    949              
    950              ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR.N    R1,??DataTable9_15
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    951            }
    952          }
   \                     ??ZDNwkMgr_ProcessDataConfirm_0: (+1)
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x3A 0x20          DC8      0x3A, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     ZDNwkMgr_TaskID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     pZDNwkMgr_EDScanConfirmCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     pZDNwkMgr_ProcessDataConfirm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     pZDNwkMgr_ReportChannelInterference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     ZDNwkMgr_MgmtNwkUpdateNotifyAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x........         DC32     ZDNwkMgr_NewChannel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     _NIB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     ZDNwkMgr_UpdateNotifyTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     ZDNwkMgr_NumUpdateNotifySent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     ZDNwkMgr_MgmtNwkUpdateReq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x07FFF800         DC32     0x7fff800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   0x........         DC32     ZDNwkMgr_TotalTransmissions

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   0x........         DC32     ZDNwkMgr_TxFailures

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   0x........         DC32     ZDNwkMgr_WaitingForNotifyConfirm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   0x........         DC32     NwkMgrStr_4

   \                                 In section .rodata, align 4
   \   00000000   0x3A 0x20          DC8 ": "
   \              0x00         
   \   00000003   0x00               DC8 0
    953          
    954          /*********************************************************************
    955           * PAN ID Conflict Routines
    956           */
    957          #if defined ( NWK_MANAGER )
    958          /*********************************************************************
    959           * @fn          ZDNwkMgr_NetworkReportCB
    960           *
    961           * @brief       Handle the Network Report Command
    962           *
    963           * @param       srcAddr     - Source Address of the message.
    964           * @param       status      - ZSuccess.
    965           * @param       serverMask  - Bit mask of services matching the req serverMask.
    966           * @param       securityUse -
    967           *
    968           * @return      none
    969           */
    970          void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
    971          { 
    972            // Send Network Report message to the Network Manager task
    973            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
    974          }
    975          
    976          /*********************************************************************
    977           * @fn          ZDNwkMgr_NetworkUpdateCB
    978           *
    979           * @brief       Handle the Network Update Command
    980           *
    981           * @param       srcAddr     - Source Address of the message.
    982           * @param       status      - ZSuccess.
    983           * @param       serverMask  - Bit mask of services matching the req serverMask.
    984           * @param       securityUse -
    985           *
    986           * @return      none
    987           */
    988          void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
    989          {
    990            // Send Network Update message to the Network Manager task
    991            osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
    992          }
    993          
    994          /*********************************************************************
    995           * @fn      ZDNwkMgr_ProcessNetworkReport
    996           *
    997           * @brief   Process the incoming Network Report message
    998           *
    999           * @param   pNetworkReport - Structure containing Network Report message
   1000           *
   1001           * @return  none
   1002           */
   1003          void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
   1004          {
   1005            uint8 i;
   1006            uint16 newPID;
   1007            uint8 unique = TRUE;
   1008          
   1009            if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
   1010            {
   1011              if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
   1012              {
   1013                do
   1014                {
   1015                  // select a new PAN ID
   1016                  newPID = (uint16)osal_rand();
   1017                
   1018                  // Make sure that the chosen PAN ID is not already in use in the
   1019                  // local neighborhood and also not contained within the Report 
   1020                  // Information field of the Network Report Command frame
   1021                  for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
   1022                  {
   1023                    if ( pNetworkReport->panIDs[i] == newPID )
   1024                    {
   1025                      unique = FALSE;
   1026                      break;
   1027                    }
   1028                  }
   1029                } while ( !unique );
   1030                   
   1031                // Send out a Network Update command.
   1032                NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
   1033                                        _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
   1034              
   1035                ZDNwkMgr_PanIdUpdateInProgress = TRUE;
   1036              }
   1037            }
   1038          }
   1039          
   1040          /*********************************************************************
   1041           * @fn      ZDNwkMgr_ProcessNetworkUpdate
   1042           *
   1043           * @brief   Process the incoming Network Update message
   1044           *
   1045           * @param   pNetworkReport - Structure containing Network Update message
   1046           *
   1047           * @return  none
   1048           */
   1049          void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
   1050          {
   1051            if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
   1052            { 
   1053              // Our PAN ID has been changed -- notify to save info into NV
   1054              ZDApp_NwkStateUpdateCB();
   1055              
   1056              ZDNwkMgr_PanIdUpdateInProgress = FALSE;
   1057            }
   1058          }
   1059          #endif // NWK_MANAGER
   1060          
   1061          
   1062          /*********************************************************************
   1063          *********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   ZDNwkMgr_BuildAndSendUpdateNotify
        56   -> ZDP_MgmtNwkUpdateNotify
        56   -> osal_mem_alloc
        56   -> osal_mem_free
      24   ZDNwkMgr_CheckForChannelInterference
        24   -> HalLcdWriteString
        24   -> HalLcdWriteStringValueValue
        24   -> ZDNwkMgr_BuildAndSendUpdateNotify
        24   -> osal_start_timerEx
      16   ZDNwkMgr_EDScanConfirmCB
        16   -> osal_memcpy
        16   -> osal_msg_allocate
        16   -> osal_msg_send
       8   ZDNwkMgr_Init
         8   -> ZDO_RegisterForZDOMsg
       8   ZDNwkMgr_ProcessChannelInterference
         8   -> NLME_EDScanRequest
       8   ZDNwkMgr_ProcessDataConfirm
         8   -> nwkTransmissionFailures
      16   ZDNwkMgr_ProcessEDScanConfirm
        16   -> ZDNwkMgr_BuildAndSendUpdateNotify
        16   -> ZDNwkMgr_CheckForChannelInterference
        16   -> nwkTransmissionFailures
        16   -> osal_start_timerEx
      48   ZDNwkMgr_ProcessMgmtNwkUpdateReq
        48   -> NLME_EDScanRequest
        48   -> NLME_SetUpdateID
        48   -> ZDApp_NwkStateUpdateCB
        48   -> ZDNwkMgr_SetNwkManagerAddr
        48   -> ZDO_ParseMgmtNwkUpdateReq
        48   -> ZDP_MgmtNwkUpdateNotify
        48   -> osal_start_timerEx
       8   ZDNwkMgr_ProcessMsgCBs
         8   -> ZDNwkMgr_ProcessMgmtNwkUpdateReq
         8   -> ZDNwkMgr_ProcessServerDiscRsp
      16   ZDNwkMgr_ProcessServerDiscRsp
        16   -> ZDNwkMgr_SetNwkManagerAddr
        16   -> ZDO_ParseServerDiscRsp
       8   ZDNwkMgr_ReportChannelInterference
         8   -> osal_msg_allocate
         8   -> osal_msg_send
       8   ZDNwkMgr_SetNwkManagerAddr
         8   -> ZDApp_NwkStateUpdateCB
      16   ZDNwkMgr_event_loop
        16   -> NLME_EDScanRequest
        16   -> ZDApp_NwkStateUpdateCB
        16   -> ZDNwkMgr_ProcessChannelInterference
        16   -> ZDNwkMgr_ProcessEDScanConfirm
        16   -> ZDNwkMgr_ProcessMsgCBs
        16   -> ZMacSetReq
        16   -> nwkTransmissionFailures
        16   -> osal_msg_deallocate
        16   -> osal_msg_receive
        16   -> osal_start_timerEx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_13
       4  ??DataTable9_14
       4  ??DataTable9_15
       4  ??DataTable9_16
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       4  ?_0
      16  NwkMgrStr_1
      20  NwkMgrStr_2
      20  NwkMgrStr_3
      20  NwkMgrStr_4
     190  ZDNwkMgr_BuildAndSendUpdateNotify
     188  ZDNwkMgr_CheckForChannelInterference
      52  ZDNwkMgr_EDScanConfirmCB
      84  ZDNwkMgr_Init
      12  ZDNwkMgr_MgmtNwkUpdateNotifyAddr
       1  ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
      12  ZDNwkMgr_MgmtNwkUpdateReq
       1  ZDNwkMgr_NewChannel
       1  ZDNwkMgr_NumUpdateNotifySent
      48  ZDNwkMgr_ProcessChannelInterference
      44  ZDNwkMgr_ProcessDataConfirm
      80  ZDNwkMgr_ProcessEDScanConfirm
     324  ZDNwkMgr_ProcessMgmtNwkUpdateReq
      32  ZDNwkMgr_ProcessMsgCBs
      38  ZDNwkMgr_ProcessServerDiscRsp
      38  ZDNwkMgr_ReportChannelInterference
      26  ZDNwkMgr_SetNwkManagerAddr
       1  ZDNwkMgr_TaskID
       2  ZDNwkMgr_TotalTransmissions
       2  ZDNwkMgr_TxFailures
       2  ZDNwkMgr_UpdateNotifyTimer
       1  ZDNwkMgr_WaitingForNotifyConfirm
     266  ZDNwkMgr_event_loop
       4  pZDNwkMgr_EDScanConfirmCB
       4  pZDNwkMgr_NetworkReportCB
       4  pZDNwkMgr_NetworkUpdateCB
       4  pZDNwkMgr_ProcessDataConfirm
       4  pZDNwkMgr_ReportChannelInterference

 
    55 bytes in section .bss
    80 bytes in section .rodata
 1 478 bytes in section .text
 
 1 478 bytes of CODE  memory
    80 bytes of CONST memory
    55 bytes of DATA  memory

Errors: none
Warnings: none
